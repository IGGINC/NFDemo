// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFMsgShare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {

namespace {

const ::google::protobuf::Descriptor* ReqEnterGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLeaveGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLeaveGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEntryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEntryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPlayerEntryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPlayerEntryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPlayerLeaveList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPlayerLeaveList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckSynData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckSynData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckSynData_SynType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckPlayerMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckPlayerMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatContainer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatContainer_ContainerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckPlayerChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckPlayerChat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EffectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckUseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckSwapScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckSwapScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ItemStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrencyStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrencyStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckEndBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckEndBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPickDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPickDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAcceptTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAcceptTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCompeleteTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCompeleteTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckJoinActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckJoinActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivitySubType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckSearchOppnent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckSearchOppnent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckBattleOppnent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckBattleOppnent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckCreateGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckCreateGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSearchGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSearchGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSearchGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSearchGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSearchGuild_SearchGuildObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSearchGuild_SearchGuildObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckJoinGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckJoinGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckLeaveGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckLeaveGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckOprGuildMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckOprGuildMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckOprGuildMember_EGGuildMemberOprType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckOprGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckOprGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckOprGuild_EGGuildOprType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckDonateGuildItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckDonateGuildItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGuildEctypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGuildEctypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildEctypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildEctypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGuildEctypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGuildEctypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildEctypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildEctypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEnterGuildEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterGuildEctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatInfo_EChatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckCreateChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckCreateChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckjoinChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckjoinChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckQuitChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckQuitChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSubscriptionChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSubscriptionChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCancelSubscriptionChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCancelSubscriptionChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqIntensifylevelToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqIntensifylevelToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckIntensifylevelToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckIntensifylevelToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHoleToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHoleToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHoleToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHoleToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInlaystoneToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInlaystoneToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckInlaystoneToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckInlaystoneToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqElementlevelToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqElementlevelToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckElementlevelToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckElementlevelToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSetFightHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSetFightHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWearEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWearEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeOffEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeOffEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMiningTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMiningTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSendMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSendMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSwitchServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSwitchServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSwitchServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSwitchServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeammemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeammemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckCreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckCreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckJoinTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckJoinTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckLeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckLeaveTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckOprTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckOprTeamMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckInviteTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckInviteTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTeamEnterEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTeamEnterEctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckTeamEnterEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckTeamEnterEctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridGuildBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridGuildBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBigMapGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBigMapGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapGridBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapGridBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapLeaveMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapLeaveMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapWarHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapWarHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapGridDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapGridDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBigMapGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBigMapGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBigMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBigMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBigMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBigMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHoldMapGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHoldMapGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHoldMapGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHoldMapGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLeaveMapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLeaveMapMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLeaveMapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLeaveMapMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetMapAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetMapAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGetMapAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGetMapAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMapHunting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMapHunting_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMapHunting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMapHunting_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMapKingWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMapKingWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMapKingWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMapKingWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPVPApplyMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPVPApplyMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqPVPApplyMatch_EApplyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AckPVPApplyMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPVPApplyMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCreatePVPEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCreatePVPEctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCreatePVPEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCreatePVPEctype_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NFMsgShare_2eproto() {
  protobuf_AddDesc_NFMsgShare_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NFMsgShare.proto");
  GOOGLE_CHECK(file != NULL);
  ReqEnterGameServer_descriptor_ = file->message_type(0);
  static const int ReqEnterGameServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, name_),
  };
  ReqEnterGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnterGameServer_descriptor_,
      ReqEnterGameServer::default_instance_,
      ReqEnterGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnterGameServer));
  ReqHeartBeat_descriptor_ = file->message_type(1);
  static const int ReqHeartBeat_offsets_[1] = {
  };
  ReqHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHeartBeat_descriptor_,
      ReqHeartBeat::default_instance_,
      ReqHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHeartBeat));
  ReqLeaveGameServer_descriptor_ = file->message_type(2);
  static const int ReqLeaveGameServer_offsets_[1] = {
  };
  ReqLeaveGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLeaveGameServer_descriptor_,
      ReqLeaveGameServer::default_instance_,
      ReqLeaveGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLeaveGameServer));
  PlayerEntryInfo_descriptor_ = file->message_type(3);
  static const int PlayerEntryInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, object_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, career_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, player_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, class_id_),
  };
  PlayerEntryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEntryInfo_descriptor_,
      PlayerEntryInfo::default_instance_,
      PlayerEntryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEntryInfo));
  AckPlayerEntryList_descriptor_ = file->message_type(4);
  static const int AckPlayerEntryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerEntryList, object_list_),
  };
  AckPlayerEntryList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPlayerEntryList_descriptor_,
      AckPlayerEntryList::default_instance_,
      AckPlayerEntryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerEntryList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerEntryList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPlayerEntryList));
  AckPlayerLeaveList_descriptor_ = file->message_type(5);
  static const int AckPlayerLeaveList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerLeaveList, object_list_),
  };
  AckPlayerLeaveList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPlayerLeaveList_descriptor_,
      AckPlayerLeaveList::default_instance_,
      AckPlayerLeaveList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerLeaveList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerLeaveList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPlayerLeaveList));
  ReqAckSynData_descriptor_ = file->message_type(6);
  static const int ReqAckSynData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, syser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, object_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, syn_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, msg_id_),
  };
  ReqAckSynData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckSynData_descriptor_,
      ReqAckSynData::default_instance_,
      ReqAckSynData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckSynData));
  ReqAckSynData_SynType_descriptor_ = ReqAckSynData_descriptor_->enum_type(0);
  ReqAckPlayerMove_descriptor_ = file->message_type(7);
  static const int ReqAckPlayerMove_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, mover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, movetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, source_pos_),
  };
  ReqAckPlayerMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckPlayerMove_descriptor_,
      ReqAckPlayerMove::default_instance_,
      ReqAckPlayerMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckPlayerMove));
  ChatContainer_descriptor_ = file->message_type(8);
  static const int ChatContainer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContainer, containertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContainer, data_info_),
  };
  ChatContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatContainer_descriptor_,
      ChatContainer::default_instance_,
      ChatContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatContainer));
  ChatContainer_ContainerType_descriptor_ = ChatContainer_descriptor_->enum_type(0);
  ReqAckPlayerChat_descriptor_ = file->message_type(9);
  static const int ReqAckPlayerChat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, container_data_),
  };
  ReqAckPlayerChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckPlayerChat_descriptor_,
      ReqAckPlayerChat::default_instance_,
      ReqAckPlayerChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckPlayerChat));
  ReqAckPlayerChat_EGameChatType_descriptor_ = ReqAckPlayerChat_descriptor_->enum_type(0);
  EffectData_descriptor_ = file->message_type(10);
  static const int EffectData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectData, effect_ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectData, effect_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectData, effect_rlt_),
  };
  EffectData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectData_descriptor_,
      EffectData::default_instance_,
      EffectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectData));
  EffectData_EResultType_descriptor_ = EffectData_descriptor_->enum_type(0);
  ReqAckUseSkill_descriptor_ = file->message_type(11);
  static const int ReqAckUseSkill_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, now_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, tar_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, use_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, effect_data_),
  };
  ReqAckUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckUseSkill_descriptor_,
      ReqAckUseSkill::default_instance_,
      ReqAckUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckUseSkill));
  ReqAckUseItem_descriptor_ = file->message_type(12);
  static const int ReqAckUseItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, item_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, effect_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, targetid_),
  };
  ReqAckUseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckUseItem_descriptor_,
      ReqAckUseItem::default_instance_,
      ReqAckUseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckUseItem));
  ReqAckSwapScene_descriptor_ = file->message_type(13);
  static const int ReqAckSwapScene_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, transfer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, line_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, z_),
  };
  ReqAckSwapScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckSwapScene_descriptor_,
      ReqAckSwapScene::default_instance_,
      ReqAckSwapScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckSwapScene));
  ReqAckSwapScene_EGameSwapType_descriptor_ = ReqAckSwapScene_descriptor_->enum_type(0);
  ItemStruct_descriptor_ = file->message_type(14);
  static const int ItemStruct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemStruct, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemStruct, item_count_),
  };
  ItemStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemStruct_descriptor_,
      ItemStruct::default_instance_,
      ItemStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemStruct));
  CurrencyStruct_descriptor_ = file->message_type(15);
  static const int CurrencyStruct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyStruct, currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyStruct, currency_count_),
  };
  CurrencyStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrencyStruct_descriptor_,
      CurrencyStruct::default_instance_,
      CurrencyStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrencyStruct));
  ReqAckEndBattle_descriptor_ = file->message_type(16);
  static const int ReqAckEndBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, item_list_),
  };
  ReqAckEndBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckEndBattle_descriptor_,
      ReqAckEndBattle::default_instance_,
      ReqAckEndBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckEndBattle));
  ReqPickDropItem_descriptor_ = file->message_type(17);
  static const int ReqPickDropItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickDropItem, item_guid_),
  };
  ReqPickDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPickDropItem_descriptor_,
      ReqPickDropItem::default_instance_,
      ReqPickDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPickDropItem));
  ReqAcceptTask_descriptor_ = file->message_type(18);
  static const int ReqAcceptTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptTask, task_id_),
  };
  ReqAcceptTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAcceptTask_descriptor_,
      ReqAcceptTask::default_instance_,
      ReqAcceptTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAcceptTask));
  ReqCompeleteTask_descriptor_ = file->message_type(19);
  static const int ReqCompeleteTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCompeleteTask, task_id_),
  };
  ReqCompeleteTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCompeleteTask_descriptor_,
      ReqCompeleteTask::default_instance_,
      ReqCompeleteTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCompeleteTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCompeleteTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCompeleteTask));
  ReqAckJoinActivity_descriptor_ = file->message_type(20);
  static const int ReqAckJoinActivity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinActivity, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinActivity, sub_activity_type_),
  };
  ReqAckJoinActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckJoinActivity_descriptor_,
      ReqAckJoinActivity::default_instance_,
      ReqAckJoinActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckJoinActivity));
  ReqAckJoinActivity_EGameActivityType_descriptor_ = ReqAckJoinActivity_descriptor_->enum_type(0);
  ReqAckJoinActivity_EGameActivitySubType_descriptor_ = ReqAckJoinActivity_descriptor_->enum_type(1);
  ReqAckSearchOppnent_descriptor_ = file->message_type(21);
  static const int ReqAckSearchOppnent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSearchOppnent, search_type_),
  };
  ReqAckSearchOppnent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckSearchOppnent_descriptor_,
      ReqAckSearchOppnent::default_instance_,
      ReqAckSearchOppnent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSearchOppnent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSearchOppnent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckSearchOppnent));
  ReqAckBattleOppnent_descriptor_ = file->message_type(22);
  static const int ReqAckBattleOppnent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckBattleOppnent, battle_type_),
  };
  ReqAckBattleOppnent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckBattleOppnent_descriptor_,
      ReqAckBattleOppnent::default_instance_,
      ReqAckBattleOppnent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckBattleOppnent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckBattleOppnent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckBattleOppnent));
  ReqAckCreateGuild_descriptor_ = file->message_type(23);
  static const int ReqAckCreateGuild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateGuild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateGuild, guild_name_),
  };
  ReqAckCreateGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckCreateGuild_descriptor_,
      ReqAckCreateGuild::default_instance_,
      ReqAckCreateGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckCreateGuild));
  ReqSearchGuild_descriptor_ = file->message_type(24);
  static const int ReqSearchGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSearchGuild, guild_name_),
  };
  ReqSearchGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSearchGuild_descriptor_,
      ReqSearchGuild::default_instance_,
      ReqSearchGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSearchGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSearchGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSearchGuild));
  AckSearchGuild_descriptor_ = file->message_type(25);
  static const int AckSearchGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild, guild_list_),
  };
  AckSearchGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSearchGuild_descriptor_,
      AckSearchGuild::default_instance_,
      AckSearchGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSearchGuild));
  AckSearchGuild_SearchGuildObject_descriptor_ = AckSearchGuild_descriptor_->nested_type(0);
  static const int AckSearchGuild_SearchGuildObject_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_member_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_rank_),
  };
  AckSearchGuild_SearchGuildObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSearchGuild_SearchGuildObject_descriptor_,
      AckSearchGuild_SearchGuildObject::default_instance_,
      AckSearchGuild_SearchGuildObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSearchGuild_SearchGuildObject));
  ReqAckJoinGuild_descriptor_ = file->message_type(26);
  static const int ReqAckJoinGuild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinGuild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinGuild, guild_name_),
  };
  ReqAckJoinGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckJoinGuild_descriptor_,
      ReqAckJoinGuild::default_instance_,
      ReqAckJoinGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckJoinGuild));
  ReqAckLeaveGuild_descriptor_ = file->message_type(27);
  static const int ReqAckLeaveGuild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveGuild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveGuild, guild_name_),
  };
  ReqAckLeaveGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckLeaveGuild_descriptor_,
      ReqAckLeaveGuild::default_instance_,
      ReqAckLeaveGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckLeaveGuild));
  ReqAckOprGuildMember_descriptor_ = file->message_type(28);
  static const int ReqAckOprGuildMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuildMember, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuildMember, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuildMember, type_),
  };
  ReqAckOprGuildMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckOprGuildMember_descriptor_,
      ReqAckOprGuildMember::default_instance_,
      ReqAckOprGuildMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuildMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuildMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckOprGuildMember));
  ReqAckOprGuildMember_EGGuildMemberOprType_descriptor_ = ReqAckOprGuildMember_descriptor_->enum_type(0);
  ReqAckOprGuild_descriptor_ = file->message_type(29);
  static const int ReqAckOprGuild_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, recruit_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, ad_data_),
  };
  ReqAckOprGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckOprGuild_descriptor_,
      ReqAckOprGuild::default_instance_,
      ReqAckOprGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckOprGuild));
  ReqAckOprGuild_EGGuildOprType_descriptor_ = ReqAckOprGuild_descriptor_->enum_type(0);
  ReqAckDonateGuildItem_descriptor_ = file->message_type(30);
  static const int ReqAckDonateGuildItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckDonateGuildItem, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckDonateGuildItem, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckDonateGuildItem, item_list_),
  };
  ReqAckDonateGuildItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckDonateGuildItem_descriptor_,
      ReqAckDonateGuildItem::default_instance_,
      ReqAckDonateGuildItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckDonateGuildItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckDonateGuildItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckDonateGuildItem));
  ReqGuildEctypeInfo_descriptor_ = file->message_type(31);
  static const int ReqGuildEctypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGuildEctypeInfo, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGuildEctypeInfo, guild_id_),
  };
  ReqGuildEctypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGuildEctypeInfo_descriptor_,
      ReqGuildEctypeInfo::default_instance_,
      ReqGuildEctypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGuildEctypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGuildEctypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGuildEctypeInfo));
  GuildEctypeInfo_descriptor_ = file->message_type(32);
  static const int GuildEctypeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, ectype_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, ectype_group_),
  };
  GuildEctypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildEctypeInfo_descriptor_,
      GuildEctypeInfo::default_instance_,
      GuildEctypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildEctypeInfo));
  AckGuildEctypeInfo_descriptor_ = file->message_type(33);
  static const int AckGuildEctypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGuildEctypeInfo, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGuildEctypeInfo, xectypeinfo_),
  };
  AckGuildEctypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGuildEctypeInfo_descriptor_,
      AckGuildEctypeInfo::default_instance_,
      AckGuildEctypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGuildEctypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGuildEctypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGuildEctypeInfo));
  SetGuildEctypeInfo_descriptor_ = file->message_type(34);
  static const int SetGuildEctypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildEctypeInfo, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildEctypeInfo, xectypeinfo_),
  };
  SetGuildEctypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildEctypeInfo_descriptor_,
      SetGuildEctypeInfo::default_instance_,
      SetGuildEctypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildEctypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildEctypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildEctypeInfo));
  ReqEnterGuildEctype_descriptor_ = file->message_type(35);
  static const int ReqEnterGuildEctype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGuildEctype, selfid_),
  };
  ReqEnterGuildEctype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnterGuildEctype_descriptor_,
      ReqEnterGuildEctype::default_instance_,
      ReqEnterGuildEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGuildEctype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGuildEctype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnterGuildEctype));
  ChatInfo_descriptor_ = file->message_type(36);
  static const int ChatInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, chat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, chat_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, addtional_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, send_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, send_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, send_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, recvier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, guid_name_),
  };
  ChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatInfo_descriptor_,
      ChatInfo::default_instance_,
      ChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatInfo));
  ChatInfo_EChatType_descriptor_ = ChatInfo_descriptor_->enum_type(0);
  ReqAckCreateChatGroup_descriptor_ = file->message_type(37);
  static const int ReqAckCreateChatGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, xchatgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, chattype_),
  };
  ReqAckCreateChatGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckCreateChatGroup_descriptor_,
      ReqAckCreateChatGroup::default_instance_,
      ReqAckCreateChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckCreateChatGroup));
  ReqAckjoinChatGroup_descriptor_ = file->message_type(38);
  static const int ReqAckjoinChatGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, xchatgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, chattype_),
  };
  ReqAckjoinChatGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckjoinChatGroup_descriptor_,
      ReqAckjoinChatGroup::default_instance_,
      ReqAckjoinChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckjoinChatGroup));
  ReqAckQuitChatGroup_descriptor_ = file->message_type(39);
  static const int ReqAckQuitChatGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckQuitChatGroup, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckQuitChatGroup, xchatgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckQuitChatGroup, result_),
  };
  ReqAckQuitChatGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckQuitChatGroup_descriptor_,
      ReqAckQuitChatGroup::default_instance_,
      ReqAckQuitChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckQuitChatGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckQuitChatGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckQuitChatGroup));
  ReqSubscriptionChatGroup_descriptor_ = file->message_type(40);
  static const int ReqSubscriptionChatGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscriptionChatGroup, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscriptionChatGroup, xchatgroupid_),
  };
  ReqSubscriptionChatGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSubscriptionChatGroup_descriptor_,
      ReqSubscriptionChatGroup::default_instance_,
      ReqSubscriptionChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscriptionChatGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscriptionChatGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSubscriptionChatGroup));
  ReqCancelSubscriptionChatGroup_descriptor_ = file->message_type(41);
  static const int ReqCancelSubscriptionChatGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelSubscriptionChatGroup, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelSubscriptionChatGroup, xchatgroupid_),
  };
  ReqCancelSubscriptionChatGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCancelSubscriptionChatGroup_descriptor_,
      ReqCancelSubscriptionChatGroup::default_instance_,
      ReqCancelSubscriptionChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelSubscriptionChatGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelSubscriptionChatGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCancelSubscriptionChatGroup));
  ReqIntensifylevelToEquip_descriptor_ = file->message_type(42);
  static const int ReqIntensifylevelToEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIntensifylevelToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIntensifylevelToEquip, equipid_),
  };
  ReqIntensifylevelToEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqIntensifylevelToEquip_descriptor_,
      ReqIntensifylevelToEquip::default_instance_,
      ReqIntensifylevelToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIntensifylevelToEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIntensifylevelToEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqIntensifylevelToEquip));
  AckIntensifylevelToEquip_descriptor_ = file->message_type(43);
  static const int AckIntensifylevelToEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIntensifylevelToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIntensifylevelToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIntensifylevelToEquip, result_),
  };
  AckIntensifylevelToEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckIntensifylevelToEquip_descriptor_,
      AckIntensifylevelToEquip::default_instance_,
      AckIntensifylevelToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIntensifylevelToEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIntensifylevelToEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckIntensifylevelToEquip));
  ReqHoleToEquip_descriptor_ = file->message_type(44);
  static const int ReqHoleToEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoleToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoleToEquip, equipid_),
  };
  ReqHoleToEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHoleToEquip_descriptor_,
      ReqHoleToEquip::default_instance_,
      ReqHoleToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoleToEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoleToEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHoleToEquip));
  AckHoleToEquip_descriptor_ = file->message_type(45);
  static const int AckHoleToEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoleToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoleToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoleToEquip, result_),
  };
  AckHoleToEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHoleToEquip_descriptor_,
      AckHoleToEquip::default_instance_,
      AckHoleToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoleToEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoleToEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHoleToEquip));
  ReqInlaystoneToEquip_descriptor_ = file->message_type(46);
  static const int ReqInlaystoneToEquip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, hole_index_),
  };
  ReqInlaystoneToEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInlaystoneToEquip_descriptor_,
      ReqInlaystoneToEquip::default_instance_,
      ReqInlaystoneToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInlaystoneToEquip));
  AckInlaystoneToEquip_descriptor_ = file->message_type(47);
  static const int AckInlaystoneToEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInlaystoneToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInlaystoneToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInlaystoneToEquip, result_),
  };
  AckInlaystoneToEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckInlaystoneToEquip_descriptor_,
      AckInlaystoneToEquip::default_instance_,
      AckInlaystoneToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInlaystoneToEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInlaystoneToEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckInlaystoneToEquip));
  ReqElementlevelToEquip_descriptor_ = file->message_type(48);
  static const int ReqElementlevelToEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElementlevelToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElementlevelToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElementlevelToEquip, eelementtype_),
  };
  ReqElementlevelToEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqElementlevelToEquip_descriptor_,
      ReqElementlevelToEquip::default_instance_,
      ReqElementlevelToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElementlevelToEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElementlevelToEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqElementlevelToEquip));
  AckElementlevelToEquip_descriptor_ = file->message_type(49);
  static const int AckElementlevelToEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckElementlevelToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckElementlevelToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckElementlevelToEquip, result_),
  };
  AckElementlevelToEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckElementlevelToEquip_descriptor_,
      AckElementlevelToEquip::default_instance_,
      AckElementlevelToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckElementlevelToEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckElementlevelToEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckElementlevelToEquip));
  ReqSetFightHero_descriptor_ = file->message_type(50);
  static const int ReqSetFightHero_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFightHero, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFightHero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFightHero, fightpos_),
  };
  ReqSetFightHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSetFightHero_descriptor_,
      ReqSetFightHero::default_instance_,
      ReqSetFightHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFightHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFightHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSetFightHero));
  ReqWearEquip_descriptor_ = file->message_type(51);
  static const int ReqWearEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWearEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWearEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWearEquip, targetid_),
  };
  ReqWearEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWearEquip_descriptor_,
      ReqWearEquip::default_instance_,
      ReqWearEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWearEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWearEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWearEquip));
  TakeOffEquip_descriptor_ = file->message_type(52);
  static const int TakeOffEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOffEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOffEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOffEquip, targetid_),
  };
  TakeOffEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeOffEquip_descriptor_,
      TakeOffEquip::default_instance_,
      TakeOffEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOffEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOffEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeOffEquip));
  ReqMiningTitle_descriptor_ = file->message_type(53);
  static const int ReqMiningTitle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMiningTitle, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMiningTitle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMiningTitle, y_),
  };
  ReqMiningTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMiningTitle_descriptor_,
      ReqMiningTitle::default_instance_,
      ReqMiningTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMiningTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMiningTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMiningTitle));
  ReqSendMail_descriptor_ = file->message_type(54);
  static const int ReqSendMail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, reciever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, currency_list_),
  };
  ReqSendMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSendMail_descriptor_,
      ReqSendMail::default_instance_,
      ReqSendMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSendMail));
  ReqSwitchServer_descriptor_ = file->message_type(55);
  static const int ReqSwitchServer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, self_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, target_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, gate_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, groupid_),
  };
  ReqSwitchServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSwitchServer_descriptor_,
      ReqSwitchServer::default_instance_,
      ReqSwitchServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSwitchServer));
  AckSwitchServer_descriptor_ = file->message_type(56);
  static const int AckSwitchServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, self_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, target_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, gate_serverid_),
  };
  AckSwitchServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSwitchServer_descriptor_,
      AckSwitchServer::default_instance_,
      AckSwitchServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSwitchServer));
  TeamInfo_descriptor_ = file->message_type(57);
  static const int TeamInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, captain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, teammemberinfo_),
  };
  TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo));
  TeammemberInfo_descriptor_ = file->message_type(58);
  static const int TeammemberInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, nlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, headicon_),
  };
  TeammemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeammemberInfo_descriptor_,
      TeammemberInfo::default_instance_,
      TeammemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeammemberInfo));
  ReqAckCreateTeam_descriptor_ = file->message_type(59);
  static const int ReqAckCreateTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, xteaminfo_),
  };
  ReqAckCreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckCreateTeam_descriptor_,
      ReqAckCreateTeam::default_instance_,
      ReqAckCreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckCreateTeam));
  ReqAckJoinTeam_descriptor_ = file->message_type(60);
  static const int ReqAckJoinTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, xteaminfo_),
  };
  ReqAckJoinTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckJoinTeam_descriptor_,
      ReqAckJoinTeam::default_instance_,
      ReqAckJoinTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckJoinTeam));
  ReqAckLeaveTeam_descriptor_ = file->message_type(61);
  static const int ReqAckLeaveTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, xteaminfo_),
  };
  ReqAckLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckLeaveTeam_descriptor_,
      ReqAckLeaveTeam::default_instance_,
      ReqAckLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckLeaveTeam));
  ReqAckOprTeamMember_descriptor_ = file->message_type(62);
  static const int ReqAckOprTeamMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, xteaminfo_),
  };
  ReqAckOprTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckOprTeamMember_descriptor_,
      ReqAckOprTeamMember::default_instance_,
      ReqAckOprTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckOprTeamMember));
  ReqAckOprTeamMember_EGTeamMemberOprType_descriptor_ = ReqAckOprTeamMember_descriptor_->enum_type(0);
  ReqAckInviteTeam_descriptor_ = file->message_type(63);
  static const int ReqAckInviteTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, invite_target_id_),
  };
  ReqAckInviteTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckInviteTeam_descriptor_,
      ReqAckInviteTeam::default_instance_,
      ReqAckInviteTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckInviteTeam));
  ReqTeamEnterEctype_descriptor_ = file->message_type(64);
  static const int ReqTeamEnterEctype_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, nectypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, ngroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, nresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, nserverid_),
  };
  ReqTeamEnterEctype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTeamEnterEctype_descriptor_,
      ReqTeamEnterEctype::default_instance_,
      ReqTeamEnterEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTeamEnterEctype));
  AckTeamEnterEctype_descriptor_ = file->message_type(65);
  static const int AckTeamEnterEctype_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, nectypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, ngroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, nresult_),
  };
  AckTeamEnterEctype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckTeamEnterEctype_descriptor_,
      AckTeamEnterEctype::default_instance_,
      AckTeamEnterEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckTeamEnterEctype));
  GridGuildBaseInfo_descriptor_ = file->message_type(66);
  static const int GridGuildBaseInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, icon_),
  };
  GridGuildBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridGuildBaseInfo_descriptor_,
      GridGuildBaseInfo::default_instance_,
      GridGuildBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridGuildBaseInfo));
  ReqBigMapGridInfo_descriptor_ = file->message_type(67);
  static const int ReqBigMapGridInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapGridInfo, map_title_id_),
  };
  ReqBigMapGridInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBigMapGridInfo_descriptor_,
      ReqBigMapGridInfo::default_instance_,
      ReqBigMapGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapGridInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapGridInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBigMapGridInfo));
  BigMapGridBaseInfo_descriptor_ = file->message_type(68);
  static const int BigMapGridBaseInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, guild_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, kingwar_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, kingwarrer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, hurting_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, hurter_),
  };
  BigMapGridBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigMapGridBaseInfo_descriptor_,
      BigMapGridBaseInfo::default_instance_,
      BigMapGridBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigMapGridBaseInfo));
  BigMapLeaveMsg_descriptor_ = file->message_type(69);
  static const int BigMapLeaveMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, owner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, msg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, owner_level_),
  };
  BigMapLeaveMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigMapLeaveMsg_descriptor_,
      BigMapLeaveMsg::default_instance_,
      BigMapLeaveMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigMapLeaveMsg));
  BigMapWarHistory_descriptor_ = file->message_type(70);
  static const int BigMapWarHistory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, red_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, blue_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, winner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, war_time_),
  };
  BigMapWarHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigMapWarHistory_descriptor_,
      BigMapWarHistory::default_instance_,
      BigMapWarHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigMapWarHistory));
  BigMapGridDetailInfo_descriptor_ = file->message_type(71);
  static const int BigMapGridDetailInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, grid_base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, stay_guid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, leave_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, war_history_),
  };
  BigMapGridDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigMapGridDetailInfo_descriptor_,
      BigMapGridDetailInfo::default_instance_,
      BigMapGridDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigMapGridDetailInfo));
  AckBigMapGridInfo_descriptor_ = file->message_type(72);
  static const int AckBigMapGridInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapGridInfo, map_data_),
  };
  AckBigMapGridInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBigMapGridInfo_descriptor_,
      AckBigMapGridInfo::default_instance_,
      AckBigMapGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapGridInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapGridInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBigMapGridInfo));
  ReqBigMapInfo_descriptor_ = file->message_type(73);
  static const int ReqBigMapInfo_offsets_[1] = {
  };
  ReqBigMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBigMapInfo_descriptor_,
      ReqBigMapInfo::default_instance_,
      ReqBigMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBigMapInfo));
  AckBigMapInfo_descriptor_ = file->message_type(74);
  static const int AckBigMapInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapInfo, grid_base_info_),
  };
  AckBigMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBigMapInfo_descriptor_,
      AckBigMapInfo::default_instance_,
      AckBigMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBigMapInfo));
  ReqHoldMapGrid_descriptor_ = file->message_type(75);
  static const int ReqHoldMapGrid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, map_title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, guild_id_),
  };
  ReqHoldMapGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHoldMapGrid_descriptor_,
      ReqHoldMapGrid::default_instance_,
      ReqHoldMapGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHoldMapGrid));
  AckHoldMapGrid_descriptor_ = file->message_type(76);
  static const int AckHoldMapGrid_offsets_[1] = {
  };
  AckHoldMapGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHoldMapGrid_descriptor_,
      AckHoldMapGrid::default_instance_,
      AckHoldMapGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoldMapGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoldMapGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHoldMapGrid));
  ReqLeaveMapMsg_descriptor_ = file->message_type(77);
  static const int ReqLeaveMapMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, map_title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, leave_msg_),
  };
  ReqLeaveMapMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLeaveMapMsg_descriptor_,
      ReqLeaveMapMsg::default_instance_,
      ReqLeaveMapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLeaveMapMsg));
  AckLeaveMapMsg_descriptor_ = file->message_type(78);
  static const int AckLeaveMapMsg_offsets_[1] = {
  };
  AckLeaveMapMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLeaveMapMsg_descriptor_,
      AckLeaveMapMsg::default_instance_,
      AckLeaveMapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLeaveMapMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLeaveMapMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLeaveMapMsg));
  ReqGetMapAward_descriptor_ = file->message_type(79);
  static const int ReqGetMapAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMapAward, map_title_id_),
  };
  ReqGetMapAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetMapAward_descriptor_,
      ReqGetMapAward::default_instance_,
      ReqGetMapAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMapAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMapAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetMapAward));
  AckGetMapAward_descriptor_ = file->message_type(80);
  static const int AckGetMapAward_offsets_[1] = {
  };
  AckGetMapAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGetMapAward_descriptor_,
      AckGetMapAward::default_instance_,
      AckGetMapAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetMapAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetMapAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGetMapAward));
  ReqMapHunting_descriptor_ = file->message_type(81);
  static const int ReqMapHunting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapHunting, map_title_id_),
  };
  ReqMapHunting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMapHunting_descriptor_,
      ReqMapHunting::default_instance_,
      ReqMapHunting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapHunting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapHunting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMapHunting));
  AckMapHunting_descriptor_ = file->message_type(82);
  static const int AckMapHunting_offsets_[1] = {
  };
  AckMapHunting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckMapHunting_descriptor_,
      AckMapHunting::default_instance_,
      AckMapHunting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapHunting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapHunting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckMapHunting));
  ReqMapKingWar_descriptor_ = file->message_type(83);
  static const int ReqMapKingWar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapKingWar, map_title_id_),
  };
  ReqMapKingWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMapKingWar_descriptor_,
      ReqMapKingWar::default_instance_,
      ReqMapKingWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapKingWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapKingWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMapKingWar));
  AckMapKingWar_descriptor_ = file->message_type(84);
  static const int AckMapKingWar_offsets_[1] = {
  };
  AckMapKingWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckMapKingWar_descriptor_,
      AckMapKingWar::default_instance_,
      AckMapKingWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapKingWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapKingWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckMapKingWar));
  PVPRoomInfo_descriptor_ = file->message_type(85);
  static const int PVPRoomInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, ncellstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, npvpmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, npvpgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, maxpalyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, xredplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, xblueplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, groupid_),
  };
  PVPRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPRoomInfo_descriptor_,
      PVPRoomInfo::default_instance_,
      PVPRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPRoomInfo));
  ReqPVPApplyMatch_descriptor_ = file->message_type(86);
  static const int ReqPVPApplyMatch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, npvpmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, applytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, team_id_),
  };
  ReqPVPApplyMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPVPApplyMatch_descriptor_,
      ReqPVPApplyMatch::default_instance_,
      ReqPVPApplyMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPVPApplyMatch));
  ReqPVPApplyMatch_EApplyType_descriptor_ = ReqPVPApplyMatch_descriptor_->enum_type(0);
  AckPVPApplyMatch_descriptor_ = file->message_type(87);
  static const int AckPVPApplyMatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, xroominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, applytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, nresult_),
  };
  AckPVPApplyMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPVPApplyMatch_descriptor_,
      AckPVPApplyMatch::default_instance_,
      AckPVPApplyMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPVPApplyMatch));
  ReqCreatePVPEctype_descriptor_ = file->message_type(88);
  static const int ReqCreatePVPEctype_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePVPEctype, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePVPEctype, xroominfo_),
  };
  ReqCreatePVPEctype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCreatePVPEctype_descriptor_,
      ReqCreatePVPEctype::default_instance_,
      ReqCreatePVPEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePVPEctype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePVPEctype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCreatePVPEctype));
  AckCreatePVPEctype_descriptor_ = file->message_type(89);
  static const int AckCreatePVPEctype_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCreatePVPEctype, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCreatePVPEctype, xroominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCreatePVPEctype, applytype_),
  };
  AckCreatePVPEctype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCreatePVPEctype_descriptor_,
      AckCreatePVPEctype::default_instance_,
      AckCreatePVPEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCreatePVPEctype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCreatePVPEctype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCreatePVPEctype));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NFMsgShare_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnterGameServer_descriptor_, &ReqEnterGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHeartBeat_descriptor_, &ReqHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLeaveGameServer_descriptor_, &ReqLeaveGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEntryInfo_descriptor_, &PlayerEntryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPlayerEntryList_descriptor_, &AckPlayerEntryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPlayerLeaveList_descriptor_, &AckPlayerLeaveList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckSynData_descriptor_, &ReqAckSynData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckPlayerMove_descriptor_, &ReqAckPlayerMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatContainer_descriptor_, &ChatContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckPlayerChat_descriptor_, &ReqAckPlayerChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectData_descriptor_, &EffectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckUseSkill_descriptor_, &ReqAckUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckUseItem_descriptor_, &ReqAckUseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckSwapScene_descriptor_, &ReqAckSwapScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemStruct_descriptor_, &ItemStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrencyStruct_descriptor_, &CurrencyStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckEndBattle_descriptor_, &ReqAckEndBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPickDropItem_descriptor_, &ReqPickDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAcceptTask_descriptor_, &ReqAcceptTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCompeleteTask_descriptor_, &ReqCompeleteTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckJoinActivity_descriptor_, &ReqAckJoinActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckSearchOppnent_descriptor_, &ReqAckSearchOppnent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckBattleOppnent_descriptor_, &ReqAckBattleOppnent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckCreateGuild_descriptor_, &ReqAckCreateGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSearchGuild_descriptor_, &ReqSearchGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSearchGuild_descriptor_, &AckSearchGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSearchGuild_SearchGuildObject_descriptor_, &AckSearchGuild_SearchGuildObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckJoinGuild_descriptor_, &ReqAckJoinGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckLeaveGuild_descriptor_, &ReqAckLeaveGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckOprGuildMember_descriptor_, &ReqAckOprGuildMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckOprGuild_descriptor_, &ReqAckOprGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckDonateGuildItem_descriptor_, &ReqAckDonateGuildItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGuildEctypeInfo_descriptor_, &ReqGuildEctypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildEctypeInfo_descriptor_, &GuildEctypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGuildEctypeInfo_descriptor_, &AckGuildEctypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildEctypeInfo_descriptor_, &SetGuildEctypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnterGuildEctype_descriptor_, &ReqEnterGuildEctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatInfo_descriptor_, &ChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckCreateChatGroup_descriptor_, &ReqAckCreateChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckjoinChatGroup_descriptor_, &ReqAckjoinChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckQuitChatGroup_descriptor_, &ReqAckQuitChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSubscriptionChatGroup_descriptor_, &ReqSubscriptionChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCancelSubscriptionChatGroup_descriptor_, &ReqCancelSubscriptionChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqIntensifylevelToEquip_descriptor_, &ReqIntensifylevelToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckIntensifylevelToEquip_descriptor_, &AckIntensifylevelToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHoleToEquip_descriptor_, &ReqHoleToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHoleToEquip_descriptor_, &AckHoleToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInlaystoneToEquip_descriptor_, &ReqInlaystoneToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckInlaystoneToEquip_descriptor_, &AckInlaystoneToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqElementlevelToEquip_descriptor_, &ReqElementlevelToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckElementlevelToEquip_descriptor_, &AckElementlevelToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSetFightHero_descriptor_, &ReqSetFightHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWearEquip_descriptor_, &ReqWearEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeOffEquip_descriptor_, &TakeOffEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMiningTitle_descriptor_, &ReqMiningTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSendMail_descriptor_, &ReqSendMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSwitchServer_descriptor_, &ReqSwitchServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSwitchServer_descriptor_, &AckSwitchServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeammemberInfo_descriptor_, &TeammemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckCreateTeam_descriptor_, &ReqAckCreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckJoinTeam_descriptor_, &ReqAckJoinTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckLeaveTeam_descriptor_, &ReqAckLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckOprTeamMember_descriptor_, &ReqAckOprTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckInviteTeam_descriptor_, &ReqAckInviteTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTeamEnterEctype_descriptor_, &ReqTeamEnterEctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckTeamEnterEctype_descriptor_, &AckTeamEnterEctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridGuildBaseInfo_descriptor_, &GridGuildBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBigMapGridInfo_descriptor_, &ReqBigMapGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigMapGridBaseInfo_descriptor_, &BigMapGridBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigMapLeaveMsg_descriptor_, &BigMapLeaveMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigMapWarHistory_descriptor_, &BigMapWarHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigMapGridDetailInfo_descriptor_, &BigMapGridDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBigMapGridInfo_descriptor_, &AckBigMapGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBigMapInfo_descriptor_, &ReqBigMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBigMapInfo_descriptor_, &AckBigMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHoldMapGrid_descriptor_, &ReqHoldMapGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHoldMapGrid_descriptor_, &AckHoldMapGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLeaveMapMsg_descriptor_, &ReqLeaveMapMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLeaveMapMsg_descriptor_, &AckLeaveMapMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetMapAward_descriptor_, &ReqGetMapAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGetMapAward_descriptor_, &AckGetMapAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMapHunting_descriptor_, &ReqMapHunting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckMapHunting_descriptor_, &AckMapHunting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMapKingWar_descriptor_, &ReqMapKingWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckMapKingWar_descriptor_, &AckMapKingWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPRoomInfo_descriptor_, &PVPRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPVPApplyMatch_descriptor_, &ReqPVPApplyMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPVPApplyMatch_descriptor_, &AckPVPApplyMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCreatePVPEctype_descriptor_, &ReqCreatePVPEctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCreatePVPEctype_descriptor_, &AckCreatePVPEctype::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NFMsgShare_2eproto() {
  delete ReqEnterGameServer::default_instance_;
  delete ReqEnterGameServer_reflection_;
  delete ReqHeartBeat::default_instance_;
  delete ReqHeartBeat_reflection_;
  delete ReqLeaveGameServer::default_instance_;
  delete ReqLeaveGameServer_reflection_;
  delete PlayerEntryInfo::default_instance_;
  delete PlayerEntryInfo_reflection_;
  delete AckPlayerEntryList::default_instance_;
  delete AckPlayerEntryList_reflection_;
  delete AckPlayerLeaveList::default_instance_;
  delete AckPlayerLeaveList_reflection_;
  delete ReqAckSynData::default_instance_;
  delete ReqAckSynData_reflection_;
  delete ReqAckPlayerMove::default_instance_;
  delete ReqAckPlayerMove_reflection_;
  delete ChatContainer::default_instance_;
  delete ChatContainer_reflection_;
  delete ReqAckPlayerChat::default_instance_;
  delete ReqAckPlayerChat_reflection_;
  delete EffectData::default_instance_;
  delete EffectData_reflection_;
  delete ReqAckUseSkill::default_instance_;
  delete ReqAckUseSkill_reflection_;
  delete ReqAckUseItem::default_instance_;
  delete ReqAckUseItem_reflection_;
  delete ReqAckSwapScene::default_instance_;
  delete ReqAckSwapScene_reflection_;
  delete ItemStruct::default_instance_;
  delete ItemStruct_reflection_;
  delete CurrencyStruct::default_instance_;
  delete CurrencyStruct_reflection_;
  delete ReqAckEndBattle::default_instance_;
  delete ReqAckEndBattle_reflection_;
  delete ReqPickDropItem::default_instance_;
  delete ReqPickDropItem_reflection_;
  delete ReqAcceptTask::default_instance_;
  delete ReqAcceptTask_reflection_;
  delete ReqCompeleteTask::default_instance_;
  delete ReqCompeleteTask_reflection_;
  delete ReqAckJoinActivity::default_instance_;
  delete ReqAckJoinActivity_reflection_;
  delete ReqAckSearchOppnent::default_instance_;
  delete ReqAckSearchOppnent_reflection_;
  delete ReqAckBattleOppnent::default_instance_;
  delete ReqAckBattleOppnent_reflection_;
  delete ReqAckCreateGuild::default_instance_;
  delete ReqAckCreateGuild_reflection_;
  delete ReqSearchGuild::default_instance_;
  delete ReqSearchGuild_reflection_;
  delete AckSearchGuild::default_instance_;
  delete AckSearchGuild_reflection_;
  delete AckSearchGuild_SearchGuildObject::default_instance_;
  delete AckSearchGuild_SearchGuildObject_reflection_;
  delete ReqAckJoinGuild::default_instance_;
  delete ReqAckJoinGuild_reflection_;
  delete ReqAckLeaveGuild::default_instance_;
  delete ReqAckLeaveGuild_reflection_;
  delete ReqAckOprGuildMember::default_instance_;
  delete ReqAckOprGuildMember_reflection_;
  delete ReqAckOprGuild::default_instance_;
  delete ReqAckOprGuild_reflection_;
  delete ReqAckDonateGuildItem::default_instance_;
  delete ReqAckDonateGuildItem_reflection_;
  delete ReqGuildEctypeInfo::default_instance_;
  delete ReqGuildEctypeInfo_reflection_;
  delete GuildEctypeInfo::default_instance_;
  delete GuildEctypeInfo_reflection_;
  delete AckGuildEctypeInfo::default_instance_;
  delete AckGuildEctypeInfo_reflection_;
  delete SetGuildEctypeInfo::default_instance_;
  delete SetGuildEctypeInfo_reflection_;
  delete ReqEnterGuildEctype::default_instance_;
  delete ReqEnterGuildEctype_reflection_;
  delete ChatInfo::default_instance_;
  delete ChatInfo_reflection_;
  delete ReqAckCreateChatGroup::default_instance_;
  delete ReqAckCreateChatGroup_reflection_;
  delete ReqAckjoinChatGroup::default_instance_;
  delete ReqAckjoinChatGroup_reflection_;
  delete ReqAckQuitChatGroup::default_instance_;
  delete ReqAckQuitChatGroup_reflection_;
  delete ReqSubscriptionChatGroup::default_instance_;
  delete ReqSubscriptionChatGroup_reflection_;
  delete ReqCancelSubscriptionChatGroup::default_instance_;
  delete ReqCancelSubscriptionChatGroup_reflection_;
  delete ReqIntensifylevelToEquip::default_instance_;
  delete ReqIntensifylevelToEquip_reflection_;
  delete AckIntensifylevelToEquip::default_instance_;
  delete AckIntensifylevelToEquip_reflection_;
  delete ReqHoleToEquip::default_instance_;
  delete ReqHoleToEquip_reflection_;
  delete AckHoleToEquip::default_instance_;
  delete AckHoleToEquip_reflection_;
  delete ReqInlaystoneToEquip::default_instance_;
  delete ReqInlaystoneToEquip_reflection_;
  delete AckInlaystoneToEquip::default_instance_;
  delete AckInlaystoneToEquip_reflection_;
  delete ReqElementlevelToEquip::default_instance_;
  delete ReqElementlevelToEquip_reflection_;
  delete AckElementlevelToEquip::default_instance_;
  delete AckElementlevelToEquip_reflection_;
  delete ReqSetFightHero::default_instance_;
  delete ReqSetFightHero_reflection_;
  delete ReqWearEquip::default_instance_;
  delete ReqWearEquip_reflection_;
  delete TakeOffEquip::default_instance_;
  delete TakeOffEquip_reflection_;
  delete ReqMiningTitle::default_instance_;
  delete ReqMiningTitle_reflection_;
  delete ReqSendMail::default_instance_;
  delete ReqSendMail_reflection_;
  delete ReqSwitchServer::default_instance_;
  delete ReqSwitchServer_reflection_;
  delete AckSwitchServer::default_instance_;
  delete AckSwitchServer_reflection_;
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete TeammemberInfo::default_instance_;
  delete TeammemberInfo_reflection_;
  delete ReqAckCreateTeam::default_instance_;
  delete ReqAckCreateTeam_reflection_;
  delete ReqAckJoinTeam::default_instance_;
  delete ReqAckJoinTeam_reflection_;
  delete ReqAckLeaveTeam::default_instance_;
  delete ReqAckLeaveTeam_reflection_;
  delete ReqAckOprTeamMember::default_instance_;
  delete ReqAckOprTeamMember_reflection_;
  delete ReqAckInviteTeam::default_instance_;
  delete ReqAckInviteTeam_reflection_;
  delete ReqTeamEnterEctype::default_instance_;
  delete ReqTeamEnterEctype_reflection_;
  delete AckTeamEnterEctype::default_instance_;
  delete AckTeamEnterEctype_reflection_;
  delete GridGuildBaseInfo::default_instance_;
  delete GridGuildBaseInfo_reflection_;
  delete ReqBigMapGridInfo::default_instance_;
  delete ReqBigMapGridInfo_reflection_;
  delete BigMapGridBaseInfo::default_instance_;
  delete BigMapGridBaseInfo_reflection_;
  delete BigMapLeaveMsg::default_instance_;
  delete BigMapLeaveMsg_reflection_;
  delete BigMapWarHistory::default_instance_;
  delete BigMapWarHistory_reflection_;
  delete BigMapGridDetailInfo::default_instance_;
  delete BigMapGridDetailInfo_reflection_;
  delete AckBigMapGridInfo::default_instance_;
  delete AckBigMapGridInfo_reflection_;
  delete ReqBigMapInfo::default_instance_;
  delete ReqBigMapInfo_reflection_;
  delete AckBigMapInfo::default_instance_;
  delete AckBigMapInfo_reflection_;
  delete ReqHoldMapGrid::default_instance_;
  delete ReqHoldMapGrid_reflection_;
  delete AckHoldMapGrid::default_instance_;
  delete AckHoldMapGrid_reflection_;
  delete ReqLeaveMapMsg::default_instance_;
  delete ReqLeaveMapMsg_reflection_;
  delete AckLeaveMapMsg::default_instance_;
  delete AckLeaveMapMsg_reflection_;
  delete ReqGetMapAward::default_instance_;
  delete ReqGetMapAward_reflection_;
  delete AckGetMapAward::default_instance_;
  delete AckGetMapAward_reflection_;
  delete ReqMapHunting::default_instance_;
  delete ReqMapHunting_reflection_;
  delete AckMapHunting::default_instance_;
  delete AckMapHunting_reflection_;
  delete ReqMapKingWar::default_instance_;
  delete ReqMapKingWar_reflection_;
  delete AckMapKingWar::default_instance_;
  delete AckMapKingWar_reflection_;
  delete PVPRoomInfo::default_instance_;
  delete PVPRoomInfo_reflection_;
  delete ReqPVPApplyMatch::default_instance_;
  delete ReqPVPApplyMatch_reflection_;
  delete AckPVPApplyMatch::default_instance_;
  delete AckPVPApplyMatch_reflection_;
  delete ReqCreatePVPEctype::default_instance_;
  delete ReqCreatePVPEctype_reflection_;
  delete AckCreatePVPEctype::default_instance_;
  delete AckCreatePVPEctype_reflection_;
}

void protobuf_AddDesc_NFMsgShare_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::NFMsg::protobuf_AddDesc_NFDefine_2eproto();
  ::NFMsg::protobuf_AddDesc_NFMsgBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020NFMsgShare.proto\022\005NFMsg\032\016NFDefine.prot"
    "o\032\017NFMsgBase.proto\"^\n\022ReqEnterGameServer"
    "\022\030\n\002id\030\001 \002(\0132\014.NFMsg.Ident\022\017\n\007account\030\002 "
    "\002(\014\022\017\n\007game_id\030\003 \002(\005\022\014\n\004name\030\004 \002(\014\"\016\n\014Re"
    "qHeartBeat\"\024\n\022ReqLeaveGameServer\"\267\001\n\017Pla"
    "yerEntryInfo\022!\n\013object_guid\030\001 \002(\0132\014.NFMs"
    "g.Ident\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\022\t\n\001z\030\004 \002(\002"
    "\022\023\n\013career_type\030\005 \002(\005\022\024\n\014player_state\030\006 "
    "\002(\005\022\021\n\tconfig_id\030\007 \002(\014\022\020\n\010scene_id\030\010 \002(\005"
    "\022\020\n\010class_id\030\t \002(\014\"A\n\022AckPlayerEntryList"
    "\022+\n\013object_list\030\001 \003(\0132\026.NFMsg.PlayerEntr"
    "yInfo\"7\n\022AckPlayerLeaveList\022!\n\013object_li"
    "st\030\001 \003(\0132\014.NFMsg.Ident\"\370\001\n\rReqAckSynData"
    "\022\033\n\005syser\030\001 \002(\0132\014.NFMsg.Ident\022!\n\013object_"
    "list\030\002 \003(\0132\014.NFMsg.Ident\022\014\n\004data\030\003 \002(\014\022."
    "\n\010syn_type\030\004 \002(\0162\034.NFMsg.ReqAckSynData.S"
    "ynType\022!\n\006msg_id\030\005 \002(\0162\021.NFMsg.EGameMsgI"
    "D\"F\n\007SynType\022\r\n\tEST_SCENE\020\001\022\r\n\tEST_GROUP"
    "\020\002\022\r\n\tEST_GUILD\020\003\022\016\n\nEST_FRIEND\020\004\"\213\001\n\020Re"
    "qAckPlayerMove\022\033\n\005mover\030\001 \002(\0132\014.NFMsg.Id"
    "ent\022\020\n\010moveType\030\002 \002(\005\022#\n\ntarget_pos\030\003 \003("
    "\0132\017.NFMsg.Position\022#\n\nsource_pos\030\004 \003(\0132\017"
    ".NFMsg.Position\"Y\n\rChatContainer\022\025\n\rConT"
    "ainerType\030\002 \002(\005\022\021\n\tdata_info\030\003 \002(\014\"\036\n\rCo"
    "ntainerType\022\r\n\tEGCT_ITEM\020\001\"\262\002\n\020ReqAckPla"
    "yerChat\022\035\n\007chat_id\030\001 \002(\0132\014.NFMsg.Ident\0228"
    "\n\tchat_type\030\002 \002(\0162%.NFMsg.ReqAckPlayerCh"
    "at.EGameChatType\022\021\n\tchat_info\030\003 \002(\014\022\021\n\tc"
    "hat_name\030\004 \002(\014\022\037\n\ttarget_id\030\005 \001(\0132\014.NFMs"
    "g.Ident\022,\n\016Container_data\030\006 \003(\0132\024.NFMsg."
    "ChatContainer\"P\n\rEGameChatType\022\016\n\nEGCT_G"
    "UILD\020\000\022\020\n\014EGCT_PRIVATE\020\001\022\r\n\tEGCT_TEAM\020\002\022"
    "\016\n\nEGCT_WORLD\020\003\"\267\001\n\nEffectData\022\"\n\014effect"
    "_ident\030\001 \002(\0132\014.NFMsg.Ident\022\024\n\014effect_val"
    "ue\030\002 \002(\005\0221\n\neffect_rlt\030\003 \002(\0162\035.NFMsg.Eff"
    "ectData.EResultType\"<\n\013EResultType\022\017\n\013EE"
    "T_SUCCESS\020\000\022\014\n\010EET_FAIL\020\001\022\016\n\nEET_REFUSE\020"
    "\002\"\275\001\n\016ReqAckUseSkill\022\032\n\004user\030\001 \002(\0132\014.NFM"
    "sg.Ident\022\020\n\010skill_id\030\002 \002(\014\022 \n\007now_pos\030\003 "
    "\002(\0132\017.NFMsg.Position\022 \n\007tar_pos\030\004 \002(\0132\017."
    "NFMsg.Position\022\021\n\tuse_index\030\005 \002(\005\022&\n\013eff"
    "ect_data\030\006 \003(\0132\021.NFMsg.EffectData\"\265\001\n\rRe"
    "qAckUseItem\022\032\n\004user\030\001 \002(\0132\014.NFMsg.Ident\022"
    "\037\n\titem_guid\030\002 \002(\0132\014.NFMsg.Ident\022&\n\013effe"
    "ct_data\030\003 \003(\0132\021.NFMsg.EffectData\022\037\n\004item"
    "\030\004 \002(\0132\021.NFMsg.ItemStruct\022\036\n\010targetid\030\005 "
    "\002(\0132\014.NFMsg.Ident\"\345\001\n\017ReqAckSwapScene\022;\n"
    "\rtransfer_type\030\001 \002(\0162$.NFMsg.ReqAckSwapS"
    "cene.EGameSwapType\022\020\n\010scene_id\030\002 \002(\005\022\017\n\007"
    "line_id\030\003 \002(\005\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z"
    "\030\006 \001(\002\"Q\n\rEGameSwapType\022\017\n\013EGST_NARMAL\020\000"
    "\022\016\n\nEGST_CLONE\020\001\022\016\n\nEGST_ARENA\020\002\022\017\n\013EGST"
    "_MIRROR\020\003\"1\n\nItemStruct\022\017\n\007item_id\030\001 \002(\t"
    "\022\022\n\nitem_count\030\002 \002(\005\"\?\n\016CurrencyStruct\022\025"
    "\n\rcurrency_type\030\001 \002(\005\022\026\n\016currency_count\030"
    "\002 \002(\005\"d\n\017ReqAckEndBattle\022\r\n\005money\030\001 \002(\005\022"
    "\013\n\003exp\030\002 \002(\005\022\017\n\007diamond\030\003 \002(\005\022$\n\titem_li"
    "st\030\004 \003(\0132\021.NFMsg.ItemStruct\"2\n\017ReqPickDr"
    "opItem\022\037\n\titem_guid\030\002 \002(\0132\014.NFMsg.Ident\""
    " \n\rReqAcceptTask\022\017\n\007task_id\030\001 \002(\014\"#\n\020Req"
    "CompeleteTask\022\017\n\007task_id\030\001 \002(\014\"\357\001\n\022ReqAc"
    "kJoinActivity\022B\n\ractivity_type\030\001 \002(\0162+.N"
    "FMsg.ReqAckJoinActivity.EGameActivityTyp"
    "e\022I\n\021sub_activity_type\030\002 \002(\0162..NFMsg.Req"
    "AckJoinActivity.EGameActivitySubType\"!\n\021"
    "EGameActivityType\022\014\n\010EGAT_PVP\020\000\"\'\n\024EGame"
    "ActivitySubType\022\017\n\013EGAT_NORMAL\020\000\">\n\023ReqA"
    "ckSearchOppnent\022\'\n\013search_type\030\001 \002(\0162\022.N"
    "FMsg.EBattleType\">\n\023ReqAckBattleOppnent\022"
    "\'\n\013battle_type\030\001 \002(\0162\022.NFMsg.EBattleType"
    "\"G\n\021ReqAckCreateGuild\022\036\n\010guild_id\030\001 \002(\0132"
    "\014.NFMsg.Ident\022\022\n\nguild_name\030\002 \002(\t\"$\n\016Req"
    "SearchGuild\022\022\n\nguild_name\030\001 \002(\t\"\220\002\n\016AckS"
    "earchGuild\022;\n\nguild_list\030\001 \003(\0132\'.NFMsg.A"
    "ckSearchGuild.SearchGuildObject\032\300\001\n\021Sear"
    "chGuildObject\022\036\n\010guild_ID\030\001 \002(\0132\014.NFMsg."
    "Ident\022\022\n\nguild_name\030\002 \002(\t\022\022\n\nguild_icon\030"
    "\003 \002(\t\022\032\n\022guild_member_count\030\004 \002(\005\022\036\n\026gui"
    "ld_member_max_count\030\005 \002(\005\022\023\n\013guild_honor"
    "\030\006 \002(\005\022\022\n\nguild_rank\030\007 \002(\005\"E\n\017ReqAckJoin"
    "Guild\022\036\n\010guild_id\030\001 \002(\0132\014.NFMsg.Ident\022\022\n"
    "\nguild_name\030\002 \002(\t\"F\n\020ReqAckLeaveGuild\022\036\n"
    "\010guild_id\030\001 \002(\0132\014.NFMsg.Ident\022\022\n\nguild_n"
    "ame\030\002 \002(\t\"\311\002\n\024ReqAckOprGuildMember\022\036\n\010gu"
    "ild_id\030\001 \002(\0132\014.NFMsg.Ident\022\037\n\tmember_id\030"
    "\002 \002(\0132\014.NFMsg.Ident\022>\n\004type\030\003 \002(\01620.NFMs"
    "g.ReqAckOprGuildMember.EGGuildMemberOprT"
    "ype\"\257\001\n\024EGGuildMemberOprType\022\r\n\tEGAT_DOW"
    "N\020\000\022\013\n\007EGAT_UP\020\001\022\r\n\tEGAT_KICK\020\002\022\020\n\014EGAT_"
    "APPOINT\020\003\022\r\n\tEGAT_FIRE\020\004\022\017\n\013EGAT_DEMISE\020"
    "\005\022\024\n\020EGAT_ACCEPTAPPLY\020\006\022\022\n\016EGAT_DENYAPPL"
    "Y\020\007\022\020\n\014EGAT_KICKOUT\020\010\"\275\002\n\016ReqAckOprGuild"
    "\022\036\n\010guild_id\030\001 \002(\0132\014.NFMsg.Ident\022\037\n\tplay"
    "er_id\030\002 \002(\0132\014.NFMsg.Ident\0222\n\004type\030\003 \002(\0162"
    "$.NFMsg.ReqAckOprGuild.EGGuildOprType\022\024\n"
    "\014Recruit_data\030\004 \002(\t\022\017\n\007Ad_data\030\005 \002(\t\"\216\001\n"
    "\016EGGuildOprType\022\025\n\021EGAT_APPLYDISMISS\020\001\022\024"
    "\n\020EGAT_STOPDISMISS\020\002\022\023\n\017EGAT_SETRECRUIT\020"
    "\003\022\027\n\023EGAT_PUBLISHRECRUIT\020\004\022\017\n\013EGAT_EDITA"
    "D\020\005\022\020\n\014EGAT_LEVELUP\020\006\"~\n\025ReqAckDonateGui"
    "ldItem\022\036\n\010guild_id\030\001 \002(\0132\014.NFMsg.Ident\022\037"
    "\n\ttarget_id\030\002 \002(\0132\014.NFMsg.Ident\022$\n\titem_"
    "list\030\003 \003(\0132\021.NFMsg.ItemStruct\"R\n\022ReqGuil"
    "dEctypeInfo\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.Iden"
    "t\022\036\n\010guild_id\030\002 \002(\0132\014.NFMsg.Ident\"m\n\017Gui"
    "ldEctypeInfo\022\036\n\010guild_id\030\001 \002(\0132\014.NFMsg.I"
    "dent\022\021\n\tserver_id\030\002 \002(\003\022\021\n\tEctype_id\030\003 \002"
    "(\003\022\024\n\014Ectype_Group\030\004 \002(\003\"_\n\022AckGuildEcty"
    "peInfo\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.Ident\022+\n\013"
    "xectypeinfo\030\002 \002(\0132\026.NFMsg.GuildEctypeInf"
    "o\"_\n\022SetGuildEctypeInfo\022\034\n\006selfid\030\001 \002(\0132"
    "\014.NFMsg.Ident\022+\n\013xectypeinfo\030\002 \002(\0132\026.NFM"
    "sg.GuildEctypeInfo\"3\n\023ReqEnterGuildEctyp"
    "e\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.Ident\"\325\002\n\010Chat"
    "Info\022,\n\tchat_type\030\001 \002(\0162\031.NFMsg.ChatInfo"
    ".EChatType\022\021\n\tchat_info\030\002 \002(\014\022\021\n\tchat_ti"
    "me\030\003 \002(\003\022\026\n\016addtional_info\030\004 \001(\014\022\035\n\007send"
    "_id\030\005 \002(\0132\014.NFMsg.Ident\022\021\n\tsend_name\030\006 \002"
    "(\014\022\022\n\nsend_level\030\007 \001(\005\022 \n\nrecvier_id\030\010 \003"
    "(\0132\014.NFMsg.Ident\022\021\n\tguid_name\030\t \001(\014\"b\n\tE"
    "ChatType\022\024\n\020ECHATTYPE_NORMAL\020\000\022\025\n\021ECHATT"
    "YPE_PRIVATE\020\001\022\023\n\017ECHATTYPE_GUILD\020\002\022\023\n\017EC"
    "HATTYPE_WORLD\020\003\"y\n\025ReqAckCreateChatGroup"
    "\022\014\n\004name\030\001 \002(\014\022\034\n\006selfid\030\002 \002(\0132\014.NFMsg.I"
    "dent\022\"\n\014xChatGroupid\030\003 \001(\0132\014.NFMsg.Ident"
    "\022\020\n\010chatType\030\004 \001(\005\"y\n\023ReqAckjoinChatGrou"
    "p\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.Ident\022\"\n\014xChat"
    "Groupid\030\002 \001(\0132\014.NFMsg.Ident\022\016\n\006result\030\003 "
    "\001(\003\022\020\n\010chatType\030\004 \001(\005\"g\n\023ReqAckQuitChatG"
    "roup\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.Ident\022\"\n\014xC"
    "hatGroupid\030\002 \001(\0132\014.NFMsg.Ident\022\016\n\006result"
    "\030\003 \001(\003\"\\\n\030ReqSubscriptionChatGroup\022\034\n\006se"
    "lfid\030\001 \002(\0132\014.NFMsg.Ident\022\"\n\014xChatGroupid"
    "\030\002 \003(\0132\014.NFMsg.Ident\"b\n\036ReqCancelSubscri"
    "ptionChatGroup\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.I"
    "dent\022\"\n\014xChatGroupid\030\002 \003(\0132\014.NFMsg.Ident"
    "\"W\n\030ReqIntensifylevelToEquip\022\034\n\006selfid\030\001"
    " \002(\0132\014.NFMsg.Ident\022\035\n\007equipid\030\002 \002(\0132\014.NF"
    "Msg.Ident\"g\n\030AckIntensifylevelToEquip\022\034\n"
    "\006selfid\030\001 \002(\0132\014.NFMsg.Ident\022\035\n\007equipid\030\002"
    " \002(\0132\014.NFMsg.Ident\022\016\n\006result\030\003 \002(\005\"M\n\016Re"
    "qHoleToEquip\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.Ide"
    "nt\022\035\n\007equipid\030\002 \002(\0132\014.NFMsg.Ident\"]\n\016Ack"
    "HoleToEquip\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.Iden"
    "t\022\035\n\007equipid\030\002 \002(\0132\014.NFMsg.Ident\022\016\n\006resu"
    "lt\030\003 \002(\005\"x\n\024ReqInlaystoneToEquip\022\034\n\006self"
    "id\030\001 \002(\0132\014.NFMsg.Ident\022\035\n\007equipid\030\002 \002(\0132"
    "\014.NFMsg.Ident\022\017\n\007stoneid\030\003 \002(\014\022\022\n\nhole_i"
    "ndex\030\004 \002(\005\"c\n\024AckInlaystoneToEquip\022\034\n\006se"
    "lfid\030\001 \002(\0132\014.NFMsg.Ident\022\035\n\007equipid\030\002 \002("
    "\0132\014.NFMsg.Ident\022\016\n\006result\030\003 \002(\005\"\204\001\n\026ReqE"
    "lementlevelToEquip\022\034\n\006selfid\030\001 \002(\0132\014.NFM"
    "sg.Ident\022\035\n\007equipid\030\002 \002(\0132\014.NFMsg.Ident\022"
    "-\n\014eElementType\030\003 \002(\0162\027.NFMsg.EGameEleme"
    "ntType\"e\n\026AckElementlevelToEquip\022\034\n\006self"
    "id\030\001 \002(\0132\014.NFMsg.Ident\022\035\n\007equipid\030\002 \002(\0132"
    "\014.NFMsg.Ident\022\016\n\006result\030\003 \002(\005\"_\n\017ReqSetF"
    "ightHero\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.Ident\022\034"
    "\n\006Heroid\030\002 \002(\0132\014.NFMsg.Ident\022\020\n\010FightPos"
    "\030\003 \002(\005\"k\n\014ReqWearEquip\022\034\n\006selfid\030\001 \002(\0132\014"
    ".NFMsg.Ident\022\035\n\007equipid\030\002 \002(\0132\014.NFMsg.Id"
    "ent\022\036\n\010Targetid\030\003 \002(\0132\014.NFMsg.Ident\"k\n\014T"
    "akeOffEquip\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.Iden"
    "t\022\035\n\007equipid\030\002 \002(\0132\014.NFMsg.Ident\022\036\n\010Targ"
    "etid\030\003 \002(\0132\014.NFMsg.Ident\"D\n\016ReqMiningTit"
    "le\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.Ident\022\t\n\001x\030\002 "
    "\002(\005\022\t\n\001y\030\003 \002(\005\"\237\001\n\013ReqSendMail\022\034\n\006selfid"
    "\030\001 \002(\0132\014.NFMsg.Ident\022\036\n\010reciever\030\002 \002(\0132\014"
    ".NFMsg.Ident\022$\n\titem_list\030\003 \003(\0132\021.NFMsg."
    "ItemStruct\022,\n\rcurrency_list\030\004 \003(\0132\025.NFMs"
    "g.CurrencyStruct\"\271\001\n\017ReqSwitchServer\022\034\n\006"
    "selfid\030\001 \002(\0132\014.NFMsg.Ident\022\025\n\rself_serve"
    "rid\030\002 \002(\003\022\027\n\017target_serverid\030\003 \002(\003\022\025\n\rga"
    "te_serverid\030\004 \002(\003\022\017\n\007SceneID\030\005 \002(\003\022\037\n\tcl"
    "ient_id\030\006 \002(\0132\014.NFMsg.Ident\022\017\n\007groupID\030\007"
    " \002(\003\"v\n\017AckSwitchServer\022\034\n\006selfid\030\001 \002(\0132"
    "\014.NFMsg.Ident\022\025\n\rself_serverid\030\002 \002(\003\022\027\n\017"
    "target_serverid\030\003 \002(\003\022\025\n\rgate_serverid\030\004"
    " \002(\003\"z\n\010TeamInfo\022\035\n\007team_id\030\001 \002(\0132\014.NFMs"
    "g.Ident\022 \n\ncaptain_id\030\002 \002(\0132\014.NFMsg.Iden"
    "t\022-\n\016teammemberInfo\030\003 \003(\0132\025.NFMsg.Teamme"
    "mberInfo\"n\n\016TeammemberInfo\022\037\n\tplayer_id\030"
    "\001 \002(\0132\014.NFMsg.Ident\022\014\n\004name\030\002 \002(\t\022\016\n\006nLe"
    "vel\030\003 \002(\005\022\013\n\003job\030\004 \002(\005\022\020\n\010HeadIcon\030\005 \002(\t"
    "\"U\n\020ReqAckCreateTeam\022\035\n\007team_id\030\001 \002(\0132\014."
    "NFMsg.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017.NFMsg.T"
    "eamInfo\"S\n\016ReqAckJoinTeam\022\035\n\007team_id\030\001 \002"
    "(\0132\014.NFMsg.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017.NF"
    "Msg.TeamInfo\"T\n\017ReqAckLeaveTeam\022\035\n\007team_"
    "id\030\001 \002(\0132\014.NFMsg.Ident\022\"\n\txTeamInfo\030\002 \001("
    "\0132\017.NFMsg.TeamInfo\"\350\002\n\023ReqAckOprTeamMemb"
    "er\022\035\n\007team_id\030\001 \002(\0132\014.NFMsg.Ident\022\037\n\tmem"
    "ber_id\030\002 \002(\0132\014.NFMsg.Ident\022<\n\004type\030\003 \002(\016"
    "2..NFMsg.ReqAckOprTeamMember.EGTeamMembe"
    "rOprType\022\"\n\txTeamInfo\030\004 \001(\0132\017.NFMsg.Team"
    "Info\"\256\001\n\023EGTeamMemberOprType\022\r\n\tEGAT_DOW"
    "N\020\000\022\013\n\007EGAT_UP\020\001\022\r\n\tEGAT_KICK\020\002\022\020\n\014EGAT_"
    "APPOINT\020\003\022\r\n\tEGAT_FIRE\020\004\022\017\n\013EGAT_DEMISE\020"
    "\005\022\024\n\020EGAT_ACCEPTAPPLY\020\006\022\022\n\016EGAT_DENYAPPL"
    "Y\020\007\022\020\n\014EGAT_KICKOUT\020\010\"x\n\020ReqAckInviteTea"
    "m\022\035\n\007team_id\030\001 \002(\0132\014.NFMsg.Ident\022\035\n\007self"
    "_id\030\002 \002(\0132\014.NFMsg.Ident\022&\n\020invite_target"
    "_id\030\003 \002(\0132\014.NFMsg.Ident\"\233\001\n\022ReqTeamEnter"
    "Ectype\022\035\n\007team_id\030\001 \002(\0132\014.NFMsg.Ident\022\035\n"
    "\007self_id\030\002 \002(\0132\014.NFMsg.Ident\022\021\n\tnEctypeI"
    "D\030\003 \001(\005\022\020\n\010nGroupID\030\004 \001(\005\022\017\n\007nResult\030\005 \001"
    "(\005\022\021\n\tnServerID\030\006 \001(\005\"\210\001\n\022AckTeamEnterEc"
    "type\022\035\n\007team_id\030\001 \002(\0132\014.NFMsg.Ident\022\035\n\007s"
    "elf_id\030\002 \002(\0132\014.NFMsg.Ident\022\021\n\tnEctypeID\030"
    "\003 \001(\005\022\020\n\010nGroupID\030\004 \001(\005\022\017\n\007nResult\030\005 \001(\005"
    "\"k\n\021GridGuildBaseInfo\022\030\n\002id\030\001 \002(\0132\014.NFMs"
    "g.Ident\022\r\n\005level\030\002 \002(\005\022\r\n\005count\030\003 \002(\005\022\020\n"
    "\010resource\030\004 \002(\005\022\014\n\004icon\030\005 \002(\014\")\n\021ReqBigM"
    "apGridInfo\022\024\n\014map_title_id\030\001 \003(\014\"\272\001\n\022Big"
    "MapGridBaseInfo\022\n\n\002id\030\001 \002(\014\022,\n\nguild_inf"
    "o\030\002 \002(\0132\030.NFMsg.GridGuildBaseInfo\022\024\n\014kin"
    "gwar_time\030\n \002(\005\022 \n\nkingwarrer\030\013 \002(\0132\014.NF"
    "Msg.Ident\022\024\n\014hurting_time\030\024 \002(\005\022\034\n\006hurte"
    "r\030\025 \002(\0132\014.NFMsg.Ident\"z\n\016BigMapLeaveMsg\022"
    "\033\n\005owner\030\001 \002(\0132\014.NFMsg.Ident\022\022\n\nowner_na"
    "me\030\002 \002(\014\022\020\n\010msg_data\030\003 \002(\014\022\020\n\010msg_time\030\004"
    " \002(\005\022\023\n\013owner_level\030\005 \002(\005\"\236\001\n\020BigMapWarH"
    "istory\022*\n\010red_info\030\001 \002(\0132\030.NFMsg.GridGui"
    "ldBaseInfo\022+\n\tblue_info\030\002 \002(\0132\030.NFMsg.Gr"
    "idGuildBaseInfo\022\037\n\twinner_id\030\n \002(\0132\014.NFM"
    "sg.Ident\022\020\n\010war_time\030\013 \002(\005\"\323\001\n\024BigMapGri"
    "dDetailInfo\0221\n\016grid_base_info\030\001 \002(\0132\031.NF"
    "Msg.BigMapGridBaseInfo\0220\n\016stay_guid_list"
    "\030\002 \003(\0132\030.NFMsg.GridGuildBaseInfo\022(\n\tleav"
    "e_msg\030\003 \003(\0132\025.NFMsg.BigMapLeaveMsg\022,\n\013wa"
    "r_history\030\004 \003(\0132\027.NFMsg.BigMapWarHistory"
    "\"B\n\021AckBigMapGridInfo\022-\n\010map_data\030\001 \003(\0132"
    "\033.NFMsg.BigMapGridDetailInfo\"\017\n\rReqBigMa"
    "pInfo\"B\n\rAckBigMapInfo\0221\n\016grid_base_info"
    "\030\001 \003(\0132\031.NFMsg.BigMapGridBaseInfo\"F\n\016Req"
    "HoldMapGrid\022\024\n\014map_title_id\030\001 \002(\014\022\036\n\010gui"
    "ld_id\030\002 \002(\0132\014.NFMsg.Ident\"\020\n\016AckHoldMapG"
    "rid\"P\n\016ReqLeaveMapMsg\022\024\n\014map_title_id\030\001 "
    "\002(\014\022(\n\tleave_msg\030\002 \002(\0132\025.NFMsg.BigMapLea"
    "veMsg\"\020\n\016AckLeaveMapMsg\"&\n\016ReqGetMapAwar"
    "d\022\024\n\014map_title_id\030\001 \002(\014\"\020\n\016AckGetMapAwar"
    "d\"%\n\rReqMapHunting\022\024\n\014map_title_id\030\001 \002(\014"
    "\"\017\n\rAckMapHunting\"%\n\rReqMapKingWar\022\024\n\014ma"
    "p_title_id\030\001 \002(\014\"\017\n\rAckMapKingWar\"\361\001\n\013PV"
    "PRoomInfo\022\023\n\013nCellStatus\030\001 \002(\005\022\034\n\006RoomID"
    "\030\002 \002(\0132\014.NFMsg.Ident\022\020\n\010nPVPMode\030\003 \002(\005\022\021"
    "\n\tnPVPGrade\030\004 \002(\005\022\021\n\tMaxPalyer\030\005 \002(\005\022 \n\n"
    "xRedPlayer\030\006 \003(\0132\014.NFMsg.Ident\022!\n\013xBlueP"
    "layer\030\007 \003(\0132\014.NFMsg.Ident\022\020\n\010serverid\030\010 "
    "\001(\003\022\017\n\007SceneID\030\t \001(\003\022\017\n\007groupID\030\n \001(\003\"\276\001"
    "\n\020ReqPVPApplyMatch\022\035\n\007self_id\030\001 \002(\0132\014.NF"
    "Msg.Ident\022\020\n\010nPVPMode\030\002 \002(\005\022\r\n\005score\030\003 \001"
    "(\003\022\021\n\tApplyType\030\004 \002(\005\022\035\n\007team_id\030\005 \001(\0132\014"
    ".NFMsg.Ident\"8\n\nEApplyType\022\025\n\021EApplyType"
    "_Single\020\000\022\023\n\017EApplyType_Team\020\001\"|\n\020AckPVP"
    "ApplyMatch\022\035\n\007self_id\030\001 \002(\0132\014.NFMsg.Iden"
    "t\022%\n\txRoomInfo\030\002 \001(\0132\022.NFMsg.PVPRoomInfo"
    "\022\021\n\tApplyType\030\003 \002(\005\022\017\n\007nResult\030\004 \002(\005\"Z\n\022"
    "ReqCreatePVPEctype\022\035\n\007self_id\030\001 \002(\0132\014.NF"
    "Msg.Ident\022%\n\txRoomInfo\030\002 \002(\0132\022.NFMsg.PVP"
    "RoomInfo\"m\n\022AckCreatePVPEctype\022\035\n\007self_i"
    "d\030\001 \002(\0132\014.NFMsg.Ident\022%\n\txRoomInfo\030\002 \002(\013"
    "2\022.NFMsg.PVPRoomInfo\022\021\n\tApplyType\030\003 \002(\005", 10519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgShare.proto", &protobuf_RegisterTypes);
  ReqEnterGameServer::default_instance_ = new ReqEnterGameServer();
  ReqHeartBeat::default_instance_ = new ReqHeartBeat();
  ReqLeaveGameServer::default_instance_ = new ReqLeaveGameServer();
  PlayerEntryInfo::default_instance_ = new PlayerEntryInfo();
  AckPlayerEntryList::default_instance_ = new AckPlayerEntryList();
  AckPlayerLeaveList::default_instance_ = new AckPlayerLeaveList();
  ReqAckSynData::default_instance_ = new ReqAckSynData();
  ReqAckPlayerMove::default_instance_ = new ReqAckPlayerMove();
  ChatContainer::default_instance_ = new ChatContainer();
  ReqAckPlayerChat::default_instance_ = new ReqAckPlayerChat();
  EffectData::default_instance_ = new EffectData();
  ReqAckUseSkill::default_instance_ = new ReqAckUseSkill();
  ReqAckUseItem::default_instance_ = new ReqAckUseItem();
  ReqAckSwapScene::default_instance_ = new ReqAckSwapScene();
  ItemStruct::default_instance_ = new ItemStruct();
  CurrencyStruct::default_instance_ = new CurrencyStruct();
  ReqAckEndBattle::default_instance_ = new ReqAckEndBattle();
  ReqPickDropItem::default_instance_ = new ReqPickDropItem();
  ReqAcceptTask::default_instance_ = new ReqAcceptTask();
  ReqCompeleteTask::default_instance_ = new ReqCompeleteTask();
  ReqAckJoinActivity::default_instance_ = new ReqAckJoinActivity();
  ReqAckSearchOppnent::default_instance_ = new ReqAckSearchOppnent();
  ReqAckBattleOppnent::default_instance_ = new ReqAckBattleOppnent();
  ReqAckCreateGuild::default_instance_ = new ReqAckCreateGuild();
  ReqSearchGuild::default_instance_ = new ReqSearchGuild();
  AckSearchGuild::default_instance_ = new AckSearchGuild();
  AckSearchGuild_SearchGuildObject::default_instance_ = new AckSearchGuild_SearchGuildObject();
  ReqAckJoinGuild::default_instance_ = new ReqAckJoinGuild();
  ReqAckLeaveGuild::default_instance_ = new ReqAckLeaveGuild();
  ReqAckOprGuildMember::default_instance_ = new ReqAckOprGuildMember();
  ReqAckOprGuild::default_instance_ = new ReqAckOprGuild();
  ReqAckDonateGuildItem::default_instance_ = new ReqAckDonateGuildItem();
  ReqGuildEctypeInfo::default_instance_ = new ReqGuildEctypeInfo();
  GuildEctypeInfo::default_instance_ = new GuildEctypeInfo();
  AckGuildEctypeInfo::default_instance_ = new AckGuildEctypeInfo();
  SetGuildEctypeInfo::default_instance_ = new SetGuildEctypeInfo();
  ReqEnterGuildEctype::default_instance_ = new ReqEnterGuildEctype();
  ChatInfo::default_instance_ = new ChatInfo();
  ReqAckCreateChatGroup::default_instance_ = new ReqAckCreateChatGroup();
  ReqAckjoinChatGroup::default_instance_ = new ReqAckjoinChatGroup();
  ReqAckQuitChatGroup::default_instance_ = new ReqAckQuitChatGroup();
  ReqSubscriptionChatGroup::default_instance_ = new ReqSubscriptionChatGroup();
  ReqCancelSubscriptionChatGroup::default_instance_ = new ReqCancelSubscriptionChatGroup();
  ReqIntensifylevelToEquip::default_instance_ = new ReqIntensifylevelToEquip();
  AckIntensifylevelToEquip::default_instance_ = new AckIntensifylevelToEquip();
  ReqHoleToEquip::default_instance_ = new ReqHoleToEquip();
  AckHoleToEquip::default_instance_ = new AckHoleToEquip();
  ReqInlaystoneToEquip::default_instance_ = new ReqInlaystoneToEquip();
  AckInlaystoneToEquip::default_instance_ = new AckInlaystoneToEquip();
  ReqElementlevelToEquip::default_instance_ = new ReqElementlevelToEquip();
  AckElementlevelToEquip::default_instance_ = new AckElementlevelToEquip();
  ReqSetFightHero::default_instance_ = new ReqSetFightHero();
  ReqWearEquip::default_instance_ = new ReqWearEquip();
  TakeOffEquip::default_instance_ = new TakeOffEquip();
  ReqMiningTitle::default_instance_ = new ReqMiningTitle();
  ReqSendMail::default_instance_ = new ReqSendMail();
  ReqSwitchServer::default_instance_ = new ReqSwitchServer();
  AckSwitchServer::default_instance_ = new AckSwitchServer();
  TeamInfo::default_instance_ = new TeamInfo();
  TeammemberInfo::default_instance_ = new TeammemberInfo();
  ReqAckCreateTeam::default_instance_ = new ReqAckCreateTeam();
  ReqAckJoinTeam::default_instance_ = new ReqAckJoinTeam();
  ReqAckLeaveTeam::default_instance_ = new ReqAckLeaveTeam();
  ReqAckOprTeamMember::default_instance_ = new ReqAckOprTeamMember();
  ReqAckInviteTeam::default_instance_ = new ReqAckInviteTeam();
  ReqTeamEnterEctype::default_instance_ = new ReqTeamEnterEctype();
  AckTeamEnterEctype::default_instance_ = new AckTeamEnterEctype();
  GridGuildBaseInfo::default_instance_ = new GridGuildBaseInfo();
  ReqBigMapGridInfo::default_instance_ = new ReqBigMapGridInfo();
  BigMapGridBaseInfo::default_instance_ = new BigMapGridBaseInfo();
  BigMapLeaveMsg::default_instance_ = new BigMapLeaveMsg();
  BigMapWarHistory::default_instance_ = new BigMapWarHistory();
  BigMapGridDetailInfo::default_instance_ = new BigMapGridDetailInfo();
  AckBigMapGridInfo::default_instance_ = new AckBigMapGridInfo();
  ReqBigMapInfo::default_instance_ = new ReqBigMapInfo();
  AckBigMapInfo::default_instance_ = new AckBigMapInfo();
  ReqHoldMapGrid::default_instance_ = new ReqHoldMapGrid();
  AckHoldMapGrid::default_instance_ = new AckHoldMapGrid();
  ReqLeaveMapMsg::default_instance_ = new ReqLeaveMapMsg();
  AckLeaveMapMsg::default_instance_ = new AckLeaveMapMsg();
  ReqGetMapAward::default_instance_ = new ReqGetMapAward();
  AckGetMapAward::default_instance_ = new AckGetMapAward();
  ReqMapHunting::default_instance_ = new ReqMapHunting();
  AckMapHunting::default_instance_ = new AckMapHunting();
  ReqMapKingWar::default_instance_ = new ReqMapKingWar();
  AckMapKingWar::default_instance_ = new AckMapKingWar();
  PVPRoomInfo::default_instance_ = new PVPRoomInfo();
  ReqPVPApplyMatch::default_instance_ = new ReqPVPApplyMatch();
  AckPVPApplyMatch::default_instance_ = new AckPVPApplyMatch();
  ReqCreatePVPEctype::default_instance_ = new ReqCreatePVPEctype();
  AckCreatePVPEctype::default_instance_ = new AckCreatePVPEctype();
  ReqEnterGameServer::default_instance_->InitAsDefaultInstance();
  ReqHeartBeat::default_instance_->InitAsDefaultInstance();
  ReqLeaveGameServer::default_instance_->InitAsDefaultInstance();
  PlayerEntryInfo::default_instance_->InitAsDefaultInstance();
  AckPlayerEntryList::default_instance_->InitAsDefaultInstance();
  AckPlayerLeaveList::default_instance_->InitAsDefaultInstance();
  ReqAckSynData::default_instance_->InitAsDefaultInstance();
  ReqAckPlayerMove::default_instance_->InitAsDefaultInstance();
  ChatContainer::default_instance_->InitAsDefaultInstance();
  ReqAckPlayerChat::default_instance_->InitAsDefaultInstance();
  EffectData::default_instance_->InitAsDefaultInstance();
  ReqAckUseSkill::default_instance_->InitAsDefaultInstance();
  ReqAckUseItem::default_instance_->InitAsDefaultInstance();
  ReqAckSwapScene::default_instance_->InitAsDefaultInstance();
  ItemStruct::default_instance_->InitAsDefaultInstance();
  CurrencyStruct::default_instance_->InitAsDefaultInstance();
  ReqAckEndBattle::default_instance_->InitAsDefaultInstance();
  ReqPickDropItem::default_instance_->InitAsDefaultInstance();
  ReqAcceptTask::default_instance_->InitAsDefaultInstance();
  ReqCompeleteTask::default_instance_->InitAsDefaultInstance();
  ReqAckJoinActivity::default_instance_->InitAsDefaultInstance();
  ReqAckSearchOppnent::default_instance_->InitAsDefaultInstance();
  ReqAckBattleOppnent::default_instance_->InitAsDefaultInstance();
  ReqAckCreateGuild::default_instance_->InitAsDefaultInstance();
  ReqSearchGuild::default_instance_->InitAsDefaultInstance();
  AckSearchGuild::default_instance_->InitAsDefaultInstance();
  AckSearchGuild_SearchGuildObject::default_instance_->InitAsDefaultInstance();
  ReqAckJoinGuild::default_instance_->InitAsDefaultInstance();
  ReqAckLeaveGuild::default_instance_->InitAsDefaultInstance();
  ReqAckOprGuildMember::default_instance_->InitAsDefaultInstance();
  ReqAckOprGuild::default_instance_->InitAsDefaultInstance();
  ReqAckDonateGuildItem::default_instance_->InitAsDefaultInstance();
  ReqGuildEctypeInfo::default_instance_->InitAsDefaultInstance();
  GuildEctypeInfo::default_instance_->InitAsDefaultInstance();
  AckGuildEctypeInfo::default_instance_->InitAsDefaultInstance();
  SetGuildEctypeInfo::default_instance_->InitAsDefaultInstance();
  ReqEnterGuildEctype::default_instance_->InitAsDefaultInstance();
  ChatInfo::default_instance_->InitAsDefaultInstance();
  ReqAckCreateChatGroup::default_instance_->InitAsDefaultInstance();
  ReqAckjoinChatGroup::default_instance_->InitAsDefaultInstance();
  ReqAckQuitChatGroup::default_instance_->InitAsDefaultInstance();
  ReqSubscriptionChatGroup::default_instance_->InitAsDefaultInstance();
  ReqCancelSubscriptionChatGroup::default_instance_->InitAsDefaultInstance();
  ReqIntensifylevelToEquip::default_instance_->InitAsDefaultInstance();
  AckIntensifylevelToEquip::default_instance_->InitAsDefaultInstance();
  ReqHoleToEquip::default_instance_->InitAsDefaultInstance();
  AckHoleToEquip::default_instance_->InitAsDefaultInstance();
  ReqInlaystoneToEquip::default_instance_->InitAsDefaultInstance();
  AckInlaystoneToEquip::default_instance_->InitAsDefaultInstance();
  ReqElementlevelToEquip::default_instance_->InitAsDefaultInstance();
  AckElementlevelToEquip::default_instance_->InitAsDefaultInstance();
  ReqSetFightHero::default_instance_->InitAsDefaultInstance();
  ReqWearEquip::default_instance_->InitAsDefaultInstance();
  TakeOffEquip::default_instance_->InitAsDefaultInstance();
  ReqMiningTitle::default_instance_->InitAsDefaultInstance();
  ReqSendMail::default_instance_->InitAsDefaultInstance();
  ReqSwitchServer::default_instance_->InitAsDefaultInstance();
  AckSwitchServer::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  TeammemberInfo::default_instance_->InitAsDefaultInstance();
  ReqAckCreateTeam::default_instance_->InitAsDefaultInstance();
  ReqAckJoinTeam::default_instance_->InitAsDefaultInstance();
  ReqAckLeaveTeam::default_instance_->InitAsDefaultInstance();
  ReqAckOprTeamMember::default_instance_->InitAsDefaultInstance();
  ReqAckInviteTeam::default_instance_->InitAsDefaultInstance();
  ReqTeamEnterEctype::default_instance_->InitAsDefaultInstance();
  AckTeamEnterEctype::default_instance_->InitAsDefaultInstance();
  GridGuildBaseInfo::default_instance_->InitAsDefaultInstance();
  ReqBigMapGridInfo::default_instance_->InitAsDefaultInstance();
  BigMapGridBaseInfo::default_instance_->InitAsDefaultInstance();
  BigMapLeaveMsg::default_instance_->InitAsDefaultInstance();
  BigMapWarHistory::default_instance_->InitAsDefaultInstance();
  BigMapGridDetailInfo::default_instance_->InitAsDefaultInstance();
  AckBigMapGridInfo::default_instance_->InitAsDefaultInstance();
  ReqBigMapInfo::default_instance_->InitAsDefaultInstance();
  AckBigMapInfo::default_instance_->InitAsDefaultInstance();
  ReqHoldMapGrid::default_instance_->InitAsDefaultInstance();
  AckHoldMapGrid::default_instance_->InitAsDefaultInstance();
  ReqLeaveMapMsg::default_instance_->InitAsDefaultInstance();
  AckLeaveMapMsg::default_instance_->InitAsDefaultInstance();
  ReqGetMapAward::default_instance_->InitAsDefaultInstance();
  AckGetMapAward::default_instance_->InitAsDefaultInstance();
  ReqMapHunting::default_instance_->InitAsDefaultInstance();
  AckMapHunting::default_instance_->InitAsDefaultInstance();
  ReqMapKingWar::default_instance_->InitAsDefaultInstance();
  AckMapKingWar::default_instance_->InitAsDefaultInstance();
  PVPRoomInfo::default_instance_->InitAsDefaultInstance();
  ReqPVPApplyMatch::default_instance_->InitAsDefaultInstance();
  AckPVPApplyMatch::default_instance_->InitAsDefaultInstance();
  ReqCreatePVPEctype::default_instance_->InitAsDefaultInstance();
  AckCreatePVPEctype::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NFMsgShare_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NFMsgShare_2eproto {
  StaticDescriptorInitializer_NFMsgShare_2eproto() {
    protobuf_AddDesc_NFMsgShare_2eproto();
  }
} static_descriptor_initializer_NFMsgShare_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqEnterGameServer::kIdFieldNumber;
const int ReqEnterGameServer::kAccountFieldNumber;
const int ReqEnterGameServer::kGameIdFieldNumber;
const int ReqEnterGameServer::kNameFieldNumber;
#endif  // !_MSC_VER

ReqEnterGameServer::ReqEnterGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnterGameServer::InitAsDefaultInstance() {
  id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqEnterGameServer::ReqEnterGameServer(const ReqEnterGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnterGameServer::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterGameServer::~ReqEnterGameServer() {
  SharedDtor();
}

void ReqEnterGameServer::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void ReqEnterGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterGameServer_descriptor_;
}

const ReqEnterGameServer& ReqEnterGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqEnterGameServer* ReqEnterGameServer::default_instance_ = NULL;

ReqEnterGameServer* ReqEnterGameServer::New() const {
  return new ReqEnterGameServer;
}

void ReqEnterGameServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::NFMsg::Ident::Clear();
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    game_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnterGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEnterGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  // required int32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  // required bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnterGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required int32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  // required bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnterGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required int32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // required bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnterGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnterGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnterGameServer::MergeFrom(const ReqEnterGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::NFMsg::Ident::MergeFrom(from.id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnterGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGameServer::CopyFrom(const ReqEnterGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGameServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void ReqEnterGameServer::Swap(ReqEnterGameServer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(account_, other->account_);
    std::swap(game_id_, other->game_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnterGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterGameServer_descriptor_;
  metadata.reflection = ReqEnterGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqHeartBeat::ReqHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHeartBeat::InitAsDefaultInstance() {
}

ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHeartBeat::~ReqHeartBeat() {
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeartBeat_descriptor_;
}

const ReqHeartBeat& ReqHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqHeartBeat* ReqHeartBeat::default_instance_ = NULL;

ReqHeartBeat* ReqHeartBeat::New() const {
  return new ReqHeartBeat;
}

void ReqHeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHeartBeat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {

  return true;
}

void ReqHeartBeat::Swap(ReqHeartBeat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeartBeat_descriptor_;
  metadata.reflection = ReqHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqLeaveGameServer::ReqLeaveGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLeaveGameServer::InitAsDefaultInstance() {
}

ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLeaveGameServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  SharedDtor();
}

void ReqLeaveGameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLeaveGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLeaveGameServer_descriptor_;
}

const ReqLeaveGameServer& ReqLeaveGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqLeaveGameServer* ReqLeaveGameServer::default_instance_ = NULL;

ReqLeaveGameServer* ReqLeaveGameServer::New() const {
  return new ReqLeaveGameServer;
}

void ReqLeaveGameServer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLeaveGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqLeaveGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLeaveGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLeaveGameServer::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLeaveGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLeaveGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {

  return true;
}

void ReqLeaveGameServer::Swap(ReqLeaveGameServer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLeaveGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLeaveGameServer_descriptor_;
  metadata.reflection = ReqLeaveGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEntryInfo::kObjectGuidFieldNumber;
const int PlayerEntryInfo::kXFieldNumber;
const int PlayerEntryInfo::kYFieldNumber;
const int PlayerEntryInfo::kZFieldNumber;
const int PlayerEntryInfo::kCareerTypeFieldNumber;
const int PlayerEntryInfo::kPlayerStateFieldNumber;
const int PlayerEntryInfo::kConfigIdFieldNumber;
const int PlayerEntryInfo::kSceneIdFieldNumber;
const int PlayerEntryInfo::kClassIdFieldNumber;
#endif  // !_MSC_VER

PlayerEntryInfo::PlayerEntryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEntryInfo::InitAsDefaultInstance() {
  object_guid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEntryInfo::SharedCtor() {
  _cached_size_ = 0;
  object_guid_ = NULL;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  career_type_ = 0;
  player_state_ = 0;
  config_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scene_id_ = 0;
  class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEntryInfo::~PlayerEntryInfo() {
  SharedDtor();
}

void PlayerEntryInfo::SharedDtor() {
  if (config_id_ != &::google::protobuf::internal::kEmptyString) {
    delete config_id_;
  }
  if (class_id_ != &::google::protobuf::internal::kEmptyString) {
    delete class_id_;
  }
  if (this != default_instance_) {
    delete object_guid_;
  }
}

void PlayerEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEntryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEntryInfo_descriptor_;
}

const PlayerEntryInfo& PlayerEntryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

PlayerEntryInfo* PlayerEntryInfo::default_instance_ = NULL;

PlayerEntryInfo* PlayerEntryInfo::New() const {
  return new PlayerEntryInfo;
}

void PlayerEntryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_object_guid()) {
      if (object_guid_ != NULL) object_guid_->::NFMsg::Ident::Clear();
    }
    x_ = 0;
    y_ = 0;
    z_ = 0;
    career_type_ = 0;
    player_state_ = 0;
    if (has_config_id()) {
      if (config_id_ != &::google::protobuf::internal::kEmptyString) {
        config_id_->clear();
      }
    }
    scene_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_class_id()) {
      if (class_id_ != &::google::protobuf::internal::kEmptyString) {
        class_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident object_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_z;
        break;
      }

      // required float z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_career_type;
        break;
      }

      // required int32 career_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_type_)));
          set_has_career_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_state;
        break;
      }

      // required int32 player_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_state_)));
          set_has_player_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_config_id;
        break;
      }

      // required bytes config_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_class_id;
        break;
      }

      // required bytes class_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_class_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident object_guid = 1;
  if (has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_guid(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required float z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // required int32 career_type = 5;
  if (has_career_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->career_type(), output);
  }

  // required int32 player_state = 6;
  if (has_player_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_state(), output);
  }

  // required bytes config_id = 7;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->config_id(), output);
  }

  // required int32 scene_id = 8;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_id(), output);
  }

  // required bytes class_id = 9;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->class_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEntryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident object_guid = 1;
  if (has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object_guid(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required float z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // required int32 career_type = 5;
  if (has_career_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->career_type(), target);
  }

  // required int32 player_state = 6;
  if (has_player_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_state(), target);
  }

  // required bytes config_id = 7;
  if (has_config_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->config_id(), target);
  }

  // required int32 scene_id = 8;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_id(), target);
  }

  // required bytes class_id = 9;
  if (has_class_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->class_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEntryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident object_guid = 1;
    if (has_object_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_guid());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 4;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // required int32 career_type = 5;
    if (has_career_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career_type());
    }

    // required int32 player_state = 6;
    if (has_player_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_state());
    }

    // required bytes config_id = 7;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config_id());
    }

    // required int32 scene_id = 8;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes class_id = 9;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->class_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEntryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEntryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_guid()) {
      mutable_object_guid()->::NFMsg::Ident::MergeFrom(from.object_guid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_career_type()) {
      set_career_type(from.career_type());
    }
    if (from.has_player_state()) {
      set_player_state(from.player_state());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_object_guid()) {
    if (!this->object_guid().IsInitialized()) return false;
  }
  return true;
}

void PlayerEntryInfo::Swap(PlayerEntryInfo* other) {
  if (other != this) {
    std::swap(object_guid_, other->object_guid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(career_type_, other->career_type_);
    std::swap(player_state_, other->player_state_);
    std::swap(config_id_, other->config_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(class_id_, other->class_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEntryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEntryInfo_descriptor_;
  metadata.reflection = PlayerEntryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPlayerEntryList::kObjectListFieldNumber;
#endif  // !_MSC_VER

AckPlayerEntryList::AckPlayerEntryList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPlayerEntryList::InitAsDefaultInstance() {
}

AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPlayerEntryList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPlayerEntryList::~AckPlayerEntryList() {
  SharedDtor();
}

void AckPlayerEntryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPlayerEntryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerEntryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPlayerEntryList_descriptor_;
}

const AckPlayerEntryList& AckPlayerEntryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckPlayerEntryList* AckPlayerEntryList::default_instance_ = NULL;

AckPlayerEntryList* AckPlayerEntryList::New() const {
  return new AckPlayerEntryList;
}

void AckPlayerEntryList::Clear() {
  object_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPlayerEntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.PlayerEntryInfo object_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_object_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPlayerEntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (int i = 0; i < this->object_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPlayerEntryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (int i = 0; i < this->object_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPlayerEntryList::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  total_size += 1 * this->object_list_size();
  for (int i = 0; i < this->object_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPlayerEntryList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPlayerEntryList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_list_.MergeFrom(from.object_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPlayerEntryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {

  for (int i = 0; i < object_list_size(); i++) {
    if (!this->object_list(i).IsInitialized()) return false;
  }
  return true;
}

void AckPlayerEntryList::Swap(AckPlayerEntryList* other) {
  if (other != this) {
    object_list_.Swap(&other->object_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPlayerEntryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPlayerEntryList_descriptor_;
  metadata.reflection = AckPlayerEntryList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPlayerLeaveList::kObjectListFieldNumber;
#endif  // !_MSC_VER

AckPlayerLeaveList::AckPlayerLeaveList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPlayerLeaveList::InitAsDefaultInstance() {
}

AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPlayerLeaveList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  SharedDtor();
}

void AckPlayerLeaveList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPlayerLeaveList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerLeaveList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPlayerLeaveList_descriptor_;
}

const AckPlayerLeaveList& AckPlayerLeaveList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckPlayerLeaveList* AckPlayerLeaveList::default_instance_ = NULL;

AckPlayerLeaveList* AckPlayerLeaveList::New() const {
  return new AckPlayerLeaveList;
}

void AckPlayerLeaveList::Clear() {
  object_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPlayerLeaveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.Ident object_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_object_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPlayerLeaveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.Ident object_list = 1;
  for (int i = 0; i < this->object_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPlayerLeaveList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.Ident object_list = 1;
  for (int i = 0; i < this->object_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPlayerLeaveList::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.Ident object_list = 1;
  total_size += 1 * this->object_list_size();
  for (int i = 0; i < this->object_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPlayerLeaveList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPlayerLeaveList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_list_.MergeFrom(from.object_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPlayerLeaveList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {

  for (int i = 0; i < object_list_size(); i++) {
    if (!this->object_list(i).IsInitialized()) return false;
  }
  return true;
}

void AckPlayerLeaveList::Swap(AckPlayerLeaveList* other) {
  if (other != this) {
    object_list_.Swap(&other->object_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPlayerLeaveList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPlayerLeaveList_descriptor_;
  metadata.reflection = AckPlayerLeaveList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckSynData_SynType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSynData_SynType_descriptor_;
}
bool ReqAckSynData_SynType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckSynData_SynType ReqAckSynData::EST_SCENE;
const ReqAckSynData_SynType ReqAckSynData::EST_GROUP;
const ReqAckSynData_SynType ReqAckSynData::EST_GUILD;
const ReqAckSynData_SynType ReqAckSynData::EST_FRIEND;
const ReqAckSynData_SynType ReqAckSynData::SynType_MIN;
const ReqAckSynData_SynType ReqAckSynData::SynType_MAX;
const int ReqAckSynData::SynType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqAckSynData::kSyserFieldNumber;
const int ReqAckSynData::kObjectListFieldNumber;
const int ReqAckSynData::kDataFieldNumber;
const int ReqAckSynData::kSynTypeFieldNumber;
const int ReqAckSynData::kMsgIdFieldNumber;
#endif  // !_MSC_VER

ReqAckSynData::ReqAckSynData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckSynData::InitAsDefaultInstance() {
  syser_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckSynData::ReqAckSynData(const ReqAckSynData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckSynData::SharedCtor() {
  _cached_size_ = 0;
  syser_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syn_type_ = 1;
  msg_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckSynData::~ReqAckSynData() {
  SharedDtor();
}

void ReqAckSynData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete syser_;
  }
}

void ReqAckSynData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSynData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSynData_descriptor_;
}

const ReqAckSynData& ReqAckSynData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckSynData* ReqAckSynData::default_instance_ = NULL;

ReqAckSynData* ReqAckSynData::New() const {
  return new ReqAckSynData;
}

void ReqAckSynData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_syser()) {
      if (syser_ != NULL) syser_->::NFMsg::Ident::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    syn_type_ = 1;
    msg_id_ = 0;
  }
  object_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckSynData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident syser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_list;
        break;
      }

      // repeated .NFMsg.Ident object_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_list;
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_syn_type;
        break;
      }

      // required .NFMsg.ReqAckSynData.SynType syn_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_syn_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckSynData_SynType_IsValid(value)) {
            set_syn_type(static_cast< ::NFMsg::ReqAckSynData_SynType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_msg_id;
        break;
      }

      // required .NFMsg.EGameMsgID msg_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::EGameMsgID_IsValid(value)) {
            set_msg_id(static_cast< ::NFMsg::EGameMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckSynData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident syser = 1;
  if (has_syser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->syser(), output);
  }

  // repeated .NFMsg.Ident object_list = 2;
  for (int i = 0; i < this->object_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object_list(i), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // required .NFMsg.ReqAckSynData.SynType syn_type = 4;
  if (has_syn_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->syn_type(), output);
  }

  // required .NFMsg.EGameMsgID msg_id = 5;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckSynData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident syser = 1;
  if (has_syser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->syser(), target);
  }

  // repeated .NFMsg.Ident object_list = 2;
  for (int i = 0; i < this->object_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->object_list(i), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // required .NFMsg.ReqAckSynData.SynType syn_type = 4;
  if (has_syn_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->syn_type(), target);
  }

  // required .NFMsg.EGameMsgID msg_id = 5;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckSynData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident syser = 1;
    if (has_syser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syser());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required .NFMsg.ReqAckSynData.SynType syn_type = 4;
    if (has_syn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->syn_type());
    }

    // required .NFMsg.EGameMsgID msg_id = 5;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }

  }
  // repeated .NFMsg.Ident object_list = 2;
  total_size += 1 * this->object_list_size();
  for (int i = 0; i < this->object_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSynData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckSynData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckSynData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckSynData::MergeFrom(const ReqAckSynData& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_list_.MergeFrom(from.object_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_syser()) {
      mutable_syser()->::NFMsg::Ident::MergeFrom(from.syser());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_syn_type()) {
      set_syn_type(from.syn_type());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckSynData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSynData::CopyFrom(const ReqAckSynData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSynData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_syser()) {
    if (!this->syser().IsInitialized()) return false;
  }
  for (int i = 0; i < object_list_size(); i++) {
    if (!this->object_list(i).IsInitialized()) return false;
  }
  return true;
}

void ReqAckSynData::Swap(ReqAckSynData* other) {
  if (other != this) {
    std::swap(syser_, other->syser_);
    object_list_.Swap(&other->object_list_);
    std::swap(data_, other->data_);
    std::swap(syn_type_, other->syn_type_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckSynData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckSynData_descriptor_;
  metadata.reflection = ReqAckSynData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckPlayerMove::kMoverFieldNumber;
const int ReqAckPlayerMove::kMoveTypeFieldNumber;
const int ReqAckPlayerMove::kTargetPosFieldNumber;
const int ReqAckPlayerMove::kSourcePosFieldNumber;
#endif  // !_MSC_VER

ReqAckPlayerMove::ReqAckPlayerMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckPlayerMove::InitAsDefaultInstance() {
  mover_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckPlayerMove::ReqAckPlayerMove(const ReqAckPlayerMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckPlayerMove::SharedCtor() {
  _cached_size_ = 0;
  mover_ = NULL;
  movetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckPlayerMove::~ReqAckPlayerMove() {
  SharedDtor();
}

void ReqAckPlayerMove::SharedDtor() {
  if (this != default_instance_) {
    delete mover_;
  }
}

void ReqAckPlayerMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckPlayerMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckPlayerMove_descriptor_;
}

const ReqAckPlayerMove& ReqAckPlayerMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckPlayerMove* ReqAckPlayerMove::default_instance_ = NULL;

ReqAckPlayerMove* ReqAckPlayerMove::New() const {
  return new ReqAckPlayerMove;
}

void ReqAckPlayerMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mover()) {
      if (mover_ != NULL) mover_->::NFMsg::Ident::Clear();
    }
    movetype_ = 0;
  }
  target_pos_.Clear();
  source_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckPlayerMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident mover = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mover()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moveType;
        break;
      }

      // required int32 moveType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movetype_)));
          set_has_movetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_pos;
        break;
      }

      // repeated .NFMsg.Position target_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_pos;
        if (input->ExpectTag(34)) goto parse_source_pos;
        break;
      }

      // repeated .NFMsg.Position source_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_source_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckPlayerMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident mover = 1;
  if (has_mover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mover(), output);
  }

  // required int32 moveType = 2;
  if (has_movetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movetype(), output);
  }

  // repeated .NFMsg.Position target_pos = 3;
  for (int i = 0; i < this->target_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target_pos(i), output);
  }

  // repeated .NFMsg.Position source_pos = 4;
  for (int i = 0; i < this->source_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->source_pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckPlayerMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident mover = 1;
  if (has_mover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mover(), target);
  }

  // required int32 moveType = 2;
  if (has_movetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movetype(), target);
  }

  // repeated .NFMsg.Position target_pos = 3;
  for (int i = 0; i < this->target_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target_pos(i), target);
  }

  // repeated .NFMsg.Position source_pos = 4;
  for (int i = 0; i < this->source_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->source_pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckPlayerMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident mover = 1;
    if (has_mover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mover());
    }

    // required int32 moveType = 2;
    if (has_movetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movetype());
    }

  }
  // repeated .NFMsg.Position target_pos = 3;
  total_size += 1 * this->target_pos_size();
  for (int i = 0; i < this->target_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_pos(i));
  }

  // repeated .NFMsg.Position source_pos = 4;
  total_size += 1 * this->source_pos_size();
  for (int i = 0; i < this->source_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->source_pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckPlayerMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckPlayerMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckPlayerMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckPlayerMove::MergeFrom(const ReqAckPlayerMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_pos_.MergeFrom(from.target_pos_);
  source_pos_.MergeFrom(from.source_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mover()) {
      mutable_mover()->::NFMsg::Ident::MergeFrom(from.mover());
    }
    if (from.has_movetype()) {
      set_movetype(from.movetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckPlayerMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerMove::CopyFrom(const ReqAckPlayerMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mover()) {
    if (!this->mover().IsInitialized()) return false;
  }
  for (int i = 0; i < target_pos_size(); i++) {
    if (!this->target_pos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < source_pos_size(); i++) {
    if (!this->source_pos(i).IsInitialized()) return false;
  }
  return true;
}

void ReqAckPlayerMove::Swap(ReqAckPlayerMove* other) {
  if (other != this) {
    std::swap(mover_, other->mover_);
    std::swap(movetype_, other->movetype_);
    target_pos_.Swap(&other->target_pos_);
    source_pos_.Swap(&other->source_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckPlayerMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckPlayerMove_descriptor_;
  metadata.reflection = ReqAckPlayerMove_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChatContainer_ContainerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatContainer_ContainerType_descriptor_;
}
bool ChatContainer_ContainerType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChatContainer_ContainerType ChatContainer::EGCT_ITEM;
const ChatContainer_ContainerType ChatContainer::ContainerType_MIN;
const ChatContainer_ContainerType ChatContainer::ContainerType_MAX;
const int ChatContainer::ContainerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChatContainer::kConTainerTypeFieldNumber;
const int ChatContainer::kDataInfoFieldNumber;
#endif  // !_MSC_VER

ChatContainer::ChatContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatContainer::InitAsDefaultInstance() {
}

ChatContainer::ChatContainer(const ChatContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatContainer::SharedCtor() {
  _cached_size_ = 0;
  containertype_ = 0;
  data_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatContainer::~ChatContainer() {
  SharedDtor();
}

void ChatContainer::SharedDtor() {
  if (data_info_ != &::google::protobuf::internal::kEmptyString) {
    delete data_info_;
  }
  if (this != default_instance_) {
  }
}

void ChatContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatContainer_descriptor_;
}

const ChatContainer& ChatContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ChatContainer* ChatContainer::default_instance_ = NULL;

ChatContainer* ChatContainer::New() const {
  return new ChatContainer;
}

void ChatContainer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    containertype_ = 0;
    if (has_data_info()) {
      if (data_info_ != &::google::protobuf::internal::kEmptyString) {
        data_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ConTainerType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &containertype_)));
          set_has_containertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_info;
        break;
      }

      // required bytes data_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ConTainerType = 2;
  if (has_containertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->containertype(), output);
  }

  // required bytes data_info = 3;
  if (has_data_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ConTainerType = 2;
  if (has_containertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->containertype(), target);
  }

  // required bytes data_info = 3;
  if (has_data_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ConTainerType = 2;
    if (has_containertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->containertype());
    }

    // required bytes data_info = 3;
    if (has_data_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatContainer::MergeFrom(const ChatContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_containertype()) {
      set_containertype(from.containertype());
    }
    if (from.has_data_info()) {
      set_data_info(from.data_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatContainer::CopyFrom(const ChatContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChatContainer::Swap(ChatContainer* other) {
  if (other != this) {
    std::swap(containertype_, other->containertype_);
    std::swap(data_info_, other->data_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatContainer_descriptor_;
  metadata.reflection = ChatContainer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckPlayerChat_EGameChatType_descriptor_;
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_GUILD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_PRIVATE;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEAM;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_WORLD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
const int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqAckPlayerChat::kChatIdFieldNumber;
const int ReqAckPlayerChat::kChatTypeFieldNumber;
const int ReqAckPlayerChat::kChatInfoFieldNumber;
const int ReqAckPlayerChat::kChatNameFieldNumber;
const int ReqAckPlayerChat::kTargetIdFieldNumber;
const int ReqAckPlayerChat::kContainerDataFieldNumber;
#endif  // !_MSC_VER

ReqAckPlayerChat::ReqAckPlayerChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckPlayerChat::InitAsDefaultInstance() {
  chat_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  target_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckPlayerChat::SharedCtor() {
  _cached_size_ = 0;
  chat_id_ = NULL;
  chat_type_ = 0;
  chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  SharedDtor();
}

void ReqAckPlayerChat::SharedDtor() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (chat_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_name_;
  }
  if (this != default_instance_) {
    delete chat_id_;
    delete target_id_;
  }
}

void ReqAckPlayerChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckPlayerChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckPlayerChat_descriptor_;
}

const ReqAckPlayerChat& ReqAckPlayerChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckPlayerChat* ReqAckPlayerChat::default_instance_ = NULL;

ReqAckPlayerChat* ReqAckPlayerChat::New() const {
  return new ReqAckPlayerChat;
}

void ReqAckPlayerChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chat_id()) {
      if (chat_id_ != NULL) chat_id_->::NFMsg::Ident::Clear();
    }
    chat_type_ = 0;
    if (has_chat_info()) {
      if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
        chat_info_->clear();
      }
    }
    if (has_chat_name()) {
      if (chat_name_ != &::google::protobuf::internal::kEmptyString) {
        chat_name_->clear();
      }
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::NFMsg::Ident::Clear();
    }
  }
  container_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckPlayerChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident chat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_type;
        break;
      }

      // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckPlayerChat_EGameChatType_IsValid(value)) {
            set_chat_type(static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat_info;
        break;
      }

      // required bytes chat_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chat_name;
        break;
      }

      // required bytes chat_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_target_id;
        break;
      }

      // optional .NFMsg.Ident target_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Container_data;
        break;
      }

      // repeated .NFMsg.ChatContainer Container_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Container_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_container_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Container_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckPlayerChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident chat_id = 1;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chat_id(), output);
  }

  // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chat_type(), output);
  }

  // required bytes chat_info = 3;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->chat_info(), output);
  }

  // required bytes chat_name = 4;
  if (has_chat_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->chat_name(), output);
  }

  // optional .NFMsg.Ident target_id = 5;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->target_id(), output);
  }

  // repeated .NFMsg.ChatContainer Container_data = 6;
  for (int i = 0; i < this->container_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->container_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckPlayerChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident chat_id = 1;
  if (has_chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chat_id(), target);
  }

  // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (has_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chat_type(), target);
  }

  // required bytes chat_info = 3;
  if (has_chat_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->chat_info(), target);
  }

  // required bytes chat_name = 4;
  if (has_chat_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->chat_name(), target);
  }

  // optional .NFMsg.Ident target_id = 5;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->target_id(), target);
  }

  // repeated .NFMsg.ChatContainer Container_data = 6;
  for (int i = 0; i < this->container_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->container_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckPlayerChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_id());
    }

    // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
    if (has_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
    }

    // required bytes chat_info = 3;
    if (has_chat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chat_info());
    }

    // required bytes chat_name = 4;
    if (has_chat_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chat_name());
    }

    // optional .NFMsg.Ident target_id = 5;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }

  }
  // repeated .NFMsg.ChatContainer Container_data = 6;
  total_size += 1 * this->container_data_size();
  for (int i = 0; i < this->container_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->container_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckPlayerChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckPlayerChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  container_data_.MergeFrom(from.container_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_id()) {
      mutable_chat_id()->::NFMsg::Ident::MergeFrom(from.chat_id());
    }
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_chat_info()) {
      set_chat_info(from.chat_info());
    }
    if (from.has_chat_name()) {
      set_chat_name(from.chat_name());
    }
    if (from.has_target_id()) {
      mutable_target_id()->::NFMsg::Ident::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckPlayerChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_chat_id()) {
    if (!this->chat_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  for (int i = 0; i < container_data_size(); i++) {
    if (!this->container_data(i).IsInitialized()) return false;
  }
  return true;
}

void ReqAckPlayerChat::Swap(ReqAckPlayerChat* other) {
  if (other != this) {
    std::swap(chat_id_, other->chat_id_);
    std::swap(chat_type_, other->chat_type_);
    std::swap(chat_info_, other->chat_info_);
    std::swap(chat_name_, other->chat_name_);
    std::swap(target_id_, other->target_id_);
    container_data_.Swap(&other->container_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckPlayerChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckPlayerChat_descriptor_;
  metadata.reflection = ReqAckPlayerChat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectData_EResultType_descriptor_;
}
bool EffectData_EResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EffectData_EResultType EffectData::EET_SUCCESS;
const EffectData_EResultType EffectData::EET_FAIL;
const EffectData_EResultType EffectData::EET_REFUSE;
const EffectData_EResultType EffectData::EResultType_MIN;
const EffectData_EResultType EffectData::EResultType_MAX;
const int EffectData::EResultType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EffectData::kEffectIdentFieldNumber;
const int EffectData::kEffectValueFieldNumber;
const int EffectData::kEffectRltFieldNumber;
#endif  // !_MSC_VER

EffectData::EffectData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EffectData::InitAsDefaultInstance() {
  effect_ident_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

EffectData::EffectData(const EffectData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EffectData::SharedCtor() {
  _cached_size_ = 0;
  effect_ident_ = NULL;
  effect_value_ = 0;
  effect_rlt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectData::~EffectData() {
  SharedDtor();
}

void EffectData::SharedDtor() {
  if (this != default_instance_) {
    delete effect_ident_;
  }
}

void EffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectData_descriptor_;
}

const EffectData& EffectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

EffectData* EffectData::default_instance_ = NULL;

EffectData* EffectData::New() const {
  return new EffectData;
}

void EffectData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_effect_ident()) {
      if (effect_ident_ != NULL) effect_ident_->::NFMsg::Ident::Clear();
    }
    effect_value_ = 0;
    effect_rlt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident effect_ident = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect_ident()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effect_value;
        break;
      }

      // required int32 effect_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
          set_has_effect_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_effect_rlt;
        break;
      }

      // required .NFMsg.EffectData.EResultType effect_rlt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_rlt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::EffectData_EResultType_IsValid(value)) {
            set_effect_rlt(static_cast< ::NFMsg::EffectData_EResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident effect_ident = 1;
  if (has_effect_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->effect_ident(), output);
  }

  // required int32 effect_value = 2;
  if (has_effect_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effect_value(), output);
  }

  // required .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (has_effect_rlt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->effect_rlt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EffectData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident effect_ident = 1;
  if (has_effect_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->effect_ident(), target);
  }

  // required int32 effect_value = 2;
  if (has_effect_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effect_value(), target);
  }

  // required .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (has_effect_rlt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->effect_rlt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EffectData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident effect_ident = 1;
    if (has_effect_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effect_ident());
    }

    // required int32 effect_value = 2;
    if (has_effect_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_value());
    }

    // required .NFMsg.EffectData.EResultType effect_rlt = 3;
    if (has_effect_rlt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect_rlt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectData::MergeFrom(const EffectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effect_ident()) {
      mutable_effect_ident()->::NFMsg::Ident::MergeFrom(from.effect_ident());
    }
    if (from.has_effect_value()) {
      set_effect_value(from.effect_value());
    }
    if (from.has_effect_rlt()) {
      set_effect_rlt(from.effect_rlt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectData::CopyFrom(const EffectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_effect_ident()) {
    if (!this->effect_ident().IsInitialized()) return false;
  }
  return true;
}

void EffectData::Swap(EffectData* other) {
  if (other != this) {
    std::swap(effect_ident_, other->effect_ident_);
    std::swap(effect_value_, other->effect_value_);
    std::swap(effect_rlt_, other->effect_rlt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectData_descriptor_;
  metadata.reflection = EffectData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckUseSkill::kUserFieldNumber;
const int ReqAckUseSkill::kSkillIdFieldNumber;
const int ReqAckUseSkill::kNowPosFieldNumber;
const int ReqAckUseSkill::kTarPosFieldNumber;
const int ReqAckUseSkill::kUseIndexFieldNumber;
const int ReqAckUseSkill::kEffectDataFieldNumber;
#endif  // !_MSC_VER

ReqAckUseSkill::ReqAckUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckUseSkill::InitAsDefaultInstance() {
  user_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  now_pos_ = const_cast< ::NFMsg::Position*>(&::NFMsg::Position::default_instance());
  tar_pos_ = const_cast< ::NFMsg::Position*>(&::NFMsg::Position::default_instance());
}

ReqAckUseSkill::ReqAckUseSkill(const ReqAckUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckUseSkill::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  skill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  now_pos_ = NULL;
  tar_pos_ = NULL;
  use_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckUseSkill::~ReqAckUseSkill() {
  SharedDtor();
}

void ReqAckUseSkill::SharedDtor() {
  if (skill_id_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_id_;
  }
  if (this != default_instance_) {
    delete user_;
    delete now_pos_;
    delete tar_pos_;
  }
}

void ReqAckUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckUseSkill_descriptor_;
}

const ReqAckUseSkill& ReqAckUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckUseSkill* ReqAckUseSkill::default_instance_ = NULL;

ReqAckUseSkill* ReqAckUseSkill::New() const {
  return new ReqAckUseSkill;
}

void ReqAckUseSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::NFMsg::Ident::Clear();
    }
    if (has_skill_id()) {
      if (skill_id_ != &::google::protobuf::internal::kEmptyString) {
        skill_id_->clear();
      }
    }
    if (has_now_pos()) {
      if (now_pos_ != NULL) now_pos_->::NFMsg::Position::Clear();
    }
    if (has_tar_pos()) {
      if (tar_pos_ != NULL) tar_pos_->::NFMsg::Position::Clear();
    }
    use_index_ = 0;
  }
  effect_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_id;
        break;
      }

      // required bytes skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_now_pos;
        break;
      }

      // required .NFMsg.Position now_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_now_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_now_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tar_pos;
        break;
      }

      // required .NFMsg.Position tar_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tar_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tar_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_index;
        break;
      }

      // required int32 use_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_index_)));
          set_has_use_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_effect_data;
        break;
      }

      // repeated .NFMsg.EffectData effect_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_effect_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // required bytes skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->skill_id(), output);
  }

  // required .NFMsg.Position now_pos = 3;
  if (has_now_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->now_pos(), output);
  }

  // required .NFMsg.Position tar_pos = 4;
  if (has_tar_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tar_pos(), output);
  }

  // required int32 use_index = 5;
  if (has_use_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->use_index(), output);
  }

  // repeated .NFMsg.EffectData effect_data = 6;
  for (int i = 0; i < this->effect_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->effect_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // required bytes skill_id = 2;
  if (has_skill_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->skill_id(), target);
  }

  // required .NFMsg.Position now_pos = 3;
  if (has_now_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->now_pos(), target);
  }

  // required .NFMsg.Position tar_pos = 4;
  if (has_tar_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tar_pos(), target);
  }

  // required int32 use_index = 5;
  if (has_use_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->use_index(), target);
  }

  // repeated .NFMsg.EffectData effect_data = 6;
  for (int i = 0; i < this->effect_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->effect_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckUseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required bytes skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->skill_id());
    }

    // required .NFMsg.Position now_pos = 3;
    if (has_now_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->now_pos());
    }

    // required .NFMsg.Position tar_pos = 4;
    if (has_tar_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tar_pos());
    }

    // required int32 use_index = 5;
    if (has_use_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_index());
    }

  }
  // repeated .NFMsg.EffectData effect_data = 6;
  total_size += 1 * this->effect_data_size();
  for (int i = 0; i < this->effect_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckUseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckUseSkill::MergeFrom(const ReqAckUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  effect_data_.MergeFrom(from.effect_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::NFMsg::Ident::MergeFrom(from.user());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_now_pos()) {
      mutable_now_pos()->::NFMsg::Position::MergeFrom(from.now_pos());
    }
    if (from.has_tar_pos()) {
      mutable_tar_pos()->::NFMsg::Position::MergeFrom(from.tar_pos());
    }
    if (from.has_use_index()) {
      set_use_index(from.use_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseSkill::CopyFrom(const ReqAckUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_now_pos()) {
    if (!this->now_pos().IsInitialized()) return false;
  }
  if (has_tar_pos()) {
    if (!this->tar_pos().IsInitialized()) return false;
  }
  for (int i = 0; i < effect_data_size(); i++) {
    if (!this->effect_data(i).IsInitialized()) return false;
  }
  return true;
}

void ReqAckUseSkill::Swap(ReqAckUseSkill* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(now_pos_, other->now_pos_);
    std::swap(tar_pos_, other->tar_pos_);
    std::swap(use_index_, other->use_index_);
    effect_data_.Swap(&other->effect_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckUseSkill_descriptor_;
  metadata.reflection = ReqAckUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckUseItem::kUserFieldNumber;
const int ReqAckUseItem::kItemGuidFieldNumber;
const int ReqAckUseItem::kEffectDataFieldNumber;
const int ReqAckUseItem::kItemFieldNumber;
const int ReqAckUseItem::kTargetidFieldNumber;
#endif  // !_MSC_VER

ReqAckUseItem::ReqAckUseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckUseItem::InitAsDefaultInstance() {
  user_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  item_guid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  item_ = const_cast< ::NFMsg::ItemStruct*>(&::NFMsg::ItemStruct::default_instance());
  targetid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckUseItem::ReqAckUseItem(const ReqAckUseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckUseItem::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  item_guid_ = NULL;
  item_ = NULL;
  targetid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckUseItem::~ReqAckUseItem() {
  SharedDtor();
}

void ReqAckUseItem::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete item_guid_;
    delete item_;
    delete targetid_;
  }
}

void ReqAckUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckUseItem_descriptor_;
}

const ReqAckUseItem& ReqAckUseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckUseItem* ReqAckUseItem::default_instance_ = NULL;

ReqAckUseItem* ReqAckUseItem::New() const {
  return new ReqAckUseItem;
}

void ReqAckUseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::NFMsg::Ident::Clear();
    }
    if (has_item_guid()) {
      if (item_guid_ != NULL) item_guid_->::NFMsg::Ident::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::NFMsg::ItemStruct::Clear();
    }
    if (has_targetid()) {
      if (targetid_ != NULL) targetid_->::NFMsg::Ident::Clear();
    }
  }
  effect_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_guid;
        break;
      }

      // required .NFMsg.Ident item_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effect_data;
        break;
      }

      // repeated .NFMsg.EffectData effect_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effect_data;
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // required .NFMsg.ItemStruct item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_targetid;
        break;
      }

      // required .NFMsg.Ident targetid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // required .NFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_guid(), output);
  }

  // repeated .NFMsg.EffectData effect_data = 3;
  for (int i = 0; i < this->effect_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->effect_data(i), output);
  }

  // required .NFMsg.ItemStruct item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  // required .NFMsg.Ident targetid = 5;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckUseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // required .NFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_guid(), target);
  }

  // repeated .NFMsg.EffectData effect_data = 3;
  for (int i = 0; i < this->effect_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->effect_data(i), target);
  }

  // required .NFMsg.ItemStruct item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  // required .NFMsg.Ident targetid = 5;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckUseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required .NFMsg.Ident item_guid = 2;
    if (has_item_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_guid());
    }

    // required .NFMsg.ItemStruct item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // required .NFMsg.Ident targetid = 5;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetid());
    }

  }
  // repeated .NFMsg.EffectData effect_data = 3;
  total_size += 1 * this->effect_data_size();
  for (int i = 0; i < this->effect_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckUseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckUseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckUseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckUseItem::MergeFrom(const ReqAckUseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  effect_data_.MergeFrom(from.effect_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::NFMsg::Ident::MergeFrom(from.user());
    }
    if (from.has_item_guid()) {
      mutable_item_guid()->::NFMsg::Ident::MergeFrom(from.item_guid());
    }
    if (from.has_item()) {
      mutable_item()->::NFMsg::ItemStruct::MergeFrom(from.item());
    }
    if (from.has_targetid()) {
      mutable_targetid()->::NFMsg::Ident::MergeFrom(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckUseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseItem::CopyFrom(const ReqAckUseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_item_guid()) {
    if (!this->item_guid().IsInitialized()) return false;
  }
  for (int i = 0; i < effect_data_size(); i++) {
    if (!this->effect_data(i).IsInitialized()) return false;
  }
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_targetid()) {
    if (!this->targetid().IsInitialized()) return false;
  }
  return true;
}

void ReqAckUseItem::Swap(ReqAckUseItem* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(item_guid_, other->item_guid_);
    effect_data_.Swap(&other->effect_data_);
    std::swap(item_, other->item_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckUseItem_descriptor_;
  metadata.reflection = ReqAckUseItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSwapScene_EGameSwapType_descriptor_;
}
bool ReqAckSwapScene_EGameSwapType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_CLONE;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_ARENA;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_MIRROR;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MIN;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MAX;
const int ReqAckSwapScene::EGameSwapType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqAckSwapScene::kTransferTypeFieldNumber;
const int ReqAckSwapScene::kSceneIdFieldNumber;
const int ReqAckSwapScene::kLineIdFieldNumber;
const int ReqAckSwapScene::kXFieldNumber;
const int ReqAckSwapScene::kYFieldNumber;
const int ReqAckSwapScene::kZFieldNumber;
#endif  // !_MSC_VER

ReqAckSwapScene::ReqAckSwapScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckSwapScene::InitAsDefaultInstance() {
}

ReqAckSwapScene::ReqAckSwapScene(const ReqAckSwapScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckSwapScene::SharedCtor() {
  _cached_size_ = 0;
  transfer_type_ = 0;
  scene_id_ = 0;
  line_id_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckSwapScene::~ReqAckSwapScene() {
  SharedDtor();
}

void ReqAckSwapScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckSwapScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSwapScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSwapScene_descriptor_;
}

const ReqAckSwapScene& ReqAckSwapScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckSwapScene* ReqAckSwapScene::default_instance_ = NULL;

ReqAckSwapScene* ReqAckSwapScene::New() const {
  return new ReqAckSwapScene;
}

void ReqAckSwapScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transfer_type_ = 0;
    scene_id_ = 0;
    line_id_ = 0;
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckSwapScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckSwapScene_EGameSwapType_IsValid(value)) {
            set_transfer_type(static_cast< ::NFMsg::ReqAckSwapScene_EGameSwapType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_line_id;
        break;
      }

      // required int32 line_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_id_)));
          set_has_line_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }

      // optional float x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }

      // optional float y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_z;
        break;
      }

      // optional float z = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckSwapScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (has_transfer_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->transfer_type(), output);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  // required int32 line_id = 3;
  if (has_line_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line_id(), output);
  }

  // optional float x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float z = 6;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckSwapScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (has_transfer_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->transfer_type(), target);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  // required int32 line_id = 3;
  if (has_line_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line_id(), target);
  }

  // optional float x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float z = 6;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckSwapScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
    if (has_transfer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_type());
    }

    // required int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // required int32 line_id = 3;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_id());
    }

    // optional float x = 4;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 5;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 6;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSwapScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckSwapScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckSwapScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckSwapScene::MergeFrom(const ReqAckSwapScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transfer_type()) {
      set_transfer_type(from.transfer_type());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_line_id()) {
      set_line_id(from.line_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckSwapScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSwapScene::CopyFrom(const ReqAckSwapScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSwapScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqAckSwapScene::Swap(ReqAckSwapScene* other) {
  if (other != this) {
    std::swap(transfer_type_, other->transfer_type_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(line_id_, other->line_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckSwapScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckSwapScene_descriptor_;
  metadata.reflection = ReqAckSwapScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemStruct::kItemIdFieldNumber;
const int ItemStruct::kItemCountFieldNumber;
#endif  // !_MSC_VER

ItemStruct::ItemStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemStruct::InitAsDefaultInstance() {
}

ItemStruct::ItemStruct(const ItemStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemStruct::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemStruct::~ItemStruct() {
  SharedDtor();
}

void ItemStruct::SharedDtor() {
  if (item_id_ != &::google::protobuf::internal::kEmptyString) {
    delete item_id_;
  }
  if (this != default_instance_) {
  }
}

void ItemStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemStruct_descriptor_;
}

const ItemStruct& ItemStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ItemStruct* ItemStruct::default_instance_ = NULL;

ItemStruct* ItemStruct::New() const {
  return new ItemStruct;
}

void ItemStruct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item_id()) {
      if (item_id_ != &::google::protobuf::internal::kEmptyString) {
        item_id_->clear();
      }
    }
    item_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_id().data(), this->item_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // required int32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_id().data(), this->item_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->item_id(), output);
  }

  // required int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_id().data(), this->item_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->item_id(), target);
  }

  // required int32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemStruct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_id());
    }

    // required int32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemStruct::MergeFrom(const ItemStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemStruct::CopyFrom(const ItemStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemStruct::Swap(ItemStruct* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemStruct_descriptor_;
  metadata.reflection = ItemStruct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrencyStruct::kCurrencyTypeFieldNumber;
const int CurrencyStruct::kCurrencyCountFieldNumber;
#endif  // !_MSC_VER

CurrencyStruct::CurrencyStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrencyStruct::InitAsDefaultInstance() {
}

CurrencyStruct::CurrencyStruct(const CurrencyStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrencyStruct::SharedCtor() {
  _cached_size_ = 0;
  currency_type_ = 0;
  currency_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrencyStruct::~CurrencyStruct() {
  SharedDtor();
}

void CurrencyStruct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrencyStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyStruct_descriptor_;
}

const CurrencyStruct& CurrencyStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

CurrencyStruct* CurrencyStruct::default_instance_ = NULL;

CurrencyStruct* CurrencyStruct::New() const {
  return new CurrencyStruct;
}

void CurrencyStruct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currency_type_ = 0;
    currency_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrencyStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 currency_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
          set_has_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currency_count;
        break;
      }

      // required int32 currency_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_count_)));
          set_has_currency_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrencyStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 currency_type = 1;
  if (has_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currency_type(), output);
  }

  // required int32 currency_count = 2;
  if (has_currency_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrencyStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 currency_type = 1;
  if (has_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currency_type(), target);
  }

  // required int32 currency_count = 2;
  if (has_currency_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrencyStruct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 currency_type = 1;
    if (has_currency_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency_type());
    }

    // required int32 currency_count = 2;
    if (has_currency_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrencyStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrencyStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrencyStruct::MergeFrom(const CurrencyStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency_type()) {
      set_currency_type(from.currency_type());
    }
    if (from.has_currency_count()) {
      set_currency_count(from.currency_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrencyStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyStruct::CopyFrom(const CurrencyStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CurrencyStruct::Swap(CurrencyStruct* other) {
  if (other != this) {
    std::swap(currency_type_, other->currency_type_);
    std::swap(currency_count_, other->currency_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrencyStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrencyStruct_descriptor_;
  metadata.reflection = CurrencyStruct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckEndBattle::kMoneyFieldNumber;
const int ReqAckEndBattle::kExpFieldNumber;
const int ReqAckEndBattle::kDiamondFieldNumber;
const int ReqAckEndBattle::kItemListFieldNumber;
#endif  // !_MSC_VER

ReqAckEndBattle::ReqAckEndBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckEndBattle::InitAsDefaultInstance() {
}

ReqAckEndBattle::ReqAckEndBattle(const ReqAckEndBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckEndBattle::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
  exp_ = 0;
  diamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckEndBattle::~ReqAckEndBattle() {
  SharedDtor();
}

void ReqAckEndBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckEndBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckEndBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckEndBattle_descriptor_;
}

const ReqAckEndBattle& ReqAckEndBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckEndBattle* ReqAckEndBattle::default_instance_ = NULL;

ReqAckEndBattle* ReqAckEndBattle::New() const {
  return new ReqAckEndBattle;
}

void ReqAckEndBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0;
    exp_ = 0;
    diamond_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckEndBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diamond;
        break;
      }

      // required int32 diamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        break;
      }

      // repeated .NFMsg.ItemStruct item_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckEndBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // required int32 diamond = 3;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->diamond(), output);
  }

  // repeated .NFMsg.ItemStruct item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckEndBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money(), target);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // required int32 diamond = 3;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->diamond(), target);
  }

  // repeated .NFMsg.ItemStruct item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckEndBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // required int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // required int32 diamond = 3;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

  }
  // repeated .NFMsg.ItemStruct item_list = 4;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckEndBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckEndBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckEndBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckEndBattle::MergeFrom(const ReqAckEndBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckEndBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckEndBattle::CopyFrom(const ReqAckEndBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckEndBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void ReqAckEndBattle::Swap(ReqAckEndBattle* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(exp_, other->exp_);
    std::swap(diamond_, other->diamond_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckEndBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckEndBattle_descriptor_;
  metadata.reflection = ReqAckEndBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPickDropItem::kItemGuidFieldNumber;
#endif  // !_MSC_VER

ReqPickDropItem::ReqPickDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPickDropItem::InitAsDefaultInstance() {
  item_guid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqPickDropItem::ReqPickDropItem(const ReqPickDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPickDropItem::SharedCtor() {
  _cached_size_ = 0;
  item_guid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPickDropItem::~ReqPickDropItem() {
  SharedDtor();
}

void ReqPickDropItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_guid_;
  }
}

void ReqPickDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPickDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPickDropItem_descriptor_;
}

const ReqPickDropItem& ReqPickDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqPickDropItem* ReqPickDropItem::default_instance_ = NULL;

ReqPickDropItem* ReqPickDropItem::New() const {
  return new ReqPickDropItem;
}

void ReqPickDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item_guid()) {
      if (item_guid_ != NULL) item_guid_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPickDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident item_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPickDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPickDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPickDropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident item_guid = 2;
    if (has_item_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPickDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPickDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPickDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPickDropItem::MergeFrom(const ReqPickDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_guid()) {
      mutable_item_guid()->::NFMsg::Ident::MergeFrom(from.item_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPickDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPickDropItem::CopyFrom(const ReqPickDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPickDropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item_guid()) {
    if (!this->item_guid().IsInitialized()) return false;
  }
  return true;
}

void ReqPickDropItem::Swap(ReqPickDropItem* other) {
  if (other != this) {
    std::swap(item_guid_, other->item_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPickDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPickDropItem_descriptor_;
  metadata.reflection = ReqPickDropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAcceptTask::kTaskIdFieldNumber;
#endif  // !_MSC_VER

ReqAcceptTask::ReqAcceptTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAcceptTask::InitAsDefaultInstance() {
}

ReqAcceptTask::ReqAcceptTask(const ReqAcceptTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAcceptTask::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAcceptTask::~ReqAcceptTask() {
  SharedDtor();
}

void ReqAcceptTask::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void ReqAcceptTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAcceptTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAcceptTask_descriptor_;
}

const ReqAcceptTask& ReqAcceptTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAcceptTask* ReqAcceptTask::default_instance_ = NULL;

ReqAcceptTask* ReqAcceptTask::New() const {
  return new ReqAcceptTask;
}

void ReqAcceptTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAcceptTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_id = 1;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAcceptTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAcceptTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAcceptTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAcceptTask::MergeFrom(const ReqAcceptTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAcceptTask::CopyFrom(const ReqAcceptTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAcceptTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAcceptTask::Swap(ReqAcceptTask* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAcceptTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAcceptTask_descriptor_;
  metadata.reflection = ReqAcceptTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCompeleteTask::kTaskIdFieldNumber;
#endif  // !_MSC_VER

ReqCompeleteTask::ReqCompeleteTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCompeleteTask::InitAsDefaultInstance() {
}

ReqCompeleteTask::ReqCompeleteTask(const ReqCompeleteTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCompeleteTask::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCompeleteTask::~ReqCompeleteTask() {
  SharedDtor();
}

void ReqCompeleteTask::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void ReqCompeleteTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCompeleteTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCompeleteTask_descriptor_;
}

const ReqCompeleteTask& ReqCompeleteTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqCompeleteTask* ReqCompeleteTask::default_instance_ = NULL;

ReqCompeleteTask* ReqCompeleteTask::New() const {
  return new ReqCompeleteTask;
}

void ReqCompeleteTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCompeleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCompeleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCompeleteTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_id = 1;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCompeleteTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCompeleteTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCompeleteTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCompeleteTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCompeleteTask::MergeFrom(const ReqCompeleteTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCompeleteTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCompeleteTask::CopyFrom(const ReqCompeleteTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCompeleteTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqCompeleteTask::Swap(ReqCompeleteTask* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCompeleteTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCompeleteTask_descriptor_;
  metadata.reflection = ReqCompeleteTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinActivity_EGameActivityType_descriptor_;
}
bool ReqAckJoinActivity_EGameActivityType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGAT_PVP;
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGameActivityType_MIN;
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGameActivityType_MAX;
const int ReqAckJoinActivity::EGameActivityType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivitySubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinActivity_EGameActivitySubType_descriptor_;
}
bool ReqAckJoinActivity_EGameActivitySubType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGAT_NORMAL;
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGameActivitySubType_MIN;
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGameActivitySubType_MAX;
const int ReqAckJoinActivity::EGameActivitySubType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqAckJoinActivity::kActivityTypeFieldNumber;
const int ReqAckJoinActivity::kSubActivityTypeFieldNumber;
#endif  // !_MSC_VER

ReqAckJoinActivity::ReqAckJoinActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckJoinActivity::InitAsDefaultInstance() {
}

ReqAckJoinActivity::ReqAckJoinActivity(const ReqAckJoinActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckJoinActivity::SharedCtor() {
  _cached_size_ = 0;
  activity_type_ = 0;
  sub_activity_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckJoinActivity::~ReqAckJoinActivity() {
  SharedDtor();
}

void ReqAckJoinActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckJoinActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckJoinActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinActivity_descriptor_;
}

const ReqAckJoinActivity& ReqAckJoinActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckJoinActivity* ReqAckJoinActivity::default_instance_ = NULL;

ReqAckJoinActivity* ReqAckJoinActivity::New() const {
  return new ReqAckJoinActivity;
}

void ReqAckJoinActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_type_ = 0;
    sub_activity_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckJoinActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckJoinActivity_EGameActivityType_IsValid(value)) {
            set_activity_type(static_cast< ::NFMsg::ReqAckJoinActivity_EGameActivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_activity_type;
        break;
      }

      // required .NFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_activity_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckJoinActivity_EGameActivitySubType_IsValid(value)) {
            set_sub_activity_type(static_cast< ::NFMsg::ReqAckJoinActivity_EGameActivitySubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckJoinActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity_type(), output);
  }

  // required .NFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  if (has_sub_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sub_activity_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckJoinActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity_type(), target);
  }

  // required .NFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  if (has_sub_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sub_activity_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckJoinActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity_type());
    }

    // required .NFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
    if (has_sub_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_activity_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckJoinActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckJoinActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckJoinActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckJoinActivity::MergeFrom(const ReqAckJoinActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_sub_activity_type()) {
      set_sub_activity_type(from.sub_activity_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckJoinActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinActivity::CopyFrom(const ReqAckJoinActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqAckJoinActivity::Swap(ReqAckJoinActivity* other) {
  if (other != this) {
    std::swap(activity_type_, other->activity_type_);
    std::swap(sub_activity_type_, other->sub_activity_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckJoinActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckJoinActivity_descriptor_;
  metadata.reflection = ReqAckJoinActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckSearchOppnent::kSearchTypeFieldNumber;
#endif  // !_MSC_VER

ReqAckSearchOppnent::ReqAckSearchOppnent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckSearchOppnent::InitAsDefaultInstance() {
}

ReqAckSearchOppnent::ReqAckSearchOppnent(const ReqAckSearchOppnent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckSearchOppnent::SharedCtor() {
  _cached_size_ = 0;
  search_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckSearchOppnent::~ReqAckSearchOppnent() {
  SharedDtor();
}

void ReqAckSearchOppnent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckSearchOppnent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSearchOppnent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSearchOppnent_descriptor_;
}

const ReqAckSearchOppnent& ReqAckSearchOppnent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckSearchOppnent* ReqAckSearchOppnent::default_instance_ = NULL;

ReqAckSearchOppnent* ReqAckSearchOppnent::New() const {
  return new ReqAckSearchOppnent;
}

void ReqAckSearchOppnent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    search_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckSearchOppnent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.EBattleType search_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::EBattleType_IsValid(value)) {
            set_search_type(static_cast< ::NFMsg::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckSearchOppnent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.EBattleType search_type = 1;
  if (has_search_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->search_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckSearchOppnent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.EBattleType search_type = 1;
  if (has_search_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->search_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckSearchOppnent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.EBattleType search_type = 1;
    if (has_search_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->search_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSearchOppnent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckSearchOppnent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckSearchOppnent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckSearchOppnent::MergeFrom(const ReqAckSearchOppnent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_type()) {
      set_search_type(from.search_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckSearchOppnent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSearchOppnent::CopyFrom(const ReqAckSearchOppnent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSearchOppnent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAckSearchOppnent::Swap(ReqAckSearchOppnent* other) {
  if (other != this) {
    std::swap(search_type_, other->search_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckSearchOppnent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckSearchOppnent_descriptor_;
  metadata.reflection = ReqAckSearchOppnent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckBattleOppnent::kBattleTypeFieldNumber;
#endif  // !_MSC_VER

ReqAckBattleOppnent::ReqAckBattleOppnent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckBattleOppnent::InitAsDefaultInstance() {
}

ReqAckBattleOppnent::ReqAckBattleOppnent(const ReqAckBattleOppnent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckBattleOppnent::SharedCtor() {
  _cached_size_ = 0;
  battle_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckBattleOppnent::~ReqAckBattleOppnent() {
  SharedDtor();
}

void ReqAckBattleOppnent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckBattleOppnent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckBattleOppnent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckBattleOppnent_descriptor_;
}

const ReqAckBattleOppnent& ReqAckBattleOppnent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckBattleOppnent* ReqAckBattleOppnent::default_instance_ = NULL;

ReqAckBattleOppnent* ReqAckBattleOppnent::New() const {
  return new ReqAckBattleOppnent;
}

void ReqAckBattleOppnent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckBattleOppnent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.EBattleType battle_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::EBattleType_IsValid(value)) {
            set_battle_type(static_cast< ::NFMsg::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckBattleOppnent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.EBattleType battle_type = 1;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->battle_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckBattleOppnent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.EBattleType battle_type = 1;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->battle_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckBattleOppnent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.EBattleType battle_type = 1;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battle_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckBattleOppnent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckBattleOppnent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckBattleOppnent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckBattleOppnent::MergeFrom(const ReqAckBattleOppnent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckBattleOppnent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckBattleOppnent::CopyFrom(const ReqAckBattleOppnent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckBattleOppnent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAckBattleOppnent::Swap(ReqAckBattleOppnent* other) {
  if (other != this) {
    std::swap(battle_type_, other->battle_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckBattleOppnent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckBattleOppnent_descriptor_;
  metadata.reflection = ReqAckBattleOppnent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckCreateGuild::kGuildIdFieldNumber;
const int ReqAckCreateGuild::kGuildNameFieldNumber;
#endif  // !_MSC_VER

ReqAckCreateGuild::ReqAckCreateGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckCreateGuild::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckCreateGuild::ReqAckCreateGuild(const ReqAckCreateGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckCreateGuild::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckCreateGuild::~ReqAckCreateGuild() {
  SharedDtor();
}

void ReqAckCreateGuild::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void ReqAckCreateGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckCreateGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckCreateGuild_descriptor_;
}

const ReqAckCreateGuild& ReqAckCreateGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckCreateGuild* ReqAckCreateGuild::default_instance_ = NULL;

ReqAckCreateGuild* ReqAckCreateGuild::New() const {
  return new ReqAckCreateGuild;
}

void ReqAckCreateGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckCreateGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckCreateGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_id(), output);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guild_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckCreateGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_id(), target);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckCreateGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

    // required string guild_name = 2;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckCreateGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckCreateGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckCreateGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckCreateGuild::MergeFrom(const ReqAckCreateGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckCreateGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateGuild::CopyFrom(const ReqAckCreateGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  return true;
}

void ReqAckCreateGuild::Swap(ReqAckCreateGuild* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckCreateGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckCreateGuild_descriptor_;
  metadata.reflection = ReqAckCreateGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSearchGuild::kGuildNameFieldNumber;
#endif  // !_MSC_VER

ReqSearchGuild::ReqSearchGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSearchGuild::InitAsDefaultInstance() {
}

ReqSearchGuild::ReqSearchGuild(const ReqSearchGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSearchGuild::SharedCtor() {
  _cached_size_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSearchGuild::~ReqSearchGuild() {
  SharedDtor();
}

void ReqSearchGuild::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void ReqSearchGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSearchGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSearchGuild_descriptor_;
}

const ReqSearchGuild& ReqSearchGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqSearchGuild* ReqSearchGuild::default_instance_ = NULL;

ReqSearchGuild* ReqSearchGuild::New() const {
  return new ReqSearchGuild;
}

void ReqSearchGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSearchGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string guild_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSearchGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string guild_name = 1;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guild_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSearchGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string guild_name = 1;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guild_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSearchGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string guild_name = 1;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSearchGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSearchGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSearchGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSearchGuild::MergeFrom(const ReqSearchGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSearchGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSearchGuild::CopyFrom(const ReqSearchGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSearchGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqSearchGuild::Swap(ReqSearchGuild* other) {
  if (other != this) {
    std::swap(guild_name_, other->guild_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSearchGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSearchGuild_descriptor_;
  metadata.reflection = ReqSearchGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSearchGuild_SearchGuildObject::kGuildIDFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildNameFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildIconFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildMemberCountFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildMemberMaxCountFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildHonorFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildRankFieldNumber;
#endif  // !_MSC_VER

AckSearchGuild_SearchGuildObject::AckSearchGuild_SearchGuildObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSearchGuild_SearchGuildObject::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

AckSearchGuild_SearchGuildObject::AckSearchGuild_SearchGuildObject(const AckSearchGuild_SearchGuildObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSearchGuild_SearchGuildObject::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_member_count_ = 0;
  guild_member_max_count_ = 0;
  guild_honor_ = 0;
  guild_rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSearchGuild_SearchGuildObject::~AckSearchGuild_SearchGuildObject() {
  SharedDtor();
}

void AckSearchGuild_SearchGuildObject::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_icon_;
  }
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void AckSearchGuild_SearchGuildObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSearchGuild_SearchGuildObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSearchGuild_SearchGuildObject_descriptor_;
}

const AckSearchGuild_SearchGuildObject& AckSearchGuild_SearchGuildObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckSearchGuild_SearchGuildObject* AckSearchGuild_SearchGuildObject::default_instance_ = NULL;

AckSearchGuild_SearchGuildObject* AckSearchGuild_SearchGuildObject::New() const {
  return new AckSearchGuild_SearchGuildObject;
}

void AckSearchGuild_SearchGuildObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    if (has_guild_icon()) {
      if (guild_icon_ != &::google::protobuf::internal::kEmptyString) {
        guild_icon_->clear();
      }
    }
    guild_member_count_ = 0;
    guild_member_max_count_ = 0;
    guild_honor_ = 0;
    guild_rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSearchGuild_SearchGuildObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guild_icon;
        break;
      }

      // required string guild_icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_icon().data(), this->guild_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guild_member_count;
        break;
      }

      // required int32 guild_member_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_member_count_)));
          set_has_guild_member_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guild_member_max_count;
        break;
      }

      // required int32 guild_member_max_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_member_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_member_max_count_)));
          set_has_guild_member_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_guild_honor;
        break;
      }

      // required int32 guild_honor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_honor_)));
          set_has_guild_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guild_rank;
        break;
      }

      // required int32 guild_rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_rank_)));
          set_has_guild_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSearchGuild_SearchGuildObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident guild_ID = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_id(), output);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guild_name(), output);
  }

  // required string guild_icon = 3;
  if (has_guild_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_icon().data(), this->guild_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guild_icon(), output);
  }

  // required int32 guild_member_count = 4;
  if (has_guild_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guild_member_count(), output);
  }

  // required int32 guild_member_max_count = 5;
  if (has_guild_member_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guild_member_max_count(), output);
  }

  // required int32 guild_honor = 6;
  if (has_guild_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->guild_honor(), output);
  }

  // required int32 guild_rank = 7;
  if (has_guild_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guild_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSearchGuild_SearchGuildObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident guild_ID = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_id(), target);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  // required string guild_icon = 3;
  if (has_guild_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_icon().data(), this->guild_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_icon(), target);
  }

  // required int32 guild_member_count = 4;
  if (has_guild_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guild_member_count(), target);
  }

  // required int32 guild_member_max_count = 5;
  if (has_guild_member_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guild_member_max_count(), target);
  }

  // required int32 guild_honor = 6;
  if (has_guild_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->guild_honor(), target);
  }

  // required int32 guild_rank = 7;
  if (has_guild_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guild_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSearchGuild_SearchGuildObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident guild_ID = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

    // required string guild_name = 2;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // required string guild_icon = 3;
    if (has_guild_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_icon());
    }

    // required int32 guild_member_count = 4;
    if (has_guild_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_member_count());
    }

    // required int32 guild_member_max_count = 5;
    if (has_guild_member_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_member_max_count());
    }

    // required int32 guild_honor = 6;
    if (has_guild_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_honor());
    }

    // required int32 guild_rank = 7;
    if (has_guild_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSearchGuild_SearchGuildObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSearchGuild_SearchGuildObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSearchGuild_SearchGuildObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSearchGuild_SearchGuildObject::MergeFrom(const AckSearchGuild_SearchGuildObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_guild_icon()) {
      set_guild_icon(from.guild_icon());
    }
    if (from.has_guild_member_count()) {
      set_guild_member_count(from.guild_member_count());
    }
    if (from.has_guild_member_max_count()) {
      set_guild_member_max_count(from.guild_member_max_count());
    }
    if (from.has_guild_honor()) {
      set_guild_honor(from.guild_honor());
    }
    if (from.has_guild_rank()) {
      set_guild_rank(from.guild_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSearchGuild_SearchGuildObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchGuild_SearchGuildObject::CopyFrom(const AckSearchGuild_SearchGuildObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchGuild_SearchGuildObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  return true;
}

void AckSearchGuild_SearchGuildObject::Swap(AckSearchGuild_SearchGuildObject* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(guild_icon_, other->guild_icon_);
    std::swap(guild_member_count_, other->guild_member_count_);
    std::swap(guild_member_max_count_, other->guild_member_max_count_);
    std::swap(guild_honor_, other->guild_honor_);
    std::swap(guild_rank_, other->guild_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSearchGuild_SearchGuildObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSearchGuild_SearchGuildObject_descriptor_;
  metadata.reflection = AckSearchGuild_SearchGuildObject_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AckSearchGuild::kGuildListFieldNumber;
#endif  // !_MSC_VER

AckSearchGuild::AckSearchGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSearchGuild::InitAsDefaultInstance() {
}

AckSearchGuild::AckSearchGuild(const AckSearchGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSearchGuild::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSearchGuild::~AckSearchGuild() {
  SharedDtor();
}

void AckSearchGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSearchGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSearchGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSearchGuild_descriptor_;
}

const AckSearchGuild& AckSearchGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckSearchGuild* AckSearchGuild::default_instance_ = NULL;

AckSearchGuild* AckSearchGuild::New() const {
  return new AckSearchGuild;
}

void AckSearchGuild::Clear() {
  guild_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSearchGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guild_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guild_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSearchGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  for (int i = 0; i < this->guild_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSearchGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  for (int i = 0; i < this->guild_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSearchGuild::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  total_size += 1 * this->guild_list_size();
  for (int i = 0; i < this->guild_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSearchGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSearchGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSearchGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSearchGuild::MergeFrom(const AckSearchGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  guild_list_.MergeFrom(from.guild_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSearchGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchGuild::CopyFrom(const AckSearchGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchGuild::IsInitialized() const {

  for (int i = 0; i < guild_list_size(); i++) {
    if (!this->guild_list(i).IsInitialized()) return false;
  }
  return true;
}

void AckSearchGuild::Swap(AckSearchGuild* other) {
  if (other != this) {
    guild_list_.Swap(&other->guild_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSearchGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSearchGuild_descriptor_;
  metadata.reflection = AckSearchGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckJoinGuild::kGuildIdFieldNumber;
const int ReqAckJoinGuild::kGuildNameFieldNumber;
#endif  // !_MSC_VER

ReqAckJoinGuild::ReqAckJoinGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckJoinGuild::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckJoinGuild::ReqAckJoinGuild(const ReqAckJoinGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckJoinGuild::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckJoinGuild::~ReqAckJoinGuild() {
  SharedDtor();
}

void ReqAckJoinGuild::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void ReqAckJoinGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckJoinGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinGuild_descriptor_;
}

const ReqAckJoinGuild& ReqAckJoinGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckJoinGuild* ReqAckJoinGuild::default_instance_ = NULL;

ReqAckJoinGuild* ReqAckJoinGuild::New() const {
  return new ReqAckJoinGuild;
}

void ReqAckJoinGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckJoinGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckJoinGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_id(), output);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guild_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckJoinGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_id(), target);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckJoinGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

    // required string guild_name = 2;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckJoinGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckJoinGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckJoinGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckJoinGuild::MergeFrom(const ReqAckJoinGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckJoinGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinGuild::CopyFrom(const ReqAckJoinGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  return true;
}

void ReqAckJoinGuild::Swap(ReqAckJoinGuild* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckJoinGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckJoinGuild_descriptor_;
  metadata.reflection = ReqAckJoinGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckLeaveGuild::kGuildIdFieldNumber;
const int ReqAckLeaveGuild::kGuildNameFieldNumber;
#endif  // !_MSC_VER

ReqAckLeaveGuild::ReqAckLeaveGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckLeaveGuild::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckLeaveGuild::ReqAckLeaveGuild(const ReqAckLeaveGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckLeaveGuild::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckLeaveGuild::~ReqAckLeaveGuild() {
  SharedDtor();
}

void ReqAckLeaveGuild::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void ReqAckLeaveGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckLeaveGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckLeaveGuild_descriptor_;
}

const ReqAckLeaveGuild& ReqAckLeaveGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckLeaveGuild* ReqAckLeaveGuild::default_instance_ = NULL;

ReqAckLeaveGuild* ReqAckLeaveGuild::New() const {
  return new ReqAckLeaveGuild;
}

void ReqAckLeaveGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckLeaveGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckLeaveGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_id(), output);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guild_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckLeaveGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_id(), target);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckLeaveGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

    // required string guild_name = 2;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckLeaveGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckLeaveGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckLeaveGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckLeaveGuild::MergeFrom(const ReqAckLeaveGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckLeaveGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveGuild::CopyFrom(const ReqAckLeaveGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  return true;
}

void ReqAckLeaveGuild::Swap(ReqAckLeaveGuild* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckLeaveGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckLeaveGuild_descriptor_;
  metadata.reflection = ReqAckLeaveGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckOprGuildMember_EGGuildMemberOprType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprGuildMember_EGGuildMemberOprType_descriptor_;
}
bool ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_DOWN;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_UP;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_KICK;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_APPOINT;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_FIRE;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_DEMISE;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_ACCEPTAPPLY;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_DENYAPPLY;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_KICKOUT;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGGuildMemberOprType_MIN;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGGuildMemberOprType_MAX;
const int ReqAckOprGuildMember::EGGuildMemberOprType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqAckOprGuildMember::kGuildIdFieldNumber;
const int ReqAckOprGuildMember::kMemberIdFieldNumber;
const int ReqAckOprGuildMember::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqAckOprGuildMember::ReqAckOprGuildMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckOprGuildMember::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  member_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckOprGuildMember::ReqAckOprGuildMember(const ReqAckOprGuildMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckOprGuildMember::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  member_id_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckOprGuildMember::~ReqAckOprGuildMember() {
  SharedDtor();
}

void ReqAckOprGuildMember::SharedDtor() {
  if (this != default_instance_) {
    delete guild_id_;
    delete member_id_;
  }
}

void ReqAckOprGuildMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckOprGuildMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprGuildMember_descriptor_;
}

const ReqAckOprGuildMember& ReqAckOprGuildMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckOprGuildMember* ReqAckOprGuildMember::default_instance_ = NULL;

ReqAckOprGuildMember* ReqAckOprGuildMember::New() const {
  return new ReqAckOprGuildMember;
}

void ReqAckOprGuildMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::NFMsg::Ident::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckOprGuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_id;
        break;
      }

      // required .NFMsg.Ident member_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .NFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(value)) {
            set_type(static_cast< ::NFMsg::ReqAckOprGuildMember_EGGuildMemberOprType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckOprGuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_id(), output);
  }

  // required .NFMsg.Ident member_id = 2;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_id(), output);
  }

  // required .NFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckOprGuildMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_id(), target);
  }

  // required .NFMsg.Ident member_id = 2;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_id(), target);
  }

  // required .NFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckOprGuildMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

    // required .NFMsg.Ident member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

    // required .NFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckOprGuildMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckOprGuildMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckOprGuildMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckOprGuildMember::MergeFrom(const ReqAckOprGuildMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_member_id()) {
      mutable_member_id()->::NFMsg::Ident::MergeFrom(from.member_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckOprGuildMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprGuildMember::CopyFrom(const ReqAckOprGuildMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprGuildMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void ReqAckOprGuildMember::Swap(ReqAckOprGuildMember* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckOprGuildMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckOprGuildMember_descriptor_;
  metadata.reflection = ReqAckOprGuildMember_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckOprGuild_EGGuildOprType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprGuild_EGGuildOprType_descriptor_;
}
bool ReqAckOprGuild_EGGuildOprType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_APPLYDISMISS;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_STOPDISMISS;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_SETRECRUIT;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_PUBLISHRECRUIT;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_EDITAD;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_LEVELUP;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGGuildOprType_MIN;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGGuildOprType_MAX;
const int ReqAckOprGuild::EGGuildOprType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqAckOprGuild::kGuildIdFieldNumber;
const int ReqAckOprGuild::kPlayerIdFieldNumber;
const int ReqAckOprGuild::kTypeFieldNumber;
const int ReqAckOprGuild::kRecruitDataFieldNumber;
const int ReqAckOprGuild::kAdDataFieldNumber;
#endif  // !_MSC_VER

ReqAckOprGuild::ReqAckOprGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckOprGuild::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckOprGuild::ReqAckOprGuild(const ReqAckOprGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckOprGuild::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  player_id_ = NULL;
  type_ = 1;
  recruit_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ad_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckOprGuild::~ReqAckOprGuild() {
  SharedDtor();
}

void ReqAckOprGuild::SharedDtor() {
  if (recruit_data_ != &::google::protobuf::internal::kEmptyString) {
    delete recruit_data_;
  }
  if (ad_data_ != &::google::protobuf::internal::kEmptyString) {
    delete ad_data_;
  }
  if (this != default_instance_) {
    delete guild_id_;
    delete player_id_;
  }
}

void ReqAckOprGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckOprGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprGuild_descriptor_;
}

const ReqAckOprGuild& ReqAckOprGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckOprGuild* ReqAckOprGuild::default_instance_ = NULL;

ReqAckOprGuild* ReqAckOprGuild::New() const {
  return new ReqAckOprGuild;
}

void ReqAckOprGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    type_ = 1;
    if (has_recruit_data()) {
      if (recruit_data_ != &::google::protobuf::internal::kEmptyString) {
        recruit_data_->clear();
      }
    }
    if (has_ad_data()) {
      if (ad_data_ != &::google::protobuf::internal::kEmptyString) {
        ad_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckOprGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_id;
        break;
      }

      // required .NFMsg.Ident player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .NFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckOprGuild_EGGuildOprType_IsValid(value)) {
            set_type(static_cast< ::NFMsg::ReqAckOprGuild_EGGuildOprType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Recruit_data;
        break;
      }

      // required string Recruit_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Recruit_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recruit_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recruit_data().data(), this->recruit_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Ad_data;
        break;
      }

      // required string Ad_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ad_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ad_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ad_data().data(), this->ad_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckOprGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_id(), output);
  }

  // required .NFMsg.Ident player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_id(), output);
  }

  // required .NFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required string Recruit_data = 4;
  if (has_recruit_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recruit_data().data(), this->recruit_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->recruit_data(), output);
  }

  // required string Ad_data = 5;
  if (has_ad_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad_data().data(), this->ad_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ad_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckOprGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_id(), target);
  }

  // required .NFMsg.Ident player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_id(), target);
  }

  // required .NFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required string Recruit_data = 4;
  if (has_recruit_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recruit_data().data(), this->recruit_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->recruit_data(), target);
  }

  // required string Ad_data = 5;
  if (has_ad_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad_data().data(), this->ad_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ad_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckOprGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

    // required .NFMsg.Ident player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required .NFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string Recruit_data = 4;
    if (has_recruit_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recruit_data());
    }

    // required string Ad_data = 5;
    if (has_ad_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ad_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckOprGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckOprGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckOprGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckOprGuild::MergeFrom(const ReqAckOprGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_recruit_data()) {
      set_recruit_data(from.recruit_data());
    }
    if (from.has_ad_data()) {
      set_ad_data(from.ad_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckOprGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprGuild::CopyFrom(const ReqAckOprGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  return true;
}

void ReqAckOprGuild::Swap(ReqAckOprGuild* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(type_, other->type_);
    std::swap(recruit_data_, other->recruit_data_);
    std::swap(ad_data_, other->ad_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckOprGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckOprGuild_descriptor_;
  metadata.reflection = ReqAckOprGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckDonateGuildItem::kGuildIdFieldNumber;
const int ReqAckDonateGuildItem::kTargetIdFieldNumber;
const int ReqAckDonateGuildItem::kItemListFieldNumber;
#endif  // !_MSC_VER

ReqAckDonateGuildItem::ReqAckDonateGuildItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckDonateGuildItem::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  target_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckDonateGuildItem::ReqAckDonateGuildItem(const ReqAckDonateGuildItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckDonateGuildItem::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckDonateGuildItem::~ReqAckDonateGuildItem() {
  SharedDtor();
}

void ReqAckDonateGuildItem::SharedDtor() {
  if (this != default_instance_) {
    delete guild_id_;
    delete target_id_;
  }
}

void ReqAckDonateGuildItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckDonateGuildItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckDonateGuildItem_descriptor_;
}

const ReqAckDonateGuildItem& ReqAckDonateGuildItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckDonateGuildItem* ReqAckDonateGuildItem::default_instance_ = NULL;

ReqAckDonateGuildItem* ReqAckDonateGuildItem::New() const {
  return new ReqAckDonateGuildItem;
}

void ReqAckDonateGuildItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::NFMsg::Ident::Clear();
    }
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckDonateGuildItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }

      // required .NFMsg.Ident target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .NFMsg.ItemStruct item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckDonateGuildItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_id(), output);
  }

  // required .NFMsg.Ident target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }

  // repeated .NFMsg.ItemStruct item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckDonateGuildItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_id(), target);
  }

  // required .NFMsg.Ident target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }

  // repeated .NFMsg.ItemStruct item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckDonateGuildItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

    // required .NFMsg.Ident target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }

  }
  // repeated .NFMsg.ItemStruct item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckDonateGuildItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckDonateGuildItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckDonateGuildItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckDonateGuildItem::MergeFrom(const ReqAckDonateGuildItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_target_id()) {
      mutable_target_id()->::NFMsg::Ident::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckDonateGuildItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckDonateGuildItem::CopyFrom(const ReqAckDonateGuildItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckDonateGuildItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void ReqAckDonateGuildItem::Swap(ReqAckDonateGuildItem* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(target_id_, other->target_id_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckDonateGuildItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckDonateGuildItem_descriptor_;
  metadata.reflection = ReqAckDonateGuildItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGuildEctypeInfo::kSelfidFieldNumber;
const int ReqGuildEctypeInfo::kGuildIdFieldNumber;
#endif  // !_MSC_VER

ReqGuildEctypeInfo::ReqGuildEctypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGuildEctypeInfo::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqGuildEctypeInfo::ReqGuildEctypeInfo(const ReqGuildEctypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGuildEctypeInfo::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  guild_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGuildEctypeInfo::~ReqGuildEctypeInfo() {
  SharedDtor();
}

void ReqGuildEctypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete guild_id_;
  }
}

void ReqGuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGuildEctypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGuildEctypeInfo_descriptor_;
}

const ReqGuildEctypeInfo& ReqGuildEctypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqGuildEctypeInfo* ReqGuildEctypeInfo::default_instance_ = NULL;

ReqGuildEctypeInfo* ReqGuildEctypeInfo::New() const {
  return new ReqGuildEctypeInfo;
}

void ReqGuildEctypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_id;
        break;
      }

      // required .NFMsg.Ident guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGuildEctypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGuildEctypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGuildEctypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGuildEctypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGuildEctypeInfo::MergeFrom(const ReqGuildEctypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGuildEctypeInfo::CopyFrom(const ReqGuildEctypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGuildEctypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  return true;
}

void ReqGuildEctypeInfo::Swap(ReqGuildEctypeInfo* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGuildEctypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGuildEctypeInfo_descriptor_;
  metadata.reflection = ReqGuildEctypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildEctypeInfo::kGuildIdFieldNumber;
const int GuildEctypeInfo::kServerIdFieldNumber;
const int GuildEctypeInfo::kEctypeIdFieldNumber;
const int GuildEctypeInfo::kEctypeGroupFieldNumber;
#endif  // !_MSC_VER

GuildEctypeInfo::GuildEctypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildEctypeInfo::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

GuildEctypeInfo::GuildEctypeInfo(const GuildEctypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildEctypeInfo::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  server_id_ = GOOGLE_LONGLONG(0);
  ectype_id_ = GOOGLE_LONGLONG(0);
  ectype_group_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildEctypeInfo::~GuildEctypeInfo() {
  SharedDtor();
}

void GuildEctypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void GuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildEctypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildEctypeInfo_descriptor_;
}

const GuildEctypeInfo& GuildEctypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

GuildEctypeInfo* GuildEctypeInfo::default_instance_ = NULL;

GuildEctypeInfo* GuildEctypeInfo::New() const {
  return new GuildEctypeInfo;
}

void GuildEctypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
    server_id_ = GOOGLE_LONGLONG(0);
    ectype_id_ = GOOGLE_LONGLONG(0);
    ectype_group_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // required int64 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Ectype_id;
        break;
      }

      // required int64 Ectype_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ectype_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ectype_id_)));
          set_has_ectype_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Ectype_Group;
        break;
      }

      // required int64 Ectype_Group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ectype_Group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ectype_group_)));
          set_has_ectype_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_id(), output);
  }

  // required int64 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->server_id(), output);
  }

  // required int64 Ectype_id = 3;
  if (has_ectype_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ectype_id(), output);
  }

  // required int64 Ectype_Group = 4;
  if (has_ectype_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ectype_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildEctypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_id(), target);
  }

  // required int64 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->server_id(), target);
  }

  // required int64 Ectype_id = 3;
  if (has_ectype_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ectype_id(), target);
  }

  // required int64 Ectype_Group = 4;
  if (has_ectype_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ectype_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildEctypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

    // required int64 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->server_id());
    }

    // required int64 Ectype_id = 3;
    if (has_ectype_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ectype_id());
    }

    // required int64 Ectype_Group = 4;
    if (has_ectype_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ectype_group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildEctypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildEctypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildEctypeInfo::MergeFrom(const GuildEctypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_ectype_id()) {
      set_ectype_id(from.ectype_id());
    }
    if (from.has_ectype_group()) {
      set_ectype_group(from.ectype_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildEctypeInfo::CopyFrom(const GuildEctypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildEctypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  return true;
}

void GuildEctypeInfo::Swap(GuildEctypeInfo* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(ectype_id_, other->ectype_id_);
    std::swap(ectype_group_, other->ectype_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildEctypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildEctypeInfo_descriptor_;
  metadata.reflection = GuildEctypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGuildEctypeInfo::kSelfidFieldNumber;
const int AckGuildEctypeInfo::kXectypeinfoFieldNumber;
#endif  // !_MSC_VER

AckGuildEctypeInfo::AckGuildEctypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGuildEctypeInfo::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xectypeinfo_ = const_cast< ::NFMsg::GuildEctypeInfo*>(&::NFMsg::GuildEctypeInfo::default_instance());
}

AckGuildEctypeInfo::AckGuildEctypeInfo(const AckGuildEctypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGuildEctypeInfo::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  xectypeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGuildEctypeInfo::~AckGuildEctypeInfo() {
  SharedDtor();
}

void AckGuildEctypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete xectypeinfo_;
  }
}

void AckGuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGuildEctypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGuildEctypeInfo_descriptor_;
}

const AckGuildEctypeInfo& AckGuildEctypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckGuildEctypeInfo* AckGuildEctypeInfo::default_instance_ = NULL;

AckGuildEctypeInfo* AckGuildEctypeInfo::New() const {
  return new AckGuildEctypeInfo;
}

void AckGuildEctypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_xectypeinfo()) {
      if (xectypeinfo_ != NULL) xectypeinfo_->::NFMsg::GuildEctypeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xectypeinfo;
        break;
      }

      // required .NFMsg.GuildEctypeInfo xectypeinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xectypeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xectypeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (has_xectypeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xectypeinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGuildEctypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (has_xectypeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xectypeinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGuildEctypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.GuildEctypeInfo xectypeinfo = 2;
    if (has_xectypeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xectypeinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGuildEctypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGuildEctypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGuildEctypeInfo::MergeFrom(const AckGuildEctypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_xectypeinfo()) {
      mutable_xectypeinfo()->::NFMsg::GuildEctypeInfo::MergeFrom(from.xectypeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGuildEctypeInfo::CopyFrom(const AckGuildEctypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGuildEctypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_xectypeinfo()) {
    if (!this->xectypeinfo().IsInitialized()) return false;
  }
  return true;
}

void AckGuildEctypeInfo::Swap(AckGuildEctypeInfo* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(xectypeinfo_, other->xectypeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGuildEctypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGuildEctypeInfo_descriptor_;
  metadata.reflection = AckGuildEctypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildEctypeInfo::kSelfidFieldNumber;
const int SetGuildEctypeInfo::kXectypeinfoFieldNumber;
#endif  // !_MSC_VER

SetGuildEctypeInfo::SetGuildEctypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGuildEctypeInfo::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xectypeinfo_ = const_cast< ::NFMsg::GuildEctypeInfo*>(&::NFMsg::GuildEctypeInfo::default_instance());
}

SetGuildEctypeInfo::SetGuildEctypeInfo(const SetGuildEctypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGuildEctypeInfo::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  xectypeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildEctypeInfo::~SetGuildEctypeInfo() {
  SharedDtor();
}

void SetGuildEctypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete xectypeinfo_;
  }
}

void SetGuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildEctypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildEctypeInfo_descriptor_;
}

const SetGuildEctypeInfo& SetGuildEctypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

SetGuildEctypeInfo* SetGuildEctypeInfo::default_instance_ = NULL;

SetGuildEctypeInfo* SetGuildEctypeInfo::New() const {
  return new SetGuildEctypeInfo;
}

void SetGuildEctypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_xectypeinfo()) {
      if (xectypeinfo_ != NULL) xectypeinfo_->::NFMsg::GuildEctypeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xectypeinfo;
        break;
      }

      // required .NFMsg.GuildEctypeInfo xectypeinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xectypeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xectypeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (has_xectypeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xectypeinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGuildEctypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (has_xectypeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xectypeinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGuildEctypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.GuildEctypeInfo xectypeinfo = 2;
    if (has_xectypeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xectypeinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildEctypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildEctypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuildEctypeInfo::MergeFrom(const SetGuildEctypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_xectypeinfo()) {
      mutable_xectypeinfo()->::NFMsg::GuildEctypeInfo::MergeFrom(from.xectypeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildEctypeInfo::CopyFrom(const SetGuildEctypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildEctypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_xectypeinfo()) {
    if (!this->xectypeinfo().IsInitialized()) return false;
  }
  return true;
}

void SetGuildEctypeInfo::Swap(SetGuildEctypeInfo* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(xectypeinfo_, other->xectypeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuildEctypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildEctypeInfo_descriptor_;
  metadata.reflection = SetGuildEctypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqEnterGuildEctype::kSelfidFieldNumber;
#endif  // !_MSC_VER

ReqEnterGuildEctype::ReqEnterGuildEctype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnterGuildEctype::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqEnterGuildEctype::ReqEnterGuildEctype(const ReqEnterGuildEctype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnterGuildEctype::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterGuildEctype::~ReqEnterGuildEctype() {
  SharedDtor();
}

void ReqEnterGuildEctype::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
  }
}

void ReqEnterGuildEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGuildEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterGuildEctype_descriptor_;
}

const ReqEnterGuildEctype& ReqEnterGuildEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqEnterGuildEctype* ReqEnterGuildEctype::default_instance_ = NULL;

ReqEnterGuildEctype* ReqEnterGuildEctype::New() const {
  return new ReqEnterGuildEctype;
}

void ReqEnterGuildEctype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnterGuildEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEnterGuildEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnterGuildEctype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnterGuildEctype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGuildEctype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnterGuildEctype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnterGuildEctype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnterGuildEctype::MergeFrom(const ReqEnterGuildEctype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnterGuildEctype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGuildEctype::CopyFrom(const ReqEnterGuildEctype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGuildEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  return true;
}

void ReqEnterGuildEctype::Swap(ReqEnterGuildEctype* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnterGuildEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterGuildEctype_descriptor_;
  metadata.reflection = ReqEnterGuildEctype_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChatInfo_EChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatInfo_EChatType_descriptor_;
}
bool ChatInfo_EChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChatInfo_EChatType ChatInfo::ECHATTYPE_NORMAL;
const ChatInfo_EChatType ChatInfo::ECHATTYPE_PRIVATE;
const ChatInfo_EChatType ChatInfo::ECHATTYPE_GUILD;
const ChatInfo_EChatType ChatInfo::ECHATTYPE_WORLD;
const ChatInfo_EChatType ChatInfo::EChatType_MIN;
const ChatInfo_EChatType ChatInfo::EChatType_MAX;
const int ChatInfo::EChatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChatInfo::kChatTypeFieldNumber;
const int ChatInfo::kChatInfoFieldNumber;
const int ChatInfo::kChatTimeFieldNumber;
const int ChatInfo::kAddtionalInfoFieldNumber;
const int ChatInfo::kSendIdFieldNumber;
const int ChatInfo::kSendNameFieldNumber;
const int ChatInfo::kSendLevelFieldNumber;
const int ChatInfo::kRecvierIdFieldNumber;
const int ChatInfo::kGuidNameFieldNumber;
#endif  // !_MSC_VER

ChatInfo::ChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatInfo::InitAsDefaultInstance() {
  send_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ChatInfo::ChatInfo(const ChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatInfo::SharedCtor() {
  _cached_size_ = 0;
  chat_type_ = 0;
  chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_time_ = GOOGLE_LONGLONG(0);
  addtional_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_id_ = NULL;
  send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_level_ = 0;
  guid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatInfo::~ChatInfo() {
  SharedDtor();
}

void ChatInfo::SharedDtor() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (addtional_info_ != &::google::protobuf::internal::kEmptyString) {
    delete addtional_info_;
  }
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (guid_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_name_;
  }
  if (this != default_instance_) {
    delete send_id_;
  }
}

void ChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatInfo_descriptor_;
}

const ChatInfo& ChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ChatInfo* ChatInfo::default_instance_ = NULL;

ChatInfo* ChatInfo::New() const {
  return new ChatInfo;
}

void ChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_type_ = 0;
    if (has_chat_info()) {
      if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
        chat_info_->clear();
      }
    }
    chat_time_ = GOOGLE_LONGLONG(0);
    if (has_addtional_info()) {
      if (addtional_info_ != &::google::protobuf::internal::kEmptyString) {
        addtional_info_->clear();
      }
    }
    if (has_send_id()) {
      if (send_id_ != NULL) send_id_->::NFMsg::Ident::Clear();
    }
    if (has_send_name()) {
      if (send_name_ != &::google::protobuf::internal::kEmptyString) {
        send_name_->clear();
      }
    }
    send_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guid_name()) {
      if (guid_name_ != &::google::protobuf::internal::kEmptyString) {
        guid_name_->clear();
      }
    }
  }
  recvier_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.ChatInfo.EChatType chat_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ChatInfo_EChatType_IsValid(value)) {
            set_chat_type(static_cast< ::NFMsg::ChatInfo_EChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_info;
        break;
      }

      // required bytes chat_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat_time;
        break;
      }

      // required int64 chat_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chat_time_)));
          set_has_chat_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_addtional_info;
        break;
      }

      // optional bytes addtional_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addtional_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addtional_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_send_id;
        break;
      }

      // required .NFMsg.Ident send_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_send_name;
        break;
      }

      // required bytes send_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_send_level;
        break;
      }

      // optional int32 send_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_level_)));
          set_has_send_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_recvier_id;
        break;
      }

      // repeated .NFMsg.Ident recvier_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvier_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recvier_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_recvier_id;
        if (input->ExpectTag(74)) goto parse_guid_name;
        break;
      }

      // optional bytes guid_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guid_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.ChatInfo.EChatType chat_type = 1;
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_type(), output);
  }

  // required bytes chat_info = 2;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->chat_info(), output);
  }

  // required int64 chat_time = 3;
  if (has_chat_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->chat_time(), output);
  }

  // optional bytes addtional_info = 4;
  if (has_addtional_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->addtional_info(), output);
  }

  // required .NFMsg.Ident send_id = 5;
  if (has_send_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->send_id(), output);
  }

  // required bytes send_name = 6;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->send_name(), output);
  }

  // optional int32 send_level = 7;
  if (has_send_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->send_level(), output);
  }

  // repeated .NFMsg.Ident recvier_id = 8;
  for (int i = 0; i < this->recvier_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->recvier_id(i), output);
  }

  // optional bytes guid_name = 9;
  if (has_guid_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->guid_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.ChatInfo.EChatType chat_type = 1;
  if (has_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_type(), target);
  }

  // required bytes chat_info = 2;
  if (has_chat_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chat_info(), target);
  }

  // required int64 chat_time = 3;
  if (has_chat_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->chat_time(), target);
  }

  // optional bytes addtional_info = 4;
  if (has_addtional_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->addtional_info(), target);
  }

  // required .NFMsg.Ident send_id = 5;
  if (has_send_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->send_id(), target);
  }

  // required bytes send_name = 6;
  if (has_send_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->send_name(), target);
  }

  // optional int32 send_level = 7;
  if (has_send_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->send_level(), target);
  }

  // repeated .NFMsg.Ident recvier_id = 8;
  for (int i = 0; i < this->recvier_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->recvier_id(i), target);
  }

  // optional bytes guid_name = 9;
  if (has_guid_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->guid_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.ChatInfo.EChatType chat_type = 1;
    if (has_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
    }

    // required bytes chat_info = 2;
    if (has_chat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chat_info());
    }

    // required int64 chat_time = 3;
    if (has_chat_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chat_time());
    }

    // optional bytes addtional_info = 4;
    if (has_addtional_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addtional_info());
    }

    // required .NFMsg.Ident send_id = 5;
    if (has_send_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_id());
    }

    // required bytes send_name = 6;
    if (has_send_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->send_name());
    }

    // optional int32 send_level = 7;
    if (has_send_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes guid_name = 9;
    if (has_guid_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guid_name());
    }

  }
  // repeated .NFMsg.Ident recvier_id = 8;
  total_size += 1 * this->recvier_id_size();
  for (int i = 0; i < this->recvier_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recvier_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatInfo::MergeFrom(const ChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  recvier_id_.MergeFrom(from.recvier_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_chat_info()) {
      set_chat_info(from.chat_info());
    }
    if (from.has_chat_time()) {
      set_chat_time(from.chat_time());
    }
    if (from.has_addtional_info()) {
      set_addtional_info(from.addtional_info());
    }
    if (from.has_send_id()) {
      mutable_send_id()->::NFMsg::Ident::MergeFrom(from.send_id());
    }
    if (from.has_send_name()) {
      set_send_name(from.send_name());
    }
    if (from.has_send_level()) {
      set_send_level(from.send_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guid_name()) {
      set_guid_name(from.guid_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatInfo::CopyFrom(const ChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  if (has_send_id()) {
    if (!this->send_id().IsInitialized()) return false;
  }
  for (int i = 0; i < recvier_id_size(); i++) {
    if (!this->recvier_id(i).IsInitialized()) return false;
  }
  return true;
}

void ChatInfo::Swap(ChatInfo* other) {
  if (other != this) {
    std::swap(chat_type_, other->chat_type_);
    std::swap(chat_info_, other->chat_info_);
    std::swap(chat_time_, other->chat_time_);
    std::swap(addtional_info_, other->addtional_info_);
    std::swap(send_id_, other->send_id_);
    std::swap(send_name_, other->send_name_);
    std::swap(send_level_, other->send_level_);
    recvier_id_.Swap(&other->recvier_id_);
    std::swap(guid_name_, other->guid_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatInfo_descriptor_;
  metadata.reflection = ChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckCreateChatGroup::kNameFieldNumber;
const int ReqAckCreateChatGroup::kSelfidFieldNumber;
const int ReqAckCreateChatGroup::kXChatGroupidFieldNumber;
const int ReqAckCreateChatGroup::kChatTypeFieldNumber;
#endif  // !_MSC_VER

ReqAckCreateChatGroup::ReqAckCreateChatGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckCreateChatGroup::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xchatgroupid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckCreateChatGroup::ReqAckCreateChatGroup(const ReqAckCreateChatGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckCreateChatGroup::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfid_ = NULL;
  xchatgroupid_ = NULL;
  chattype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckCreateChatGroup::~ReqAckCreateChatGroup() {
  SharedDtor();
}

void ReqAckCreateChatGroup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete selfid_;
    delete xchatgroupid_;
  }
}

void ReqAckCreateChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckCreateChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckCreateChatGroup_descriptor_;
}

const ReqAckCreateChatGroup& ReqAckCreateChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckCreateChatGroup* ReqAckCreateChatGroup::default_instance_ = NULL;

ReqAckCreateChatGroup* ReqAckCreateChatGroup::New() const {
  return new ReqAckCreateChatGroup;
}

void ReqAckCreateChatGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_xchatgroupid()) {
      if (xchatgroupid_ != NULL) xchatgroupid_->::NFMsg::Ident::Clear();
    }
    chattype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckCreateChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfid;
        break;
      }

      // required .NFMsg.Ident selfid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_xChatGroupid;
        break;
      }

      // optional .NFMsg.Ident xChatGroupid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xChatGroupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xchatgroupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chatType;
        break;
      }

      // optional int32 chatType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckCreateChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // required .NFMsg.Ident selfid = 2;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfid(), output);
  }

  // optional .NFMsg.Ident xChatGroupid = 3;
  if (has_xchatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->xchatgroupid(), output);
  }

  // optional int32 chatType = 4;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chattype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckCreateChatGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required .NFMsg.Ident selfid = 2;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfid(), target);
  }

  // optional .NFMsg.Ident xChatGroupid = 3;
  if (has_xchatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->xchatgroupid(), target);
  }

  // optional int32 chatType = 4;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chattype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckCreateChatGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required .NFMsg.Ident selfid = 2;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // optional .NFMsg.Ident xChatGroupid = 3;
    if (has_xchatgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xchatgroupid());
    }

    // optional int32 chatType = 4;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckCreateChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckCreateChatGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckCreateChatGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckCreateChatGroup::MergeFrom(const ReqAckCreateChatGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_xchatgroupid()) {
      mutable_xchatgroupid()->::NFMsg::Ident::MergeFrom(from.xchatgroupid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckCreateChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateChatGroup::CopyFrom(const ReqAckCreateChatGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_xchatgroupid()) {
    if (!this->xchatgroupid().IsInitialized()) return false;
  }
  return true;
}

void ReqAckCreateChatGroup::Swap(ReqAckCreateChatGroup* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(selfid_, other->selfid_);
    std::swap(xchatgroupid_, other->xchatgroupid_);
    std::swap(chattype_, other->chattype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckCreateChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckCreateChatGroup_descriptor_;
  metadata.reflection = ReqAckCreateChatGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckjoinChatGroup::kSelfidFieldNumber;
const int ReqAckjoinChatGroup::kXChatGroupidFieldNumber;
const int ReqAckjoinChatGroup::kResultFieldNumber;
const int ReqAckjoinChatGroup::kChatTypeFieldNumber;
#endif  // !_MSC_VER

ReqAckjoinChatGroup::ReqAckjoinChatGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckjoinChatGroup::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xchatgroupid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckjoinChatGroup::ReqAckjoinChatGroup(const ReqAckjoinChatGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckjoinChatGroup::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  xchatgroupid_ = NULL;
  result_ = GOOGLE_LONGLONG(0);
  chattype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckjoinChatGroup::~ReqAckjoinChatGroup() {
  SharedDtor();
}

void ReqAckjoinChatGroup::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete xchatgroupid_;
  }
}

void ReqAckjoinChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckjoinChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckjoinChatGroup_descriptor_;
}

const ReqAckjoinChatGroup& ReqAckjoinChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckjoinChatGroup* ReqAckjoinChatGroup::default_instance_ = NULL;

ReqAckjoinChatGroup* ReqAckjoinChatGroup::New() const {
  return new ReqAckjoinChatGroup;
}

void ReqAckjoinChatGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_xchatgroupid()) {
      if (xchatgroupid_ != NULL) xchatgroupid_->::NFMsg::Ident::Clear();
    }
    result_ = GOOGLE_LONGLONG(0);
    chattype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckjoinChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xChatGroupid;
        break;
      }

      // optional .NFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xChatGroupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xchatgroupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int64 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chatType;
        break;
      }

      // optional int32 chatType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckjoinChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // optional .NFMsg.Ident xChatGroupid = 2;
  if (has_xchatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xchatgroupid(), output);
  }

  // optional int64 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->result(), output);
  }

  // optional int32 chatType = 4;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chattype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckjoinChatGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // optional .NFMsg.Ident xChatGroupid = 2;
  if (has_xchatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xchatgroupid(), target);
  }

  // optional int64 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->result(), target);
  }

  // optional int32 chatType = 4;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chattype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckjoinChatGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // optional .NFMsg.Ident xChatGroupid = 2;
    if (has_xchatgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xchatgroupid());
    }

    // optional int64 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->result());
    }

    // optional int32 chatType = 4;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckjoinChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckjoinChatGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckjoinChatGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckjoinChatGroup::MergeFrom(const ReqAckjoinChatGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_xchatgroupid()) {
      mutable_xchatgroupid()->::NFMsg::Ident::MergeFrom(from.xchatgroupid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckjoinChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckjoinChatGroup::CopyFrom(const ReqAckjoinChatGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckjoinChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_xchatgroupid()) {
    if (!this->xchatgroupid().IsInitialized()) return false;
  }
  return true;
}

void ReqAckjoinChatGroup::Swap(ReqAckjoinChatGroup* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(xchatgroupid_, other->xchatgroupid_);
    std::swap(result_, other->result_);
    std::swap(chattype_, other->chattype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckjoinChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckjoinChatGroup_descriptor_;
  metadata.reflection = ReqAckjoinChatGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckQuitChatGroup::kSelfidFieldNumber;
const int ReqAckQuitChatGroup::kXChatGroupidFieldNumber;
const int ReqAckQuitChatGroup::kResultFieldNumber;
#endif  // !_MSC_VER

ReqAckQuitChatGroup::ReqAckQuitChatGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckQuitChatGroup::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xchatgroupid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckQuitChatGroup::ReqAckQuitChatGroup(const ReqAckQuitChatGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckQuitChatGroup::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  xchatgroupid_ = NULL;
  result_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckQuitChatGroup::~ReqAckQuitChatGroup() {
  SharedDtor();
}

void ReqAckQuitChatGroup::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete xchatgroupid_;
  }
}

void ReqAckQuitChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckQuitChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckQuitChatGroup_descriptor_;
}

const ReqAckQuitChatGroup& ReqAckQuitChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckQuitChatGroup* ReqAckQuitChatGroup::default_instance_ = NULL;

ReqAckQuitChatGroup* ReqAckQuitChatGroup::New() const {
  return new ReqAckQuitChatGroup;
}

void ReqAckQuitChatGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_xchatgroupid()) {
      if (xchatgroupid_ != NULL) xchatgroupid_->::NFMsg::Ident::Clear();
    }
    result_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckQuitChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xChatGroupid;
        break;
      }

      // optional .NFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xChatGroupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xchatgroupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int64 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckQuitChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // optional .NFMsg.Ident xChatGroupid = 2;
  if (has_xchatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xchatgroupid(), output);
  }

  // optional int64 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckQuitChatGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // optional .NFMsg.Ident xChatGroupid = 2;
  if (has_xchatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xchatgroupid(), target);
  }

  // optional int64 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckQuitChatGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // optional .NFMsg.Ident xChatGroupid = 2;
    if (has_xchatgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xchatgroupid());
    }

    // optional int64 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckQuitChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckQuitChatGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckQuitChatGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckQuitChatGroup::MergeFrom(const ReqAckQuitChatGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_xchatgroupid()) {
      mutable_xchatgroupid()->::NFMsg::Ident::MergeFrom(from.xchatgroupid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckQuitChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckQuitChatGroup::CopyFrom(const ReqAckQuitChatGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckQuitChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_xchatgroupid()) {
    if (!this->xchatgroupid().IsInitialized()) return false;
  }
  return true;
}

void ReqAckQuitChatGroup::Swap(ReqAckQuitChatGroup* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(xchatgroupid_, other->xchatgroupid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckQuitChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckQuitChatGroup_descriptor_;
  metadata.reflection = ReqAckQuitChatGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSubscriptionChatGroup::kSelfidFieldNumber;
const int ReqSubscriptionChatGroup::kXChatGroupidFieldNumber;
#endif  // !_MSC_VER

ReqSubscriptionChatGroup::ReqSubscriptionChatGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSubscriptionChatGroup::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqSubscriptionChatGroup::ReqSubscriptionChatGroup(const ReqSubscriptionChatGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSubscriptionChatGroup::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSubscriptionChatGroup::~ReqSubscriptionChatGroup() {
  SharedDtor();
}

void ReqSubscriptionChatGroup::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
  }
}

void ReqSubscriptionChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSubscriptionChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSubscriptionChatGroup_descriptor_;
}

const ReqSubscriptionChatGroup& ReqSubscriptionChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqSubscriptionChatGroup* ReqSubscriptionChatGroup::default_instance_ = NULL;

ReqSubscriptionChatGroup* ReqSubscriptionChatGroup::New() const {
  return new ReqSubscriptionChatGroup;
}

void ReqSubscriptionChatGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
  }
  xchatgroupid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSubscriptionChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xChatGroupid;
        break;
      }

      // repeated .NFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xChatGroupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xchatgroupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xChatGroupid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSubscriptionChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // repeated .NFMsg.Ident xChatGroupid = 2;
  for (int i = 0; i < this->xchatgroupid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xchatgroupid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSubscriptionChatGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // repeated .NFMsg.Ident xChatGroupid = 2;
  for (int i = 0; i < this->xchatgroupid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xchatgroupid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSubscriptionChatGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

  }
  // repeated .NFMsg.Ident xChatGroupid = 2;
  total_size += 1 * this->xchatgroupid_size();
  for (int i = 0; i < this->xchatgroupid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xchatgroupid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSubscriptionChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSubscriptionChatGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSubscriptionChatGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSubscriptionChatGroup::MergeFrom(const ReqSubscriptionChatGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  xchatgroupid_.MergeFrom(from.xchatgroupid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSubscriptionChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubscriptionChatGroup::CopyFrom(const ReqSubscriptionChatGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubscriptionChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  for (int i = 0; i < xchatgroupid_size(); i++) {
    if (!this->xchatgroupid(i).IsInitialized()) return false;
  }
  return true;
}

void ReqSubscriptionChatGroup::Swap(ReqSubscriptionChatGroup* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    xchatgroupid_.Swap(&other->xchatgroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSubscriptionChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSubscriptionChatGroup_descriptor_;
  metadata.reflection = ReqSubscriptionChatGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCancelSubscriptionChatGroup::kSelfidFieldNumber;
const int ReqCancelSubscriptionChatGroup::kXChatGroupidFieldNumber;
#endif  // !_MSC_VER

ReqCancelSubscriptionChatGroup::ReqCancelSubscriptionChatGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCancelSubscriptionChatGroup::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqCancelSubscriptionChatGroup::ReqCancelSubscriptionChatGroup(const ReqCancelSubscriptionChatGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCancelSubscriptionChatGroup::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCancelSubscriptionChatGroup::~ReqCancelSubscriptionChatGroup() {
  SharedDtor();
}

void ReqCancelSubscriptionChatGroup::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
  }
}

void ReqCancelSubscriptionChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCancelSubscriptionChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCancelSubscriptionChatGroup_descriptor_;
}

const ReqCancelSubscriptionChatGroup& ReqCancelSubscriptionChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqCancelSubscriptionChatGroup* ReqCancelSubscriptionChatGroup::default_instance_ = NULL;

ReqCancelSubscriptionChatGroup* ReqCancelSubscriptionChatGroup::New() const {
  return new ReqCancelSubscriptionChatGroup;
}

void ReqCancelSubscriptionChatGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
  }
  xchatgroupid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCancelSubscriptionChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xChatGroupid;
        break;
      }

      // repeated .NFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xChatGroupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xchatgroupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xChatGroupid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCancelSubscriptionChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // repeated .NFMsg.Ident xChatGroupid = 2;
  for (int i = 0; i < this->xchatgroupid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xchatgroupid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCancelSubscriptionChatGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // repeated .NFMsg.Ident xChatGroupid = 2;
  for (int i = 0; i < this->xchatgroupid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xchatgroupid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCancelSubscriptionChatGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

  }
  // repeated .NFMsg.Ident xChatGroupid = 2;
  total_size += 1 * this->xchatgroupid_size();
  for (int i = 0; i < this->xchatgroupid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xchatgroupid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCancelSubscriptionChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCancelSubscriptionChatGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCancelSubscriptionChatGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCancelSubscriptionChatGroup::MergeFrom(const ReqCancelSubscriptionChatGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  xchatgroupid_.MergeFrom(from.xchatgroupid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCancelSubscriptionChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCancelSubscriptionChatGroup::CopyFrom(const ReqCancelSubscriptionChatGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCancelSubscriptionChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  for (int i = 0; i < xchatgroupid_size(); i++) {
    if (!this->xchatgroupid(i).IsInitialized()) return false;
  }
  return true;
}

void ReqCancelSubscriptionChatGroup::Swap(ReqCancelSubscriptionChatGroup* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    xchatgroupid_.Swap(&other->xchatgroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCancelSubscriptionChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCancelSubscriptionChatGroup_descriptor_;
  metadata.reflection = ReqCancelSubscriptionChatGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqIntensifylevelToEquip::kSelfidFieldNumber;
const int ReqIntensifylevelToEquip::kEquipidFieldNumber;
#endif  // !_MSC_VER

ReqIntensifylevelToEquip::ReqIntensifylevelToEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqIntensifylevelToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  equipid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqIntensifylevelToEquip::ReqIntensifylevelToEquip(const ReqIntensifylevelToEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqIntensifylevelToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqIntensifylevelToEquip::~ReqIntensifylevelToEquip() {
  SharedDtor();
}

void ReqIntensifylevelToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void ReqIntensifylevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqIntensifylevelToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqIntensifylevelToEquip_descriptor_;
}

const ReqIntensifylevelToEquip& ReqIntensifylevelToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqIntensifylevelToEquip* ReqIntensifylevelToEquip::default_instance_ = NULL;

ReqIntensifylevelToEquip* ReqIntensifylevelToEquip::New() const {
  return new ReqIntensifylevelToEquip;
}

void ReqIntensifylevelToEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqIntensifylevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .NFMsg.Ident equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqIntensifylevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqIntensifylevelToEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqIntensifylevelToEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqIntensifylevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqIntensifylevelToEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqIntensifylevelToEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqIntensifylevelToEquip::MergeFrom(const ReqIntensifylevelToEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqIntensifylevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqIntensifylevelToEquip::CopyFrom(const ReqIntensifylevelToEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqIntensifylevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid().IsInitialized()) return false;
  }
  return true;
}

void ReqIntensifylevelToEquip::Swap(ReqIntensifylevelToEquip* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(equipid_, other->equipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqIntensifylevelToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqIntensifylevelToEquip_descriptor_;
  metadata.reflection = ReqIntensifylevelToEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckIntensifylevelToEquip::kSelfidFieldNumber;
const int AckIntensifylevelToEquip::kEquipidFieldNumber;
const int AckIntensifylevelToEquip::kResultFieldNumber;
#endif  // !_MSC_VER

AckIntensifylevelToEquip::AckIntensifylevelToEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckIntensifylevelToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  equipid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

AckIntensifylevelToEquip::AckIntensifylevelToEquip(const AckIntensifylevelToEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckIntensifylevelToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckIntensifylevelToEquip::~AckIntensifylevelToEquip() {
  SharedDtor();
}

void AckIntensifylevelToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void AckIntensifylevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckIntensifylevelToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckIntensifylevelToEquip_descriptor_;
}

const AckIntensifylevelToEquip& AckIntensifylevelToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckIntensifylevelToEquip* AckIntensifylevelToEquip::default_instance_ = NULL;

AckIntensifylevelToEquip* AckIntensifylevelToEquip::New() const {
  return new AckIntensifylevelToEquip;
}

void AckIntensifylevelToEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::NFMsg::Ident::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckIntensifylevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .NFMsg.Ident equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckIntensifylevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipid(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckIntensifylevelToEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipid(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckIntensifylevelToEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipid());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckIntensifylevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckIntensifylevelToEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckIntensifylevelToEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckIntensifylevelToEquip::MergeFrom(const AckIntensifylevelToEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckIntensifylevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckIntensifylevelToEquip::CopyFrom(const AckIntensifylevelToEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckIntensifylevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid().IsInitialized()) return false;
  }
  return true;
}

void AckIntensifylevelToEquip::Swap(AckIntensifylevelToEquip* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(equipid_, other->equipid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckIntensifylevelToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckIntensifylevelToEquip_descriptor_;
  metadata.reflection = AckIntensifylevelToEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHoleToEquip::kSelfidFieldNumber;
const int ReqHoleToEquip::kEquipidFieldNumber;
#endif  // !_MSC_VER

ReqHoleToEquip::ReqHoleToEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHoleToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  equipid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqHoleToEquip::ReqHoleToEquip(const ReqHoleToEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHoleToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHoleToEquip::~ReqHoleToEquip() {
  SharedDtor();
}

void ReqHoleToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void ReqHoleToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHoleToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHoleToEquip_descriptor_;
}

const ReqHoleToEquip& ReqHoleToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqHoleToEquip* ReqHoleToEquip::default_instance_ = NULL;

ReqHoleToEquip* ReqHoleToEquip::New() const {
  return new ReqHoleToEquip;
}

void ReqHoleToEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHoleToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .NFMsg.Ident equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHoleToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHoleToEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHoleToEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHoleToEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHoleToEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHoleToEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHoleToEquip::MergeFrom(const ReqHoleToEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHoleToEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHoleToEquip::CopyFrom(const ReqHoleToEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHoleToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid().IsInitialized()) return false;
  }
  return true;
}

void ReqHoleToEquip::Swap(ReqHoleToEquip* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(equipid_, other->equipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHoleToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHoleToEquip_descriptor_;
  metadata.reflection = ReqHoleToEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckHoleToEquip::kSelfidFieldNumber;
const int AckHoleToEquip::kEquipidFieldNumber;
const int AckHoleToEquip::kResultFieldNumber;
#endif  // !_MSC_VER

AckHoleToEquip::AckHoleToEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckHoleToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  equipid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

AckHoleToEquip::AckHoleToEquip(const AckHoleToEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckHoleToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHoleToEquip::~AckHoleToEquip() {
  SharedDtor();
}

void AckHoleToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void AckHoleToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHoleToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHoleToEquip_descriptor_;
}

const AckHoleToEquip& AckHoleToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckHoleToEquip* AckHoleToEquip::default_instance_ = NULL;

AckHoleToEquip* AckHoleToEquip::New() const {
  return new AckHoleToEquip;
}

void AckHoleToEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::NFMsg::Ident::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHoleToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .NFMsg.Ident equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckHoleToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipid(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckHoleToEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipid(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckHoleToEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipid());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHoleToEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHoleToEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHoleToEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHoleToEquip::MergeFrom(const AckHoleToEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHoleToEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHoleToEquip::CopyFrom(const AckHoleToEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHoleToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid().IsInitialized()) return false;
  }
  return true;
}

void AckHoleToEquip::Swap(AckHoleToEquip* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(equipid_, other->equipid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHoleToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHoleToEquip_descriptor_;
  metadata.reflection = AckHoleToEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInlaystoneToEquip::kSelfidFieldNumber;
const int ReqInlaystoneToEquip::kEquipidFieldNumber;
const int ReqInlaystoneToEquip::kStoneidFieldNumber;
const int ReqInlaystoneToEquip::kHoleIndexFieldNumber;
#endif  // !_MSC_VER

ReqInlaystoneToEquip::ReqInlaystoneToEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInlaystoneToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  equipid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqInlaystoneToEquip::ReqInlaystoneToEquip(const ReqInlaystoneToEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInlaystoneToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  stoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hole_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInlaystoneToEquip::~ReqInlaystoneToEquip() {
  SharedDtor();
}

void ReqInlaystoneToEquip::SharedDtor() {
  if (stoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete stoneid_;
  }
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void ReqInlaystoneToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInlaystoneToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInlaystoneToEquip_descriptor_;
}

const ReqInlaystoneToEquip& ReqInlaystoneToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqInlaystoneToEquip* ReqInlaystoneToEquip::default_instance_ = NULL;

ReqInlaystoneToEquip* ReqInlaystoneToEquip::New() const {
  return new ReqInlaystoneToEquip;
}

void ReqInlaystoneToEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::NFMsg::Ident::Clear();
    }
    if (has_stoneid()) {
      if (stoneid_ != &::google::protobuf::internal::kEmptyString) {
        stoneid_->clear();
      }
    }
    hole_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInlaystoneToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .NFMsg.Ident equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stoneid;
        break;
      }

      // required bytes stoneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stoneid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stoneid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hole_index;
        break;
      }

      // required int32 hole_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_index_)));
          set_has_hole_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInlaystoneToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipid(), output);
  }

  // required bytes stoneid = 3;
  if (has_stoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stoneid(), output);
  }

  // required int32 hole_index = 4;
  if (has_hole_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hole_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInlaystoneToEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipid(), target);
  }

  // required bytes stoneid = 3;
  if (has_stoneid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stoneid(), target);
  }

  // required int32 hole_index = 4;
  if (has_hole_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hole_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInlaystoneToEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipid());
    }

    // required bytes stoneid = 3;
    if (has_stoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stoneid());
    }

    // required int32 hole_index = 4;
    if (has_hole_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInlaystoneToEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInlaystoneToEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInlaystoneToEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInlaystoneToEquip::MergeFrom(const ReqInlaystoneToEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_stoneid()) {
      set_stoneid(from.stoneid());
    }
    if (from.has_hole_index()) {
      set_hole_index(from.hole_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInlaystoneToEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInlaystoneToEquip::CopyFrom(const ReqInlaystoneToEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInlaystoneToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid().IsInitialized()) return false;
  }
  return true;
}

void ReqInlaystoneToEquip::Swap(ReqInlaystoneToEquip* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(equipid_, other->equipid_);
    std::swap(stoneid_, other->stoneid_);
    std::swap(hole_index_, other->hole_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInlaystoneToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInlaystoneToEquip_descriptor_;
  metadata.reflection = ReqInlaystoneToEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckInlaystoneToEquip::kSelfidFieldNumber;
const int AckInlaystoneToEquip::kEquipidFieldNumber;
const int AckInlaystoneToEquip::kResultFieldNumber;
#endif  // !_MSC_VER

AckInlaystoneToEquip::AckInlaystoneToEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckInlaystoneToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  equipid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

AckInlaystoneToEquip::AckInlaystoneToEquip(const AckInlaystoneToEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckInlaystoneToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckInlaystoneToEquip::~AckInlaystoneToEquip() {
  SharedDtor();
}

void AckInlaystoneToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void AckInlaystoneToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckInlaystoneToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckInlaystoneToEquip_descriptor_;
}

const AckInlaystoneToEquip& AckInlaystoneToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckInlaystoneToEquip* AckInlaystoneToEquip::default_instance_ = NULL;

AckInlaystoneToEquip* AckInlaystoneToEquip::New() const {
  return new AckInlaystoneToEquip;
}

void AckInlaystoneToEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::NFMsg::Ident::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckInlaystoneToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .NFMsg.Ident equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckInlaystoneToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipid(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckInlaystoneToEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipid(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckInlaystoneToEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipid());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckInlaystoneToEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckInlaystoneToEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckInlaystoneToEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckInlaystoneToEquip::MergeFrom(const AckInlaystoneToEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckInlaystoneToEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckInlaystoneToEquip::CopyFrom(const AckInlaystoneToEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckInlaystoneToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid().IsInitialized()) return false;
  }
  return true;
}

void AckInlaystoneToEquip::Swap(AckInlaystoneToEquip* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(equipid_, other->equipid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckInlaystoneToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckInlaystoneToEquip_descriptor_;
  metadata.reflection = AckInlaystoneToEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqElementlevelToEquip::kSelfidFieldNumber;
const int ReqElementlevelToEquip::kEquipidFieldNumber;
const int ReqElementlevelToEquip::kEElementTypeFieldNumber;
#endif  // !_MSC_VER

ReqElementlevelToEquip::ReqElementlevelToEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqElementlevelToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  equipid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqElementlevelToEquip::ReqElementlevelToEquip(const ReqElementlevelToEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqElementlevelToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  eelementtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqElementlevelToEquip::~ReqElementlevelToEquip() {
  SharedDtor();
}

void ReqElementlevelToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void ReqElementlevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqElementlevelToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqElementlevelToEquip_descriptor_;
}

const ReqElementlevelToEquip& ReqElementlevelToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqElementlevelToEquip* ReqElementlevelToEquip::default_instance_ = NULL;

ReqElementlevelToEquip* ReqElementlevelToEquip::New() const {
  return new ReqElementlevelToEquip;
}

void ReqElementlevelToEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::NFMsg::Ident::Clear();
    }
    eelementtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqElementlevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .NFMsg.Ident equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eElementType;
        break;
      }

      // required .NFMsg.EGameElementType eElementType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eElementType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::EGameElementType_IsValid(value)) {
            set_eelementtype(static_cast< ::NFMsg::EGameElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqElementlevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipid(), output);
  }

  // required .NFMsg.EGameElementType eElementType = 3;
  if (has_eelementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eelementtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqElementlevelToEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipid(), target);
  }

  // required .NFMsg.EGameElementType eElementType = 3;
  if (has_eelementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eelementtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqElementlevelToEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipid());
    }

    // required .NFMsg.EGameElementType eElementType = 3;
    if (has_eelementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eelementtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqElementlevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqElementlevelToEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqElementlevelToEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqElementlevelToEquip::MergeFrom(const ReqElementlevelToEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_eelementtype()) {
      set_eelementtype(from.eelementtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqElementlevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqElementlevelToEquip::CopyFrom(const ReqElementlevelToEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqElementlevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid().IsInitialized()) return false;
  }
  return true;
}

void ReqElementlevelToEquip::Swap(ReqElementlevelToEquip* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(equipid_, other->equipid_);
    std::swap(eelementtype_, other->eelementtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqElementlevelToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqElementlevelToEquip_descriptor_;
  metadata.reflection = ReqElementlevelToEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckElementlevelToEquip::kSelfidFieldNumber;
const int AckElementlevelToEquip::kEquipidFieldNumber;
const int AckElementlevelToEquip::kResultFieldNumber;
#endif  // !_MSC_VER

AckElementlevelToEquip::AckElementlevelToEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckElementlevelToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  equipid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

AckElementlevelToEquip::AckElementlevelToEquip(const AckElementlevelToEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckElementlevelToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckElementlevelToEquip::~AckElementlevelToEquip() {
  SharedDtor();
}

void AckElementlevelToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void AckElementlevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckElementlevelToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckElementlevelToEquip_descriptor_;
}

const AckElementlevelToEquip& AckElementlevelToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckElementlevelToEquip* AckElementlevelToEquip::default_instance_ = NULL;

AckElementlevelToEquip* AckElementlevelToEquip::New() const {
  return new AckElementlevelToEquip;
}

void AckElementlevelToEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::NFMsg::Ident::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckElementlevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .NFMsg.Ident equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckElementlevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipid(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckElementlevelToEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipid(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckElementlevelToEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipid());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckElementlevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckElementlevelToEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckElementlevelToEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckElementlevelToEquip::MergeFrom(const AckElementlevelToEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckElementlevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckElementlevelToEquip::CopyFrom(const AckElementlevelToEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckElementlevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid().IsInitialized()) return false;
  }
  return true;
}

void AckElementlevelToEquip::Swap(AckElementlevelToEquip* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(equipid_, other->equipid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckElementlevelToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckElementlevelToEquip_descriptor_;
  metadata.reflection = AckElementlevelToEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSetFightHero::kSelfidFieldNumber;
const int ReqSetFightHero::kHeroidFieldNumber;
const int ReqSetFightHero::kFightPosFieldNumber;
#endif  // !_MSC_VER

ReqSetFightHero::ReqSetFightHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSetFightHero::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  heroid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqSetFightHero::ReqSetFightHero(const ReqSetFightHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSetFightHero::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  heroid_ = NULL;
  fightpos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSetFightHero::~ReqSetFightHero() {
  SharedDtor();
}

void ReqSetFightHero::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete heroid_;
  }
}

void ReqSetFightHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSetFightHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSetFightHero_descriptor_;
}

const ReqSetFightHero& ReqSetFightHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqSetFightHero* ReqSetFightHero::default_instance_ = NULL;

ReqSetFightHero* ReqSetFightHero::New() const {
  return new ReqSetFightHero;
}

void ReqSetFightHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_heroid()) {
      if (heroid_ != NULL) heroid_->::NFMsg::Ident::Clear();
    }
    fightpos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSetFightHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Heroid;
        break;
      }

      // required .NFMsg.Ident Heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Heroid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heroid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FightPos;
        break;
      }

      // required int32 FightPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightpos_)));
          set_has_fightpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSetFightHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident Heroid = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroid(), output);
  }

  // required int32 FightPos = 3;
  if (has_fightpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSetFightHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident Heroid = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroid(), target);
  }

  // required int32 FightPos = 3;
  if (has_fightpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fightpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSetFightHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident Heroid = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heroid());
    }

    // required int32 FightPos = 3;
    if (has_fightpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSetFightHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSetFightHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSetFightHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSetFightHero::MergeFrom(const ReqSetFightHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_heroid()) {
      mutable_heroid()->::NFMsg::Ident::MergeFrom(from.heroid());
    }
    if (from.has_fightpos()) {
      set_fightpos(from.fightpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSetFightHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetFightHero::CopyFrom(const ReqSetFightHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetFightHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_heroid()) {
    if (!this->heroid().IsInitialized()) return false;
  }
  return true;
}

void ReqSetFightHero::Swap(ReqSetFightHero* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(heroid_, other->heroid_);
    std::swap(fightpos_, other->fightpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSetFightHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSetFightHero_descriptor_;
  metadata.reflection = ReqSetFightHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWearEquip::kSelfidFieldNumber;
const int ReqWearEquip::kEquipidFieldNumber;
const int ReqWearEquip::kTargetidFieldNumber;
#endif  // !_MSC_VER

ReqWearEquip::ReqWearEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqWearEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  equipid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  targetid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqWearEquip::ReqWearEquip(const ReqWearEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqWearEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  targetid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWearEquip::~ReqWearEquip() {
  SharedDtor();
}

void ReqWearEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
    delete targetid_;
  }
}

void ReqWearEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWearEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWearEquip_descriptor_;
}

const ReqWearEquip& ReqWearEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqWearEquip* ReqWearEquip::default_instance_ = NULL;

ReqWearEquip* ReqWearEquip::New() const {
  return new ReqWearEquip;
}

void ReqWearEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::NFMsg::Ident::Clear();
    }
    if (has_targetid()) {
      if (targetid_ != NULL) targetid_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWearEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .NFMsg.Ident equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Targetid;
        break;
      }

      // required .NFMsg.Ident Targetid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Targetid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqWearEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipid(), output);
  }

  // required .NFMsg.Ident Targetid = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqWearEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipid(), target);
  }

  // required .NFMsg.Ident Targetid = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqWearEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipid());
    }

    // required .NFMsg.Ident Targetid = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWearEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWearEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWearEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWearEquip::MergeFrom(const ReqWearEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_targetid()) {
      mutable_targetid()->::NFMsg::Ident::MergeFrom(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWearEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWearEquip::CopyFrom(const ReqWearEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWearEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid().IsInitialized()) return false;
  }
  if (has_targetid()) {
    if (!this->targetid().IsInitialized()) return false;
  }
  return true;
}

void ReqWearEquip::Swap(ReqWearEquip* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(equipid_, other->equipid_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWearEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWearEquip_descriptor_;
  metadata.reflection = ReqWearEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeOffEquip::kSelfidFieldNumber;
const int TakeOffEquip::kEquipidFieldNumber;
const int TakeOffEquip::kTargetidFieldNumber;
#endif  // !_MSC_VER

TakeOffEquip::TakeOffEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeOffEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  equipid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  targetid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

TakeOffEquip::TakeOffEquip(const TakeOffEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeOffEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  targetid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeOffEquip::~TakeOffEquip() {
  SharedDtor();
}

void TakeOffEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
    delete targetid_;
  }
}

void TakeOffEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeOffEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeOffEquip_descriptor_;
}

const TakeOffEquip& TakeOffEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

TakeOffEquip* TakeOffEquip::default_instance_ = NULL;

TakeOffEquip* TakeOffEquip::New() const {
  return new TakeOffEquip;
}

void TakeOffEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::NFMsg::Ident::Clear();
    }
    if (has_targetid()) {
      if (targetid_ != NULL) targetid_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeOffEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .NFMsg.Ident equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Targetid;
        break;
      }

      // required .NFMsg.Ident Targetid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Targetid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeOffEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipid(), output);
  }

  // required .NFMsg.Ident Targetid = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeOffEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipid(), target);
  }

  // required .NFMsg.Ident Targetid = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeOffEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipid());
    }

    // required .NFMsg.Ident Targetid = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeOffEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeOffEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeOffEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeOffEquip::MergeFrom(const TakeOffEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_targetid()) {
      mutable_targetid()->::NFMsg::Ident::MergeFrom(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeOffEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeOffEquip::CopyFrom(const TakeOffEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeOffEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid().IsInitialized()) return false;
  }
  if (has_targetid()) {
    if (!this->targetid().IsInitialized()) return false;
  }
  return true;
}

void TakeOffEquip::Swap(TakeOffEquip* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(equipid_, other->equipid_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeOffEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeOffEquip_descriptor_;
  metadata.reflection = TakeOffEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMiningTitle::kSelfidFieldNumber;
const int ReqMiningTitle::kXFieldNumber;
const int ReqMiningTitle::kYFieldNumber;
#endif  // !_MSC_VER

ReqMiningTitle::ReqMiningTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMiningTitle::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqMiningTitle::ReqMiningTitle(const ReqMiningTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMiningTitle::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMiningTitle::~ReqMiningTitle() {
  SharedDtor();
}

void ReqMiningTitle::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
  }
}

void ReqMiningTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMiningTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMiningTitle_descriptor_;
}

const ReqMiningTitle& ReqMiningTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqMiningTitle* ReqMiningTitle::default_instance_ = NULL;

ReqMiningTitle* ReqMiningTitle::New() const {
  return new ReqMiningTitle;
}

void ReqMiningTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMiningTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMiningTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMiningTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMiningTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMiningTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMiningTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMiningTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMiningTitle::MergeFrom(const ReqMiningTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMiningTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMiningTitle::CopyFrom(const ReqMiningTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMiningTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  return true;
}

void ReqMiningTitle::Swap(ReqMiningTitle* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMiningTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMiningTitle_descriptor_;
  metadata.reflection = ReqMiningTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSendMail::kSelfidFieldNumber;
const int ReqSendMail::kRecieverFieldNumber;
const int ReqSendMail::kItemListFieldNumber;
const int ReqSendMail::kCurrencyListFieldNumber;
#endif  // !_MSC_VER

ReqSendMail::ReqSendMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSendMail::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  reciever_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqSendMail::ReqSendMail(const ReqSendMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSendMail::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  reciever_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSendMail::~ReqSendMail() {
  SharedDtor();
}

void ReqSendMail::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete reciever_;
  }
}

void ReqSendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSendMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSendMail_descriptor_;
}

const ReqSendMail& ReqSendMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqSendMail* ReqSendMail::default_instance_ = NULL;

ReqSendMail* ReqSendMail::New() const {
  return new ReqSendMail;
}

void ReqSendMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    if (has_reciever()) {
      if (reciever_ != NULL) reciever_->::NFMsg::Ident::Clear();
    }
  }
  item_list_.Clear();
  currency_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reciever;
        break;
      }

      // required .NFMsg.Ident reciever = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reciever:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reciever()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .NFMsg.ItemStruct item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectTag(34)) goto parse_currency_list;
        break;
      }

      // repeated .NFMsg.CurrencyStruct currency_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_currency_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_currency_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required .NFMsg.Ident reciever = 2;
  if (has_reciever()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reciever(), output);
  }

  // repeated .NFMsg.ItemStruct item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 4;
  for (int i = 0; i < this->currency_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->currency_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSendMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required .NFMsg.Ident reciever = 2;
  if (has_reciever()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reciever(), target);
  }

  // repeated .NFMsg.ItemStruct item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 4;
  for (int i = 0; i < this->currency_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->currency_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSendMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required .NFMsg.Ident reciever = 2;
    if (has_reciever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reciever());
    }

  }
  // repeated .NFMsg.ItemStruct item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 4;
  total_size += 1 * this->currency_list_size();
  for (int i = 0; i < this->currency_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->currency_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSendMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSendMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSendMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSendMail::MergeFrom(const ReqSendMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  currency_list_.MergeFrom(from.currency_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_reciever()) {
      mutable_reciever()->::NFMsg::Ident::MergeFrom(from.reciever());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSendMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendMail::CopyFrom(const ReqSendMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_reciever()) {
    if (!this->reciever().IsInitialized()) return false;
  }
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < currency_list_size(); i++) {
    if (!this->currency_list(i).IsInitialized()) return false;
  }
  return true;
}

void ReqSendMail::Swap(ReqSendMail* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(reciever_, other->reciever_);
    item_list_.Swap(&other->item_list_);
    currency_list_.Swap(&other->currency_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSendMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSendMail_descriptor_;
  metadata.reflection = ReqSendMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSwitchServer::kSelfidFieldNumber;
const int ReqSwitchServer::kSelfServeridFieldNumber;
const int ReqSwitchServer::kTargetServeridFieldNumber;
const int ReqSwitchServer::kGateServeridFieldNumber;
const int ReqSwitchServer::kSceneIDFieldNumber;
const int ReqSwitchServer::kClientIdFieldNumber;
const int ReqSwitchServer::kGroupIDFieldNumber;
#endif  // !_MSC_VER

ReqSwitchServer::ReqSwitchServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSwitchServer::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  client_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqSwitchServer::ReqSwitchServer(const ReqSwitchServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSwitchServer::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  self_serverid_ = GOOGLE_LONGLONG(0);
  target_serverid_ = GOOGLE_LONGLONG(0);
  gate_serverid_ = GOOGLE_LONGLONG(0);
  sceneid_ = GOOGLE_LONGLONG(0);
  client_id_ = NULL;
  groupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSwitchServer::~ReqSwitchServer() {
  SharedDtor();
}

void ReqSwitchServer::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete client_id_;
  }
}

void ReqSwitchServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSwitchServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSwitchServer_descriptor_;
}

const ReqSwitchServer& ReqSwitchServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqSwitchServer* ReqSwitchServer::default_instance_ = NULL;

ReqSwitchServer* ReqSwitchServer::New() const {
  return new ReqSwitchServer;
}

void ReqSwitchServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    self_serverid_ = GOOGLE_LONGLONG(0);
    target_serverid_ = GOOGLE_LONGLONG(0);
    gate_serverid_ = GOOGLE_LONGLONG(0);
    sceneid_ = GOOGLE_LONGLONG(0);
    if (has_client_id()) {
      if (client_id_ != NULL) client_id_->::NFMsg::Ident::Clear();
    }
    groupid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSwitchServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_serverid;
        break;
      }

      // required int64 self_serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_serverid_)));
          set_has_self_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_serverid;
        break;
      }

      // required int64 target_serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_serverid_)));
          set_has_target_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gate_serverid;
        break;
      }

      // required int64 gate_serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gate_serverid_)));
          set_has_gate_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SceneID;
        break;
      }

      // required int64 SceneID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_client_id;
        break;
      }

      // required .NFMsg.Ident client_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_groupID;
        break;
      }

      // required int64 groupID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSwitchServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required int64 self_serverid = 2;
  if (has_self_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_serverid(), output);
  }

  // required int64 target_serverid = 3;
  if (has_target_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_serverid(), output);
  }

  // required int64 gate_serverid = 4;
  if (has_gate_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gate_serverid(), output);
  }

  // required int64 SceneID = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sceneid(), output);
  }

  // required .NFMsg.Ident client_id = 6;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->client_id(), output);
  }

  // required int64 groupID = 7;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSwitchServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required int64 self_serverid = 2;
  if (has_self_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_serverid(), target);
  }

  // required int64 target_serverid = 3;
  if (has_target_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_serverid(), target);
  }

  // required int64 gate_serverid = 4;
  if (has_gate_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gate_serverid(), target);
  }

  // required int64 SceneID = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sceneid(), target);
  }

  // required .NFMsg.Ident client_id = 6;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->client_id(), target);
  }

  // required int64 groupID = 7;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSwitchServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required int64 self_serverid = 2;
    if (has_self_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_serverid());
    }

    // required int64 target_serverid = 3;
    if (has_target_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_serverid());
    }

    // required int64 gate_serverid = 4;
    if (has_gate_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gate_serverid());
    }

    // required int64 SceneID = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sceneid());
    }

    // required .NFMsg.Ident client_id = 6;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_id());
    }

    // required int64 groupID = 7;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSwitchServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSwitchServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSwitchServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSwitchServer::MergeFrom(const ReqSwitchServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_self_serverid()) {
      set_self_serverid(from.self_serverid());
    }
    if (from.has_target_serverid()) {
      set_target_serverid(from.target_serverid());
    }
    if (from.has_gate_serverid()) {
      set_gate_serverid(from.gate_serverid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_client_id()) {
      mutable_client_id()->::NFMsg::Ident::MergeFrom(from.client_id());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSwitchServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwitchServer::CopyFrom(const ReqSwitchServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwitchServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  if (has_client_id()) {
    if (!this->client_id().IsInitialized()) return false;
  }
  return true;
}

void ReqSwitchServer::Swap(ReqSwitchServer* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(self_serverid_, other->self_serverid_);
    std::swap(target_serverid_, other->target_serverid_);
    std::swap(gate_serverid_, other->gate_serverid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(client_id_, other->client_id_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSwitchServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSwitchServer_descriptor_;
  metadata.reflection = ReqSwitchServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSwitchServer::kSelfidFieldNumber;
const int AckSwitchServer::kSelfServeridFieldNumber;
const int AckSwitchServer::kTargetServeridFieldNumber;
const int AckSwitchServer::kGateServeridFieldNumber;
#endif  // !_MSC_VER

AckSwitchServer::AckSwitchServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSwitchServer::InitAsDefaultInstance() {
  selfid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

AckSwitchServer::AckSwitchServer(const AckSwitchServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSwitchServer::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  self_serverid_ = GOOGLE_LONGLONG(0);
  target_serverid_ = GOOGLE_LONGLONG(0);
  gate_serverid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSwitchServer::~AckSwitchServer() {
  SharedDtor();
}

void AckSwitchServer::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
  }
}

void AckSwitchServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSwitchServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSwitchServer_descriptor_;
}

const AckSwitchServer& AckSwitchServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckSwitchServer* AckSwitchServer::default_instance_ = NULL;

AckSwitchServer* AckSwitchServer::New() const {
  return new AckSwitchServer;
}

void AckSwitchServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::NFMsg::Ident::Clear();
    }
    self_serverid_ = GOOGLE_LONGLONG(0);
    target_serverid_ = GOOGLE_LONGLONG(0);
    gate_serverid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSwitchServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_serverid;
        break;
      }

      // required int64 self_serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_serverid_)));
          set_has_self_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_serverid;
        break;
      }

      // required int64 target_serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_serverid_)));
          set_has_target_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gate_serverid;
        break;
      }

      // required int64 gate_serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gate_serverid_)));
          set_has_gate_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSwitchServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfid(), output);
  }

  // required int64 self_serverid = 2;
  if (has_self_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_serverid(), output);
  }

  // required int64 target_serverid = 3;
  if (has_target_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_serverid(), output);
  }

  // required int64 gate_serverid = 4;
  if (has_gate_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gate_serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSwitchServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfid(), target);
  }

  // required int64 self_serverid = 2;
  if (has_self_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_serverid(), target);
  }

  // required int64 target_serverid = 3;
  if (has_target_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_serverid(), target);
  }

  // required int64 gate_serverid = 4;
  if (has_gate_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gate_serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSwitchServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident selfid = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfid());
    }

    // required int64 self_serverid = 2;
    if (has_self_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_serverid());
    }

    // required int64 target_serverid = 3;
    if (has_target_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_serverid());
    }

    // required int64 gate_serverid = 4;
    if (has_gate_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gate_serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSwitchServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSwitchServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSwitchServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSwitchServer::MergeFrom(const AckSwitchServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_self_serverid()) {
      set_self_serverid(from.self_serverid());
    }
    if (from.has_target_serverid()) {
      set_target_serverid(from.target_serverid());
    }
    if (from.has_gate_serverid()) {
      set_gate_serverid(from.gate_serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSwitchServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwitchServer::CopyFrom(const AckSwitchServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwitchServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_selfid()) {
    if (!this->selfid().IsInitialized()) return false;
  }
  return true;
}

void AckSwitchServer::Swap(AckSwitchServer* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(self_serverid_, other->self_serverid_);
    std::swap(target_serverid_, other->target_serverid_);
    std::swap(gate_serverid_, other->gate_serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSwitchServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSwitchServer_descriptor_;
  metadata.reflection = AckSwitchServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfo::kTeamIdFieldNumber;
const int TeamInfo::kCaptainIdFieldNumber;
const int TeamInfo::kTeammemberInfoFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfo::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  captain_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  captain_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete captain_id_;
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_captain_id()) {
      if (captain_id_ != NULL) captain_id_->::NFMsg::Ident::Clear();
    }
  }
  teammemberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_captain_id;
        break;
      }

      // required .NFMsg.Ident captain_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_captain_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_captain_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_teammemberInfo;
        break;
      }

      // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teammemberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teammemberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_teammemberInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // required .NFMsg.Ident captain_id = 2;
  if (has_captain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->captain_id(), output);
  }

  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  for (int i = 0; i < this->teammemberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teammemberinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // required .NFMsg.Ident captain_id = 2;
  if (has_captain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->captain_id(), target);
  }

  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  for (int i = 0; i < this->teammemberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teammemberinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // required .NFMsg.Ident captain_id = 2;
    if (has_captain_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->captain_id());
    }

  }
  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  total_size += 1 * this->teammemberinfo_size();
  for (int i = 0; i < this->teammemberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teammemberinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teammemberinfo_.MergeFrom(from.teammemberinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_captain_id()) {
      mutable_captain_id()->::NFMsg::Ident::MergeFrom(from.captain_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_captain_id()) {
    if (!this->captain_id().IsInitialized()) return false;
  }
  for (int i = 0; i < teammemberinfo_size(); i++) {
    if (!this->teammemberinfo(i).IsInitialized()) return false;
  }
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(captain_id_, other->captain_id_);
    teammemberinfo_.Swap(&other->teammemberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeammemberInfo::kPlayerIdFieldNumber;
const int TeammemberInfo::kNameFieldNumber;
const int TeammemberInfo::kNLevelFieldNumber;
const int TeammemberInfo::kJobFieldNumber;
const int TeammemberInfo::kHeadIconFieldNumber;
#endif  // !_MSC_VER

TeammemberInfo::TeammemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeammemberInfo::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

TeammemberInfo::TeammemberInfo(const TeammemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeammemberInfo::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nlevel_ = 0;
  job_ = 0;
  headicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeammemberInfo::~TeammemberInfo() {
  SharedDtor();
}

void TeammemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (headicon_ != &::google::protobuf::internal::kEmptyString) {
    delete headicon_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void TeammemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeammemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeammemberInfo_descriptor_;
}

const TeammemberInfo& TeammemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

TeammemberInfo* TeammemberInfo::default_instance_ = NULL;

TeammemberInfo* TeammemberInfo::New() const {
  return new TeammemberInfo;
}

void TeammemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    nlevel_ = 0;
    job_ = 0;
    if (has_headicon()) {
      if (headicon_ != &::google::protobuf::internal::kEmptyString) {
        headicon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeammemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nLevel;
        break;
      }

      // required int32 nLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // required int32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_HeadIcon;
        break;
      }

      // required string HeadIcon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeadIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headicon().data(), this->headicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeammemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 nLevel = 3;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlevel(), output);
  }

  // required int32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->job(), output);
  }

  // required string HeadIcon = 5;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headicon().data(), this->headicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->headicon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeammemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 nLevel = 3;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlevel(), target);
  }

  // required int32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->job(), target);
  }

  // required string HeadIcon = 5;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headicon().data(), this->headicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headicon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeammemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 nLevel = 3;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlevel());
    }

    // required int32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // required string HeadIcon = 5;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headicon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeammemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeammemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeammemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeammemberInfo::MergeFrom(const TeammemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeammemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeammemberInfo::CopyFrom(const TeammemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeammemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  return true;
}

void TeammemberInfo::Swap(TeammemberInfo* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(name_, other->name_);
    std::swap(nlevel_, other->nlevel_);
    std::swap(job_, other->job_);
    std::swap(headicon_, other->headicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeammemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeammemberInfo_descriptor_;
  metadata.reflection = TeammemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckCreateTeam::kTeamIdFieldNumber;
const int ReqAckCreateTeam::kXTeamInfoFieldNumber;
#endif  // !_MSC_VER

ReqAckCreateTeam::ReqAckCreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckCreateTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(&::NFMsg::TeamInfo::default_instance());
}

ReqAckCreateTeam::ReqAckCreateTeam(const ReqAckCreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckCreateTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckCreateTeam::~ReqAckCreateTeam() {
  SharedDtor();
}

void ReqAckCreateTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete xteaminfo_;
  }
}

void ReqAckCreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckCreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckCreateTeam_descriptor_;
}

const ReqAckCreateTeam& ReqAckCreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckCreateTeam* ReqAckCreateTeam::default_instance_ = NULL;

ReqAckCreateTeam* ReqAckCreateTeam::New() const {
  return new ReqAckCreateTeam;
}

void ReqAckCreateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::NFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xTeamInfo;
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xteaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckCreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xteaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckCreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // optional .NFMsg.TeamInfo xTeamInfo = 2;
    if (has_xteaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xteaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckCreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckCreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckCreateTeam::MergeFrom(const ReqAckCreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateTeam::CopyFrom(const ReqAckCreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo().IsInitialized()) return false;
  }
  return true;
}

void ReqAckCreateTeam::Swap(ReqAckCreateTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(xteaminfo_, other->xteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckCreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckCreateTeam_descriptor_;
  metadata.reflection = ReqAckCreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckJoinTeam::kTeamIdFieldNumber;
const int ReqAckJoinTeam::kXTeamInfoFieldNumber;
#endif  // !_MSC_VER

ReqAckJoinTeam::ReqAckJoinTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckJoinTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(&::NFMsg::TeamInfo::default_instance());
}

ReqAckJoinTeam::ReqAckJoinTeam(const ReqAckJoinTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckJoinTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckJoinTeam::~ReqAckJoinTeam() {
  SharedDtor();
}

void ReqAckJoinTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete xteaminfo_;
  }
}

void ReqAckJoinTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckJoinTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinTeam_descriptor_;
}

const ReqAckJoinTeam& ReqAckJoinTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckJoinTeam* ReqAckJoinTeam::default_instance_ = NULL;

ReqAckJoinTeam* ReqAckJoinTeam::New() const {
  return new ReqAckJoinTeam;
}

void ReqAckJoinTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::NFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckJoinTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xTeamInfo;
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckJoinTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xteaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckJoinTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xteaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckJoinTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // optional .NFMsg.TeamInfo xTeamInfo = 2;
    if (has_xteaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xteaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckJoinTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckJoinTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckJoinTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckJoinTeam::MergeFrom(const ReqAckJoinTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckJoinTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinTeam::CopyFrom(const ReqAckJoinTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo().IsInitialized()) return false;
  }
  return true;
}

void ReqAckJoinTeam::Swap(ReqAckJoinTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(xteaminfo_, other->xteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckJoinTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckJoinTeam_descriptor_;
  metadata.reflection = ReqAckJoinTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckLeaveTeam::kTeamIdFieldNumber;
const int ReqAckLeaveTeam::kXTeamInfoFieldNumber;
#endif  // !_MSC_VER

ReqAckLeaveTeam::ReqAckLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckLeaveTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(&::NFMsg::TeamInfo::default_instance());
}

ReqAckLeaveTeam::ReqAckLeaveTeam(const ReqAckLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckLeaveTeam::~ReqAckLeaveTeam() {
  SharedDtor();
}

void ReqAckLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete xteaminfo_;
  }
}

void ReqAckLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckLeaveTeam_descriptor_;
}

const ReqAckLeaveTeam& ReqAckLeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckLeaveTeam* ReqAckLeaveTeam::default_instance_ = NULL;

ReqAckLeaveTeam* ReqAckLeaveTeam::New() const {
  return new ReqAckLeaveTeam;
}

void ReqAckLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::NFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xTeamInfo;
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xteaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xteaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // optional .NFMsg.TeamInfo xTeamInfo = 2;
    if (has_xteaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xteaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckLeaveTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckLeaveTeam::MergeFrom(const ReqAckLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveTeam::CopyFrom(const ReqAckLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo().IsInitialized()) return false;
  }
  return true;
}

void ReqAckLeaveTeam::Swap(ReqAckLeaveTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(xteaminfo_, other->xteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckLeaveTeam_descriptor_;
  metadata.reflection = ReqAckLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprTeamMember_EGTeamMemberOprType_descriptor_;
}
bool ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DOWN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_UP;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICK;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_APPOINT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_FIRE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DEMISE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_ACCEPTAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DENYAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICKOUT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MIN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MAX;
const int ReqAckOprTeamMember::EGTeamMemberOprType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqAckOprTeamMember::kTeamIdFieldNumber;
const int ReqAckOprTeamMember::kMemberIdFieldNumber;
const int ReqAckOprTeamMember::kTypeFieldNumber;
const int ReqAckOprTeamMember::kXTeamInfoFieldNumber;
#endif  // !_MSC_VER

ReqAckOprTeamMember::ReqAckOprTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckOprTeamMember::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  member_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(&::NFMsg::TeamInfo::default_instance());
}

ReqAckOprTeamMember::ReqAckOprTeamMember(const ReqAckOprTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckOprTeamMember::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  member_id_ = NULL;
  type_ = 0;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckOprTeamMember::~ReqAckOprTeamMember() {
  SharedDtor();
}

void ReqAckOprTeamMember::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete member_id_;
    delete xteaminfo_;
  }
}

void ReqAckOprTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckOprTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprTeamMember_descriptor_;
}

const ReqAckOprTeamMember& ReqAckOprTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckOprTeamMember* ReqAckOprTeamMember::default_instance_ = NULL;

ReqAckOprTeamMember* ReqAckOprTeamMember::New() const {
  return new ReqAckOprTeamMember;
}

void ReqAckOprTeamMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::NFMsg::Ident::Clear();
    }
    type_ = 0;
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::NFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckOprTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_id;
        break;
      }

      // required .NFMsg.Ident member_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(value)) {
            set_type(static_cast< ::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_xTeamInfo;
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckOprTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // required .NFMsg.Ident member_id = 2;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_id(), output);
  }

  // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 4;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->xteaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckOprTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // required .NFMsg.Ident member_id = 2;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_id(), target);
  }

  // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 4;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->xteaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckOprTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // required .NFMsg.Ident member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

    // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .NFMsg.TeamInfo xTeamInfo = 4;
    if (has_xteaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xteaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckOprTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckOprTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckOprTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckOprTeamMember::MergeFrom(const ReqAckOprTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_member_id()) {
      mutable_member_id()->::NFMsg::Ident::MergeFrom(from.member_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckOprTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprTeamMember::CopyFrom(const ReqAckOprTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo().IsInitialized()) return false;
  }
  return true;
}

void ReqAckOprTeamMember::Swap(ReqAckOprTeamMember* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(type_, other->type_);
    std::swap(xteaminfo_, other->xteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckOprTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckOprTeamMember_descriptor_;
  metadata.reflection = ReqAckOprTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckInviteTeam::kTeamIdFieldNumber;
const int ReqAckInviteTeam::kSelfIdFieldNumber;
const int ReqAckInviteTeam::kInviteTargetIdFieldNumber;
#endif  // !_MSC_VER

ReqAckInviteTeam::ReqAckInviteTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckInviteTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  self_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  invite_target_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckInviteTeam::ReqAckInviteTeam(const ReqAckInviteTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckInviteTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  self_id_ = NULL;
  invite_target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckInviteTeam::~ReqAckInviteTeam() {
  SharedDtor();
}

void ReqAckInviteTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete self_id_;
    delete invite_target_id_;
  }
}

void ReqAckInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckInviteTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckInviteTeam_descriptor_;
}

const ReqAckInviteTeam& ReqAckInviteTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckInviteTeam* ReqAckInviteTeam::default_instance_ = NULL;

ReqAckInviteTeam* ReqAckInviteTeam::New() const {
  return new ReqAckInviteTeam;
}

void ReqAckInviteTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::NFMsg::Ident::Clear();
    }
    if (has_invite_target_id()) {
      if (invite_target_id_ != NULL) invite_target_id_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_self_id;
        break;
      }

      // required .NFMsg.Ident self_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invite_target_id;
        break;
      }

      // required .NFMsg.Ident invite_target_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invite_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_id(), output);
  }

  // required .NFMsg.Ident invite_target_id = 3;
  if (has_invite_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invite_target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckInviteTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_id(), target);
  }

  // required .NFMsg.Ident invite_target_id = 3;
  if (has_invite_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invite_target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckInviteTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // required .NFMsg.Ident self_id = 2;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_id());
    }

    // required .NFMsg.Ident invite_target_id = 3;
    if (has_invite_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invite_target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckInviteTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckInviteTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckInviteTeam::MergeFrom(const ReqAckInviteTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_self_id()) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_invite_target_id()) {
      mutable_invite_target_id()->::NFMsg::Ident::MergeFrom(from.invite_target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckInviteTeam::CopyFrom(const ReqAckInviteTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckInviteTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id().IsInitialized()) return false;
  }
  if (has_invite_target_id()) {
    if (!this->invite_target_id().IsInitialized()) return false;
  }
  return true;
}

void ReqAckInviteTeam::Swap(ReqAckInviteTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(self_id_, other->self_id_);
    std::swap(invite_target_id_, other->invite_target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckInviteTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckInviteTeam_descriptor_;
  metadata.reflection = ReqAckInviteTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTeamEnterEctype::kTeamIdFieldNumber;
const int ReqTeamEnterEctype::kSelfIdFieldNumber;
const int ReqTeamEnterEctype::kNEctypeIDFieldNumber;
const int ReqTeamEnterEctype::kNGroupIDFieldNumber;
const int ReqTeamEnterEctype::kNResultFieldNumber;
const int ReqTeamEnterEctype::kNServerIDFieldNumber;
#endif  // !_MSC_VER

ReqTeamEnterEctype::ReqTeamEnterEctype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTeamEnterEctype::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  self_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqTeamEnterEctype::ReqTeamEnterEctype(const ReqTeamEnterEctype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTeamEnterEctype::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  self_id_ = NULL;
  nectypeid_ = 0;
  ngroupid_ = 0;
  nresult_ = 0;
  nserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTeamEnterEctype::~ReqTeamEnterEctype() {
  SharedDtor();
}

void ReqTeamEnterEctype::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete self_id_;
  }
}

void ReqTeamEnterEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTeamEnterEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTeamEnterEctype_descriptor_;
}

const ReqTeamEnterEctype& ReqTeamEnterEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqTeamEnterEctype* ReqTeamEnterEctype::default_instance_ = NULL;

ReqTeamEnterEctype* ReqTeamEnterEctype::New() const {
  return new ReqTeamEnterEctype;
}

void ReqTeamEnterEctype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::NFMsg::Ident::Clear();
    }
    nectypeid_ = 0;
    ngroupid_ = 0;
    nresult_ = 0;
    nserverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_self_id;
        break;
      }

      // required .NFMsg.Ident self_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nEctypeID;
        break;
      }

      // optional int32 nEctypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nEctypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
          set_has_nectypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nGroupID;
        break;
      }

      // optional int32 nGroupID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nResult;
        break;
      }

      // optional int32 nResult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nServerID;
        break;
      }

      // optional int32 nServerID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserverid_)));
          set_has_nserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_id(), output);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  // optional int32 nServerID = 6;
  if (has_nserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTeamEnterEctype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_id(), target);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  // optional int32 nServerID = 6;
  if (has_nserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTeamEnterEctype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // required .NFMsg.Ident self_id = 2;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_id());
    }

    // optional int32 nEctypeID = 3;
    if (has_nectypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nectypeid());
    }

    // optional int32 nGroupID = 4;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

    // optional int32 nResult = 5;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

    // optional int32 nServerID = 6;
    if (has_nserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTeamEnterEctype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTeamEnterEctype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTeamEnterEctype::MergeFrom(const ReqTeamEnterEctype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_self_id()) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_nectypeid()) {
      set_nectypeid(from.nectypeid());
    }
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
    if (from.has_nserverid()) {
      set_nserverid(from.nserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTeamEnterEctype::CopyFrom(const ReqTeamEnterEctype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTeamEnterEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id().IsInitialized()) return false;
  }
  return true;
}

void ReqTeamEnterEctype::Swap(ReqTeamEnterEctype* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(self_id_, other->self_id_);
    std::swap(nectypeid_, other->nectypeid_);
    std::swap(ngroupid_, other->ngroupid_);
    std::swap(nresult_, other->nresult_);
    std::swap(nserverid_, other->nserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTeamEnterEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTeamEnterEctype_descriptor_;
  metadata.reflection = ReqTeamEnterEctype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckTeamEnterEctype::kTeamIdFieldNumber;
const int AckTeamEnterEctype::kSelfIdFieldNumber;
const int AckTeamEnterEctype::kNEctypeIDFieldNumber;
const int AckTeamEnterEctype::kNGroupIDFieldNumber;
const int AckTeamEnterEctype::kNResultFieldNumber;
#endif  // !_MSC_VER

AckTeamEnterEctype::AckTeamEnterEctype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckTeamEnterEctype::InitAsDefaultInstance() {
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  self_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

AckTeamEnterEctype::AckTeamEnterEctype(const AckTeamEnterEctype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckTeamEnterEctype::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  self_id_ = NULL;
  nectypeid_ = 0;
  ngroupid_ = 0;
  nresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckTeamEnterEctype::~AckTeamEnterEctype() {
  SharedDtor();
}

void AckTeamEnterEctype::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete self_id_;
  }
}

void AckTeamEnterEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckTeamEnterEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckTeamEnterEctype_descriptor_;
}

const AckTeamEnterEctype& AckTeamEnterEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckTeamEnterEctype* AckTeamEnterEctype::default_instance_ = NULL;

AckTeamEnterEctype* AckTeamEnterEctype::New() const {
  return new AckTeamEnterEctype;
}

void AckTeamEnterEctype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::NFMsg::Ident::Clear();
    }
    nectypeid_ = 0;
    ngroupid_ = 0;
    nresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_self_id;
        break;
      }

      // required .NFMsg.Ident self_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nEctypeID;
        break;
      }

      // optional int32 nEctypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nEctypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
          set_has_nectypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nGroupID;
        break;
      }

      // optional int32 nGroupID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nResult;
        break;
      }

      // optional int32 nResult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_id(), output);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_id(), output);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckTeamEnterEctype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_id(), target);
  }

  // required .NFMsg.Ident self_id = 2;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_id(), target);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckTeamEnterEctype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

    // required .NFMsg.Ident self_id = 2;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_id());
    }

    // optional int32 nEctypeID = 3;
    if (has_nectypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nectypeid());
    }

    // optional int32 nGroupID = 4;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

    // optional int32 nResult = 5;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckTeamEnterEctype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckTeamEnterEctype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckTeamEnterEctype::MergeFrom(const AckTeamEnterEctype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_self_id()) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_nectypeid()) {
      set_nectypeid(from.nectypeid());
    }
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTeamEnterEctype::CopyFrom(const AckTeamEnterEctype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTeamEnterEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id().IsInitialized()) return false;
  }
  return true;
}

void AckTeamEnterEctype::Swap(AckTeamEnterEctype* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(self_id_, other->self_id_);
    std::swap(nectypeid_, other->nectypeid_);
    std::swap(ngroupid_, other->ngroupid_);
    std::swap(nresult_, other->nresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckTeamEnterEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckTeamEnterEctype_descriptor_;
  metadata.reflection = AckTeamEnterEctype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridGuildBaseInfo::kIdFieldNumber;
const int GridGuildBaseInfo::kLevelFieldNumber;
const int GridGuildBaseInfo::kCountFieldNumber;
const int GridGuildBaseInfo::kResourceFieldNumber;
const int GridGuildBaseInfo::kIconFieldNumber;
#endif  // !_MSC_VER

GridGuildBaseInfo::GridGuildBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridGuildBaseInfo::InitAsDefaultInstance() {
  id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

GridGuildBaseInfo::GridGuildBaseInfo(const GridGuildBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridGuildBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  level_ = 0;
  count_ = 0;
  resource_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridGuildBaseInfo::~GridGuildBaseInfo() {
  SharedDtor();
}

void GridGuildBaseInfo::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void GridGuildBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridGuildBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridGuildBaseInfo_descriptor_;
}

const GridGuildBaseInfo& GridGuildBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

GridGuildBaseInfo* GridGuildBaseInfo::default_instance_ = NULL;

GridGuildBaseInfo* GridGuildBaseInfo::New() const {
  return new GridGuildBaseInfo;
}

void GridGuildBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::NFMsg::Ident::Clear();
    }
    level_ = 0;
    count_ = 0;
    resource_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridGuildBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resource;
        break;
      }

      // required int32 resource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }

      // required bytes icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridGuildBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // required int32 resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resource(), output);
  }

  // required bytes icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridGuildBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // required int32 resource = 4;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resource(), target);
  }

  // required bytes icon = 5;
  if (has_icon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridGuildBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 resource = 4;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource());
    }

    // required bytes icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridGuildBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridGuildBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridGuildBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridGuildBaseInfo::MergeFrom(const GridGuildBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::NFMsg::Ident::MergeFrom(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridGuildBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridGuildBaseInfo::CopyFrom(const GridGuildBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridGuildBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void GridGuildBaseInfo::Swap(GridGuildBaseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(count_, other->count_);
    std::swap(resource_, other->resource_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridGuildBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridGuildBaseInfo_descriptor_;
  metadata.reflection = GridGuildBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBigMapGridInfo::kMapTitleIdFieldNumber;
#endif  // !_MSC_VER

ReqBigMapGridInfo::ReqBigMapGridInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBigMapGridInfo::InitAsDefaultInstance() {
}

ReqBigMapGridInfo::ReqBigMapGridInfo(const ReqBigMapGridInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBigMapGridInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBigMapGridInfo::~ReqBigMapGridInfo() {
  SharedDtor();
}

void ReqBigMapGridInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBigMapGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBigMapGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBigMapGridInfo_descriptor_;
}

const ReqBigMapGridInfo& ReqBigMapGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqBigMapGridInfo* ReqBigMapGridInfo::default_instance_ = NULL;

ReqBigMapGridInfo* ReqBigMapGridInfo::New() const {
  return new ReqBigMapGridInfo;
}

void ReqBigMapGridInfo::Clear() {
  map_title_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBigMapGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_title_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_title_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBigMapGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes map_title_id = 1;
  for (int i = 0; i < this->map_title_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBigMapGridInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes map_title_id = 1;
  for (int i = 0; i < this->map_title_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->map_title_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBigMapGridInfo::ByteSize() const {
  int total_size = 0;

  // repeated bytes map_title_id = 1;
  total_size += 1 * this->map_title_id_size();
  for (int i = 0; i < this->map_title_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->map_title_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBigMapGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBigMapGridInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBigMapGridInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBigMapGridInfo::MergeFrom(const ReqBigMapGridInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_title_id_.MergeFrom(from.map_title_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBigMapGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapGridInfo::CopyFrom(const ReqBigMapGridInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapGridInfo::IsInitialized() const {

  return true;
}

void ReqBigMapGridInfo::Swap(ReqBigMapGridInfo* other) {
  if (other != this) {
    map_title_id_.Swap(&other->map_title_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBigMapGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBigMapGridInfo_descriptor_;
  metadata.reflection = ReqBigMapGridInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigMapGridBaseInfo::kIdFieldNumber;
const int BigMapGridBaseInfo::kGuildInfoFieldNumber;
const int BigMapGridBaseInfo::kKingwarTimeFieldNumber;
const int BigMapGridBaseInfo::kKingwarrerFieldNumber;
const int BigMapGridBaseInfo::kHurtingTimeFieldNumber;
const int BigMapGridBaseInfo::kHurterFieldNumber;
#endif  // !_MSC_VER

BigMapGridBaseInfo::BigMapGridBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigMapGridBaseInfo::InitAsDefaultInstance() {
  guild_info_ = const_cast< ::NFMsg::GridGuildBaseInfo*>(&::NFMsg::GridGuildBaseInfo::default_instance());
  kingwarrer_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  hurter_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

BigMapGridBaseInfo::BigMapGridBaseInfo(const BigMapGridBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigMapGridBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_info_ = NULL;
  kingwar_time_ = 0;
  kingwarrer_ = NULL;
  hurting_time_ = 0;
  hurter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapGridBaseInfo::~BigMapGridBaseInfo() {
  SharedDtor();
}

void BigMapGridBaseInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete guild_info_;
    delete kingwarrer_;
    delete hurter_;
  }
}

void BigMapGridBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapGridBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapGridBaseInfo_descriptor_;
}

const BigMapGridBaseInfo& BigMapGridBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

BigMapGridBaseInfo* BigMapGridBaseInfo::default_instance_ = NULL;

BigMapGridBaseInfo* BigMapGridBaseInfo::New() const {
  return new BigMapGridBaseInfo;
}

void BigMapGridBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_guild_info()) {
      if (guild_info_ != NULL) guild_info_->::NFMsg::GridGuildBaseInfo::Clear();
    }
    kingwar_time_ = 0;
    if (has_kingwarrer()) {
      if (kingwarrer_ != NULL) kingwarrer_->::NFMsg::Ident::Clear();
    }
    hurting_time_ = 0;
    if (has_hurter()) {
      if (hurter_ != NULL) hurter_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigMapGridBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_info;
        break;
      }

      // required .NFMsg.GridGuildBaseInfo guild_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_kingwar_time;
        break;
      }

      // required int32 kingwar_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kingwar_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kingwar_time_)));
          set_has_kingwar_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_kingwarrer;
        break;
      }

      // required .NFMsg.Ident kingwarrer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kingwarrer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kingwarrer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_hurting_time;
        break;
      }

      // required int32 hurting_time = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurting_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurting_time_)));
          set_has_hurting_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_hurter;
        break;
      }

      // required .NFMsg.Ident hurter = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hurter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigMapGridBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  // required .NFMsg.GridGuildBaseInfo guild_info = 2;
  if (has_guild_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild_info(), output);
  }

  // required int32 kingwar_time = 10;
  if (has_kingwar_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->kingwar_time(), output);
  }

  // required .NFMsg.Ident kingwarrer = 11;
  if (has_kingwarrer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->kingwarrer(), output);
  }

  // required int32 hurting_time = 20;
  if (has_hurting_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->hurting_time(), output);
  }

  // required .NFMsg.Ident hurter = 21;
  if (has_hurter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->hurter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigMapGridBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // required .NFMsg.GridGuildBaseInfo guild_info = 2;
  if (has_guild_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild_info(), target);
  }

  // required int32 kingwar_time = 10;
  if (has_kingwar_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->kingwar_time(), target);
  }

  // required .NFMsg.Ident kingwarrer = 11;
  if (has_kingwarrer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->kingwarrer(), target);
  }

  // required int32 hurting_time = 20;
  if (has_hurting_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->hurting_time(), target);
  }

  // required .NFMsg.Ident hurter = 21;
  if (has_hurter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->hurter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigMapGridBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // required .NFMsg.GridGuildBaseInfo guild_info = 2;
    if (has_guild_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_info());
    }

    // required int32 kingwar_time = 10;
    if (has_kingwar_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kingwar_time());
    }

    // required .NFMsg.Ident kingwarrer = 11;
    if (has_kingwarrer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kingwarrer());
    }

    // required int32 hurting_time = 20;
    if (has_hurting_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurting_time());
    }

    // required .NFMsg.Ident hurter = 21;
    if (has_hurter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hurter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapGridBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigMapGridBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigMapGridBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigMapGridBaseInfo::MergeFrom(const BigMapGridBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_guild_info()) {
      mutable_guild_info()->::NFMsg::GridGuildBaseInfo::MergeFrom(from.guild_info());
    }
    if (from.has_kingwar_time()) {
      set_kingwar_time(from.kingwar_time());
    }
    if (from.has_kingwarrer()) {
      mutable_kingwarrer()->::NFMsg::Ident::MergeFrom(from.kingwarrer());
    }
    if (from.has_hurting_time()) {
      set_hurting_time(from.hurting_time());
    }
    if (from.has_hurter()) {
      mutable_hurter()->::NFMsg::Ident::MergeFrom(from.hurter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigMapGridBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridBaseInfo::CopyFrom(const BigMapGridBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_guild_info()) {
    if (!this->guild_info().IsInitialized()) return false;
  }
  if (has_kingwarrer()) {
    if (!this->kingwarrer().IsInitialized()) return false;
  }
  if (has_hurter()) {
    if (!this->hurter().IsInitialized()) return false;
  }
  return true;
}

void BigMapGridBaseInfo::Swap(BigMapGridBaseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(guild_info_, other->guild_info_);
    std::swap(kingwar_time_, other->kingwar_time_);
    std::swap(kingwarrer_, other->kingwarrer_);
    std::swap(hurting_time_, other->hurting_time_);
    std::swap(hurter_, other->hurter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigMapGridBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapGridBaseInfo_descriptor_;
  metadata.reflection = BigMapGridBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigMapLeaveMsg::kOwnerFieldNumber;
const int BigMapLeaveMsg::kOwnerNameFieldNumber;
const int BigMapLeaveMsg::kMsgDataFieldNumber;
const int BigMapLeaveMsg::kMsgTimeFieldNumber;
const int BigMapLeaveMsg::kOwnerLevelFieldNumber;
#endif  // !_MSC_VER

BigMapLeaveMsg::BigMapLeaveMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigMapLeaveMsg::InitAsDefaultInstance() {
  owner_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

BigMapLeaveMsg::BigMapLeaveMsg(const BigMapLeaveMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigMapLeaveMsg::SharedCtor() {
  _cached_size_ = 0;
  owner_ = NULL;
  owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_time_ = 0;
  owner_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapLeaveMsg::~BigMapLeaveMsg() {
  SharedDtor();
}

void BigMapLeaveMsg::SharedDtor() {
  if (owner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_name_;
  }
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
    delete owner_;
  }
}

void BigMapLeaveMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapLeaveMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapLeaveMsg_descriptor_;
}

const BigMapLeaveMsg& BigMapLeaveMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

BigMapLeaveMsg* BigMapLeaveMsg::default_instance_ = NULL;

BigMapLeaveMsg* BigMapLeaveMsg::New() const {
  return new BigMapLeaveMsg;
}

void BigMapLeaveMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_owner()) {
      if (owner_ != NULL) owner_->::NFMsg::Ident::Clear();
    }
    if (has_owner_name()) {
      if (owner_name_ != &::google::protobuf::internal::kEmptyString) {
        owner_name_->clear();
      }
    }
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
    msg_time_ = 0;
    owner_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigMapLeaveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_owner_name;
        break;
      }

      // required bytes owner_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msg_time;
        break;
      }

      // required int32 msg_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_time_)));
          set_has_msg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_owner_level;
        break;
      }

      // required int32 owner_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_level_)));
          set_has_owner_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigMapLeaveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->owner(), output);
  }

  // required bytes owner_name = 2;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->owner_name(), output);
  }

  // required bytes msg_data = 3;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg_data(), output);
  }

  // required int32 msg_time = 4;
  if (has_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_time(), output);
  }

  // required int32 owner_level = 5;
  if (has_owner_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->owner_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigMapLeaveMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->owner(), target);
  }

  // required bytes owner_name = 2;
  if (has_owner_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->owner_name(), target);
  }

  // required bytes msg_data = 3;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg_data(), target);
  }

  // required int32 msg_time = 4;
  if (has_msg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msg_time(), target);
  }

  // required int32 owner_level = 5;
  if (has_owner_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->owner_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigMapLeaveMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident owner = 1;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }

    // required bytes owner_name = 2;
    if (has_owner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->owner_name());
    }

    // required bytes msg_data = 3;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // required int32 msg_time = 4;
    if (has_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_time());
    }

    // required int32 owner_level = 5;
    if (has_owner_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapLeaveMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigMapLeaveMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigMapLeaveMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigMapLeaveMsg::MergeFrom(const BigMapLeaveMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      mutable_owner()->::NFMsg::Ident::MergeFrom(from.owner());
    }
    if (from.has_owner_name()) {
      set_owner_name(from.owner_name());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
    if (from.has_msg_time()) {
      set_msg_time(from.msg_time());
    }
    if (from.has_owner_level()) {
      set_owner_level(from.owner_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigMapLeaveMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapLeaveMsg::CopyFrom(const BigMapLeaveMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapLeaveMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_owner()) {
    if (!this->owner().IsInitialized()) return false;
  }
  return true;
}

void BigMapLeaveMsg::Swap(BigMapLeaveMsg* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(owner_name_, other->owner_name_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(msg_time_, other->msg_time_);
    std::swap(owner_level_, other->owner_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigMapLeaveMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapLeaveMsg_descriptor_;
  metadata.reflection = BigMapLeaveMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigMapWarHistory::kRedInfoFieldNumber;
const int BigMapWarHistory::kBlueInfoFieldNumber;
const int BigMapWarHistory::kWinnerIdFieldNumber;
const int BigMapWarHistory::kWarTimeFieldNumber;
#endif  // !_MSC_VER

BigMapWarHistory::BigMapWarHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigMapWarHistory::InitAsDefaultInstance() {
  red_info_ = const_cast< ::NFMsg::GridGuildBaseInfo*>(&::NFMsg::GridGuildBaseInfo::default_instance());
  blue_info_ = const_cast< ::NFMsg::GridGuildBaseInfo*>(&::NFMsg::GridGuildBaseInfo::default_instance());
  winner_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

BigMapWarHistory::BigMapWarHistory(const BigMapWarHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigMapWarHistory::SharedCtor() {
  _cached_size_ = 0;
  red_info_ = NULL;
  blue_info_ = NULL;
  winner_id_ = NULL;
  war_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapWarHistory::~BigMapWarHistory() {
  SharedDtor();
}

void BigMapWarHistory::SharedDtor() {
  if (this != default_instance_) {
    delete red_info_;
    delete blue_info_;
    delete winner_id_;
  }
}

void BigMapWarHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapWarHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapWarHistory_descriptor_;
}

const BigMapWarHistory& BigMapWarHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

BigMapWarHistory* BigMapWarHistory::default_instance_ = NULL;

BigMapWarHistory* BigMapWarHistory::New() const {
  return new BigMapWarHistory;
}

void BigMapWarHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_red_info()) {
      if (red_info_ != NULL) red_info_->::NFMsg::GridGuildBaseInfo::Clear();
    }
    if (has_blue_info()) {
      if (blue_info_ != NULL) blue_info_->::NFMsg::GridGuildBaseInfo::Clear();
    }
    if (has_winner_id()) {
      if (winner_id_ != NULL) winner_id_->::NFMsg::Ident::Clear();
    }
    war_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigMapWarHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.GridGuildBaseInfo red_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_red_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blue_info;
        break;
      }

      // required .NFMsg.GridGuildBaseInfo blue_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blue_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_winner_id;
        break;
      }

      // required .NFMsg.Ident winner_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winner_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_war_time;
        break;
      }

      // required int32 war_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_war_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &war_time_)));
          set_has_war_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigMapWarHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.GridGuildBaseInfo red_info = 1;
  if (has_red_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->red_info(), output);
  }

  // required .NFMsg.GridGuildBaseInfo blue_info = 2;
  if (has_blue_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blue_info(), output);
  }

  // required .NFMsg.Ident winner_id = 10;
  if (has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->winner_id(), output);
  }

  // required int32 war_time = 11;
  if (has_war_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->war_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigMapWarHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.GridGuildBaseInfo red_info = 1;
  if (has_red_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->red_info(), target);
  }

  // required .NFMsg.GridGuildBaseInfo blue_info = 2;
  if (has_blue_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blue_info(), target);
  }

  // required .NFMsg.Ident winner_id = 10;
  if (has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->winner_id(), target);
  }

  // required int32 war_time = 11;
  if (has_war_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->war_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigMapWarHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.GridGuildBaseInfo red_info = 1;
    if (has_red_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->red_info());
    }

    // required .NFMsg.GridGuildBaseInfo blue_info = 2;
    if (has_blue_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blue_info());
    }

    // required .NFMsg.Ident winner_id = 10;
    if (has_winner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winner_id());
    }

    // required int32 war_time = 11;
    if (has_war_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->war_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapWarHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigMapWarHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigMapWarHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigMapWarHistory::MergeFrom(const BigMapWarHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_red_info()) {
      mutable_red_info()->::NFMsg::GridGuildBaseInfo::MergeFrom(from.red_info());
    }
    if (from.has_blue_info()) {
      mutable_blue_info()->::NFMsg::GridGuildBaseInfo::MergeFrom(from.blue_info());
    }
    if (from.has_winner_id()) {
      mutable_winner_id()->::NFMsg::Ident::MergeFrom(from.winner_id());
    }
    if (from.has_war_time()) {
      set_war_time(from.war_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigMapWarHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapWarHistory::CopyFrom(const BigMapWarHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapWarHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_red_info()) {
    if (!this->red_info().IsInitialized()) return false;
  }
  if (has_blue_info()) {
    if (!this->blue_info().IsInitialized()) return false;
  }
  if (has_winner_id()) {
    if (!this->winner_id().IsInitialized()) return false;
  }
  return true;
}

void BigMapWarHistory::Swap(BigMapWarHistory* other) {
  if (other != this) {
    std::swap(red_info_, other->red_info_);
    std::swap(blue_info_, other->blue_info_);
    std::swap(winner_id_, other->winner_id_);
    std::swap(war_time_, other->war_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigMapWarHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapWarHistory_descriptor_;
  metadata.reflection = BigMapWarHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigMapGridDetailInfo::kGridBaseInfoFieldNumber;
const int BigMapGridDetailInfo::kStayGuidListFieldNumber;
const int BigMapGridDetailInfo::kLeaveMsgFieldNumber;
const int BigMapGridDetailInfo::kWarHistoryFieldNumber;
#endif  // !_MSC_VER

BigMapGridDetailInfo::BigMapGridDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigMapGridDetailInfo::InitAsDefaultInstance() {
  grid_base_info_ = const_cast< ::NFMsg::BigMapGridBaseInfo*>(&::NFMsg::BigMapGridBaseInfo::default_instance());
}

BigMapGridDetailInfo::BigMapGridDetailInfo(const BigMapGridDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigMapGridDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  grid_base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapGridDetailInfo::~BigMapGridDetailInfo() {
  SharedDtor();
}

void BigMapGridDetailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete grid_base_info_;
  }
}

void BigMapGridDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapGridDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapGridDetailInfo_descriptor_;
}

const BigMapGridDetailInfo& BigMapGridDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

BigMapGridDetailInfo* BigMapGridDetailInfo::default_instance_ = NULL;

BigMapGridDetailInfo* BigMapGridDetailInfo::New() const {
  return new BigMapGridDetailInfo;
}

void BigMapGridDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_grid_base_info()) {
      if (grid_base_info_ != NULL) grid_base_info_->::NFMsg::BigMapGridBaseInfo::Clear();
    }
  }
  stay_guid_list_.Clear();
  leave_msg_.Clear();
  war_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigMapGridDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stay_guid_list;
        break;
      }

      // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stay_guid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stay_guid_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stay_guid_list;
        if (input->ExpectTag(26)) goto parse_leave_msg;
        break;
      }

      // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leave_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leave_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leave_msg;
        if (input->ExpectTag(34)) goto parse_war_history;
        break;
      }

      // repeated .NFMsg.BigMapWarHistory war_history = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_war_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_war_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_war_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigMapGridDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (has_grid_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grid_base_info(), output);
  }

  // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
  for (int i = 0; i < this->stay_guid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stay_guid_list(i), output);
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  for (int i = 0; i < this->leave_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leave_msg(i), output);
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  for (int i = 0; i < this->war_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->war_history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigMapGridDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (has_grid_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grid_base_info(), target);
  }

  // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
  for (int i = 0; i < this->stay_guid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stay_guid_list(i), target);
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  for (int i = 0; i < this->leave_msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leave_msg(i), target);
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  for (int i = 0; i < this->war_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->war_history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigMapGridDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
    if (has_grid_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grid_base_info());
    }

  }
  // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
  total_size += 1 * this->stay_guid_list_size();
  for (int i = 0; i < this->stay_guid_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stay_guid_list(i));
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  total_size += 1 * this->leave_msg_size();
  for (int i = 0; i < this->leave_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leave_msg(i));
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  total_size += 1 * this->war_history_size();
  for (int i = 0; i < this->war_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->war_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapGridDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigMapGridDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigMapGridDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigMapGridDetailInfo::MergeFrom(const BigMapGridDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stay_guid_list_.MergeFrom(from.stay_guid_list_);
  leave_msg_.MergeFrom(from.leave_msg_);
  war_history_.MergeFrom(from.war_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_base_info()) {
      mutable_grid_base_info()->::NFMsg::BigMapGridBaseInfo::MergeFrom(from.grid_base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigMapGridDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridDetailInfo::CopyFrom(const BigMapGridDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridDetailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_grid_base_info()) {
    if (!this->grid_base_info().IsInitialized()) return false;
  }
  for (int i = 0; i < stay_guid_list_size(); i++) {
    if (!this->stay_guid_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < leave_msg_size(); i++) {
    if (!this->leave_msg(i).IsInitialized()) return false;
  }
  for (int i = 0; i < war_history_size(); i++) {
    if (!this->war_history(i).IsInitialized()) return false;
  }
  return true;
}

void BigMapGridDetailInfo::Swap(BigMapGridDetailInfo* other) {
  if (other != this) {
    std::swap(grid_base_info_, other->grid_base_info_);
    stay_guid_list_.Swap(&other->stay_guid_list_);
    leave_msg_.Swap(&other->leave_msg_);
    war_history_.Swap(&other->war_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigMapGridDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapGridDetailInfo_descriptor_;
  metadata.reflection = BigMapGridDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBigMapGridInfo::kMapDataFieldNumber;
#endif  // !_MSC_VER

AckBigMapGridInfo::AckBigMapGridInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBigMapGridInfo::InitAsDefaultInstance() {
}

AckBigMapGridInfo::AckBigMapGridInfo(const AckBigMapGridInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBigMapGridInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBigMapGridInfo::~AckBigMapGridInfo() {
  SharedDtor();
}

void AckBigMapGridInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBigMapGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBigMapGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBigMapGridInfo_descriptor_;
}

const AckBigMapGridInfo& AckBigMapGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckBigMapGridInfo* AckBigMapGridInfo::default_instance_ = NULL;

AckBigMapGridInfo* AckBigMapGridInfo::New() const {
  return new AckBigMapGridInfo;
}

void AckBigMapGridInfo::Clear() {
  map_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBigMapGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBigMapGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  for (int i = 0; i < this->map_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBigMapGridInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  for (int i = 0; i < this->map_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBigMapGridInfo::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  total_size += 1 * this->map_data_size();
  for (int i = 0; i < this->map_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBigMapGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBigMapGridInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBigMapGridInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBigMapGridInfo::MergeFrom(const AckBigMapGridInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_data_.MergeFrom(from.map_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBigMapGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapGridInfo::CopyFrom(const AckBigMapGridInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapGridInfo::IsInitialized() const {

  for (int i = 0; i < map_data_size(); i++) {
    if (!this->map_data(i).IsInitialized()) return false;
  }
  return true;
}

void AckBigMapGridInfo::Swap(AckBigMapGridInfo* other) {
  if (other != this) {
    map_data_.Swap(&other->map_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBigMapGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBigMapGridInfo_descriptor_;
  metadata.reflection = AckBigMapGridInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqBigMapInfo::ReqBigMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBigMapInfo::InitAsDefaultInstance() {
}

ReqBigMapInfo::ReqBigMapInfo(const ReqBigMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBigMapInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBigMapInfo::~ReqBigMapInfo() {
  SharedDtor();
}

void ReqBigMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBigMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBigMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBigMapInfo_descriptor_;
}

const ReqBigMapInfo& ReqBigMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqBigMapInfo* ReqBigMapInfo::default_instance_ = NULL;

ReqBigMapInfo* ReqBigMapInfo::New() const {
  return new ReqBigMapInfo;
}

void ReqBigMapInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBigMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqBigMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBigMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBigMapInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBigMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBigMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBigMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBigMapInfo::MergeFrom(const ReqBigMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBigMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapInfo::CopyFrom(const ReqBigMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapInfo::IsInitialized() const {

  return true;
}

void ReqBigMapInfo::Swap(ReqBigMapInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBigMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBigMapInfo_descriptor_;
  metadata.reflection = ReqBigMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBigMapInfo::kGridBaseInfoFieldNumber;
#endif  // !_MSC_VER

AckBigMapInfo::AckBigMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBigMapInfo::InitAsDefaultInstance() {
}

AckBigMapInfo::AckBigMapInfo(const AckBigMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBigMapInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBigMapInfo::~AckBigMapInfo() {
  SharedDtor();
}

void AckBigMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBigMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBigMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBigMapInfo_descriptor_;
}

const AckBigMapInfo& AckBigMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckBigMapInfo* AckBigMapInfo::default_instance_ = NULL;

AckBigMapInfo* AckBigMapInfo::New() const {
  return new AckBigMapInfo;
}

void AckBigMapInfo::Clear() {
  grid_base_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBigMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grid_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_grid_base_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBigMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (int i = 0; i < this->grid_base_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grid_base_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBigMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (int i = 0; i < this->grid_base_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grid_base_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBigMapInfo::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  total_size += 1 * this->grid_base_info_size();
  for (int i = 0; i < this->grid_base_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grid_base_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBigMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBigMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBigMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBigMapInfo::MergeFrom(const AckBigMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_base_info_.MergeFrom(from.grid_base_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBigMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapInfo::CopyFrom(const AckBigMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapInfo::IsInitialized() const {

  for (int i = 0; i < grid_base_info_size(); i++) {
    if (!this->grid_base_info(i).IsInitialized()) return false;
  }
  return true;
}

void AckBigMapInfo::Swap(AckBigMapInfo* other) {
  if (other != this) {
    grid_base_info_.Swap(&other->grid_base_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBigMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBigMapInfo_descriptor_;
  metadata.reflection = AckBigMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHoldMapGrid::kMapTitleIdFieldNumber;
const int ReqHoldMapGrid::kGuildIdFieldNumber;
#endif  // !_MSC_VER

ReqHoldMapGrid::ReqHoldMapGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHoldMapGrid::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqHoldMapGrid::ReqHoldMapGrid(const ReqHoldMapGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHoldMapGrid::SharedCtor() {
  _cached_size_ = 0;
  map_title_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHoldMapGrid::~ReqHoldMapGrid() {
  SharedDtor();
}

void ReqHoldMapGrid::SharedDtor() {
  if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_id_;
  }
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void ReqHoldMapGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHoldMapGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHoldMapGrid_descriptor_;
}

const ReqHoldMapGrid& ReqHoldMapGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqHoldMapGrid* ReqHoldMapGrid::default_instance_ = NULL;

ReqHoldMapGrid* ReqHoldMapGrid::New() const {
  return new ReqHoldMapGrid;
}

void ReqHoldMapGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title_id()) {
      if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
        map_title_id_->clear();
      }
    }
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHoldMapGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_id;
        break;
      }

      // required .NFMsg.Ident guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHoldMapGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(), output);
  }

  // required .NFMsg.Ident guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHoldMapGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  // required .NFMsg.Ident guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHoldMapGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title_id = 1;
    if (has_map_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title_id());
    }

    // required .NFMsg.Ident guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHoldMapGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHoldMapGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHoldMapGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHoldMapGrid::MergeFrom(const ReqHoldMapGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_map_title_id(from.map_title_id());
    }
    if (from.has_guild_id()) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHoldMapGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHoldMapGrid::CopyFrom(const ReqHoldMapGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHoldMapGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id().IsInitialized()) return false;
  }
  return true;
}

void ReqHoldMapGrid::Swap(ReqHoldMapGrid* other) {
  if (other != this) {
    std::swap(map_title_id_, other->map_title_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHoldMapGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHoldMapGrid_descriptor_;
  metadata.reflection = ReqHoldMapGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckHoldMapGrid::AckHoldMapGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckHoldMapGrid::InitAsDefaultInstance() {
}

AckHoldMapGrid::AckHoldMapGrid(const AckHoldMapGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckHoldMapGrid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHoldMapGrid::~AckHoldMapGrid() {
  SharedDtor();
}

void AckHoldMapGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckHoldMapGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHoldMapGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHoldMapGrid_descriptor_;
}

const AckHoldMapGrid& AckHoldMapGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckHoldMapGrid* AckHoldMapGrid::default_instance_ = NULL;

AckHoldMapGrid* AckHoldMapGrid::New() const {
  return new AckHoldMapGrid;
}

void AckHoldMapGrid::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHoldMapGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckHoldMapGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckHoldMapGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckHoldMapGrid::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHoldMapGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHoldMapGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHoldMapGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHoldMapGrid::MergeFrom(const AckHoldMapGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHoldMapGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHoldMapGrid::CopyFrom(const AckHoldMapGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHoldMapGrid::IsInitialized() const {

  return true;
}

void AckHoldMapGrid::Swap(AckHoldMapGrid* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHoldMapGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHoldMapGrid_descriptor_;
  metadata.reflection = AckHoldMapGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLeaveMapMsg::kMapTitleIdFieldNumber;
const int ReqLeaveMapMsg::kLeaveMsgFieldNumber;
#endif  // !_MSC_VER

ReqLeaveMapMsg::ReqLeaveMapMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLeaveMapMsg::InitAsDefaultInstance() {
  leave_msg_ = const_cast< ::NFMsg::BigMapLeaveMsg*>(&::NFMsg::BigMapLeaveMsg::default_instance());
}

ReqLeaveMapMsg::ReqLeaveMapMsg(const ReqLeaveMapMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLeaveMapMsg::SharedCtor() {
  _cached_size_ = 0;
  map_title_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leave_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLeaveMapMsg::~ReqLeaveMapMsg() {
  SharedDtor();
}

void ReqLeaveMapMsg::SharedDtor() {
  if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_id_;
  }
  if (this != default_instance_) {
    delete leave_msg_;
  }
}

void ReqLeaveMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveMapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLeaveMapMsg_descriptor_;
}

const ReqLeaveMapMsg& ReqLeaveMapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqLeaveMapMsg* ReqLeaveMapMsg::default_instance_ = NULL;

ReqLeaveMapMsg* ReqLeaveMapMsg::New() const {
  return new ReqLeaveMapMsg;
}

void ReqLeaveMapMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title_id()) {
      if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
        map_title_id_->clear();
      }
    }
    if (has_leave_msg()) {
      if (leave_msg_ != NULL) leave_msg_->::NFMsg::BigMapLeaveMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLeaveMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leave_msg;
        break;
      }

      // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leave_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leave_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLeaveMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(), output);
  }

  // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
  if (has_leave_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leave_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLeaveMapMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
  if (has_leave_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leave_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLeaveMapMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title_id = 1;
    if (has_map_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title_id());
    }

    // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
    if (has_leave_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leave_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLeaveMapMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLeaveMapMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLeaveMapMsg::MergeFrom(const ReqLeaveMapMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_map_title_id(from.map_title_id());
    }
    if (from.has_leave_msg()) {
      mutable_leave_msg()->::NFMsg::BigMapLeaveMsg::MergeFrom(from.leave_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLeaveMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveMapMsg::CopyFrom(const ReqLeaveMapMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveMapMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_leave_msg()) {
    if (!this->leave_msg().IsInitialized()) return false;
  }
  return true;
}

void ReqLeaveMapMsg::Swap(ReqLeaveMapMsg* other) {
  if (other != this) {
    std::swap(map_title_id_, other->map_title_id_);
    std::swap(leave_msg_, other->leave_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLeaveMapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLeaveMapMsg_descriptor_;
  metadata.reflection = ReqLeaveMapMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckLeaveMapMsg::AckLeaveMapMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLeaveMapMsg::InitAsDefaultInstance() {
}

AckLeaveMapMsg::AckLeaveMapMsg(const AckLeaveMapMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLeaveMapMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLeaveMapMsg::~AckLeaveMapMsg() {
  SharedDtor();
}

void AckLeaveMapMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLeaveMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLeaveMapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLeaveMapMsg_descriptor_;
}

const AckLeaveMapMsg& AckLeaveMapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckLeaveMapMsg* AckLeaveMapMsg::default_instance_ = NULL;

AckLeaveMapMsg* AckLeaveMapMsg::New() const {
  return new AckLeaveMapMsg;
}

void AckLeaveMapMsg::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLeaveMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckLeaveMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLeaveMapMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLeaveMapMsg::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLeaveMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLeaveMapMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLeaveMapMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLeaveMapMsg::MergeFrom(const AckLeaveMapMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLeaveMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLeaveMapMsg::CopyFrom(const AckLeaveMapMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLeaveMapMsg::IsInitialized() const {

  return true;
}

void AckLeaveMapMsg::Swap(AckLeaveMapMsg* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLeaveMapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLeaveMapMsg_descriptor_;
  metadata.reflection = AckLeaveMapMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetMapAward::kMapTitleIdFieldNumber;
#endif  // !_MSC_VER

ReqGetMapAward::ReqGetMapAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetMapAward::InitAsDefaultInstance() {
}

ReqGetMapAward::ReqGetMapAward(const ReqGetMapAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetMapAward::SharedCtor() {
  _cached_size_ = 0;
  map_title_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetMapAward::~ReqGetMapAward() {
  SharedDtor();
}

void ReqGetMapAward::SharedDtor() {
  if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_id_;
  }
  if (this != default_instance_) {
  }
}

void ReqGetMapAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetMapAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetMapAward_descriptor_;
}

const ReqGetMapAward& ReqGetMapAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqGetMapAward* ReqGetMapAward::default_instance_ = NULL;

ReqGetMapAward* ReqGetMapAward::New() const {
  return new ReqGetMapAward;
}

void ReqGetMapAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title_id()) {
      if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
        map_title_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetMapAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetMapAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetMapAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetMapAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title_id = 1;
    if (has_map_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetMapAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetMapAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetMapAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetMapAward::MergeFrom(const ReqGetMapAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_map_title_id(from.map_title_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetMapAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetMapAward::CopyFrom(const ReqGetMapAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetMapAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetMapAward::Swap(ReqGetMapAward* other) {
  if (other != this) {
    std::swap(map_title_id_, other->map_title_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetMapAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetMapAward_descriptor_;
  metadata.reflection = ReqGetMapAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckGetMapAward::AckGetMapAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGetMapAward::InitAsDefaultInstance() {
}

AckGetMapAward::AckGetMapAward(const AckGetMapAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGetMapAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGetMapAward::~AckGetMapAward() {
  SharedDtor();
}

void AckGetMapAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGetMapAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGetMapAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGetMapAward_descriptor_;
}

const AckGetMapAward& AckGetMapAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckGetMapAward* AckGetMapAward::default_instance_ = NULL;

AckGetMapAward* AckGetMapAward::New() const {
  return new AckGetMapAward;
}

void AckGetMapAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGetMapAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckGetMapAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGetMapAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGetMapAward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGetMapAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGetMapAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGetMapAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGetMapAward::MergeFrom(const AckGetMapAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGetMapAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetMapAward::CopyFrom(const AckGetMapAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetMapAward::IsInitialized() const {

  return true;
}

void AckGetMapAward::Swap(AckGetMapAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGetMapAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGetMapAward_descriptor_;
  metadata.reflection = AckGetMapAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMapHunting::kMapTitleIdFieldNumber;
#endif  // !_MSC_VER

ReqMapHunting::ReqMapHunting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMapHunting::InitAsDefaultInstance() {
}

ReqMapHunting::ReqMapHunting(const ReqMapHunting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMapHunting::SharedCtor() {
  _cached_size_ = 0;
  map_title_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMapHunting::~ReqMapHunting() {
  SharedDtor();
}

void ReqMapHunting::SharedDtor() {
  if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_id_;
  }
  if (this != default_instance_) {
  }
}

void ReqMapHunting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMapHunting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMapHunting_descriptor_;
}

const ReqMapHunting& ReqMapHunting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqMapHunting* ReqMapHunting::default_instance_ = NULL;

ReqMapHunting* ReqMapHunting::New() const {
  return new ReqMapHunting;
}

void ReqMapHunting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title_id()) {
      if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
        map_title_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMapHunting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMapHunting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMapHunting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMapHunting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title_id = 1;
    if (has_map_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMapHunting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMapHunting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMapHunting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMapHunting::MergeFrom(const ReqMapHunting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_map_title_id(from.map_title_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMapHunting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapHunting::CopyFrom(const ReqMapHunting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapHunting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqMapHunting::Swap(ReqMapHunting* other) {
  if (other != this) {
    std::swap(map_title_id_, other->map_title_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMapHunting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMapHunting_descriptor_;
  metadata.reflection = ReqMapHunting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckMapHunting::AckMapHunting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckMapHunting::InitAsDefaultInstance() {
}

AckMapHunting::AckMapHunting(const AckMapHunting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckMapHunting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMapHunting::~AckMapHunting() {
  SharedDtor();
}

void AckMapHunting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckMapHunting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMapHunting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMapHunting_descriptor_;
}

const AckMapHunting& AckMapHunting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckMapHunting* AckMapHunting::default_instance_ = NULL;

AckMapHunting* AckMapHunting::New() const {
  return new AckMapHunting;
}

void AckMapHunting::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckMapHunting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckMapHunting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckMapHunting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckMapHunting::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMapHunting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckMapHunting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckMapHunting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckMapHunting::MergeFrom(const AckMapHunting& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckMapHunting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapHunting::CopyFrom(const AckMapHunting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapHunting::IsInitialized() const {

  return true;
}

void AckMapHunting::Swap(AckMapHunting* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckMapHunting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMapHunting_descriptor_;
  metadata.reflection = AckMapHunting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMapKingWar::kMapTitleIdFieldNumber;
#endif  // !_MSC_VER

ReqMapKingWar::ReqMapKingWar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMapKingWar::InitAsDefaultInstance() {
}

ReqMapKingWar::ReqMapKingWar(const ReqMapKingWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMapKingWar::SharedCtor() {
  _cached_size_ = 0;
  map_title_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMapKingWar::~ReqMapKingWar() {
  SharedDtor();
}

void ReqMapKingWar::SharedDtor() {
  if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
    delete map_title_id_;
  }
  if (this != default_instance_) {
  }
}

void ReqMapKingWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMapKingWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMapKingWar_descriptor_;
}

const ReqMapKingWar& ReqMapKingWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqMapKingWar* ReqMapKingWar::default_instance_ = NULL;

ReqMapKingWar* ReqMapKingWar::New() const {
  return new ReqMapKingWar;
}

void ReqMapKingWar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_title_id()) {
      if (map_title_id_ != &::google::protobuf::internal::kEmptyString) {
        map_title_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMapKingWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMapKingWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMapKingWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMapKingWar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes map_title_id = 1;
    if (has_map_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_title_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMapKingWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMapKingWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMapKingWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMapKingWar::MergeFrom(const ReqMapKingWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_map_title_id(from.map_title_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMapKingWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapKingWar::CopyFrom(const ReqMapKingWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapKingWar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqMapKingWar::Swap(ReqMapKingWar* other) {
  if (other != this) {
    std::swap(map_title_id_, other->map_title_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMapKingWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMapKingWar_descriptor_;
  metadata.reflection = ReqMapKingWar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckMapKingWar::AckMapKingWar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckMapKingWar::InitAsDefaultInstance() {
}

AckMapKingWar::AckMapKingWar(const AckMapKingWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckMapKingWar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMapKingWar::~AckMapKingWar() {
  SharedDtor();
}

void AckMapKingWar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckMapKingWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMapKingWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMapKingWar_descriptor_;
}

const AckMapKingWar& AckMapKingWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckMapKingWar* AckMapKingWar::default_instance_ = NULL;

AckMapKingWar* AckMapKingWar::New() const {
  return new AckMapKingWar;
}

void AckMapKingWar::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckMapKingWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckMapKingWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckMapKingWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckMapKingWar::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMapKingWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckMapKingWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckMapKingWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckMapKingWar::MergeFrom(const AckMapKingWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckMapKingWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapKingWar::CopyFrom(const AckMapKingWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapKingWar::IsInitialized() const {

  return true;
}

void AckMapKingWar::Swap(AckMapKingWar* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckMapKingWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMapKingWar_descriptor_;
  metadata.reflection = AckMapKingWar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPRoomInfo::kNCellStatusFieldNumber;
const int PVPRoomInfo::kRoomIDFieldNumber;
const int PVPRoomInfo::kNPVPModeFieldNumber;
const int PVPRoomInfo::kNPVPGradeFieldNumber;
const int PVPRoomInfo::kMaxPalyerFieldNumber;
const int PVPRoomInfo::kXRedPlayerFieldNumber;
const int PVPRoomInfo::kXBluePlayerFieldNumber;
const int PVPRoomInfo::kServeridFieldNumber;
const int PVPRoomInfo::kSceneIDFieldNumber;
const int PVPRoomInfo::kGroupIDFieldNumber;
#endif  // !_MSC_VER

PVPRoomInfo::PVPRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPRoomInfo::InitAsDefaultInstance() {
  roomid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

PVPRoomInfo::PVPRoomInfo(const PVPRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  ncellstatus_ = 0;
  roomid_ = NULL;
  npvpmode_ = 0;
  npvpgrade_ = 0;
  maxpalyer_ = 0;
  serverid_ = GOOGLE_LONGLONG(0);
  sceneid_ = GOOGLE_LONGLONG(0);
  groupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPRoomInfo::~PVPRoomInfo() {
  SharedDtor();
}

void PVPRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete roomid_;
  }
}

void PVPRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPRoomInfo_descriptor_;
}

const PVPRoomInfo& PVPRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

PVPRoomInfo* PVPRoomInfo::default_instance_ = NULL;

PVPRoomInfo* PVPRoomInfo::New() const {
  return new PVPRoomInfo;
}

void PVPRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ncellstatus_ = 0;
    if (has_roomid()) {
      if (roomid_ != NULL) roomid_->::NFMsg::Ident::Clear();
    }
    npvpmode_ = 0;
    npvpgrade_ = 0;
    maxpalyer_ = 0;
    serverid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sceneid_ = GOOGLE_LONGLONG(0);
    groupid_ = GOOGLE_LONGLONG(0);
  }
  xredplayer_.Clear();
  xblueplayer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nCellStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncellstatus_)));
          set_has_ncellstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoomID;
        break;
      }

      // required .NFMsg.Ident RoomID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nPVPMode;
        break;
      }

      // required int32 nPVPMode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPVPMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpmode_)));
          set_has_npvpmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nPVPGrade;
        break;
      }

      // required int32 nPVPGrade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPVPGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpgrade_)));
          set_has_npvpgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaxPalyer;
        break;
      }

      // required int32 MaxPalyer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxPalyer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpalyer_)));
          set_has_maxpalyer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_xRedPlayer;
        break;
      }

      // repeated .NFMsg.Ident xRedPlayer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xRedPlayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xredplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_xRedPlayer;
        if (input->ExpectTag(58)) goto parse_xBluePlayer;
        break;
      }

      // repeated .NFMsg.Ident xBluePlayer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xBluePlayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xblueplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_xBluePlayer;
        if (input->ExpectTag(64)) goto parse_serverid;
        break;
      }

      // optional int64 serverid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_SceneID;
        break;
      }

      // optional int64 SceneID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_groupID;
        break;
      }

      // optional int64 groupID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nCellStatus = 1;
  if (has_ncellstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ncellstatus(), output);
  }

  // required .NFMsg.Ident RoomID = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomid(), output);
  }

  // required int32 nPVPMode = 3;
  if (has_npvpmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->npvpmode(), output);
  }

  // required int32 nPVPGrade = 4;
  if (has_npvpgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npvpgrade(), output);
  }

  // required int32 MaxPalyer = 5;
  if (has_maxpalyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxpalyer(), output);
  }

  // repeated .NFMsg.Ident xRedPlayer = 6;
  for (int i = 0; i < this->xredplayer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->xredplayer(i), output);
  }

  // repeated .NFMsg.Ident xBluePlayer = 7;
  for (int i = 0; i < this->xblueplayer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->xblueplayer(i), output);
  }

  // optional int64 serverid = 8;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->serverid(), output);
  }

  // optional int64 SceneID = 9;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->sceneid(), output);
  }

  // optional int64 groupID = 10;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nCellStatus = 1;
  if (has_ncellstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ncellstatus(), target);
  }

  // required .NFMsg.Ident RoomID = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomid(), target);
  }

  // required int32 nPVPMode = 3;
  if (has_npvpmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->npvpmode(), target);
  }

  // required int32 nPVPGrade = 4;
  if (has_npvpgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npvpgrade(), target);
  }

  // required int32 MaxPalyer = 5;
  if (has_maxpalyer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxpalyer(), target);
  }

  // repeated .NFMsg.Ident xRedPlayer = 6;
  for (int i = 0; i < this->xredplayer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->xredplayer(i), target);
  }

  // repeated .NFMsg.Ident xBluePlayer = 7;
  for (int i = 0; i < this->xblueplayer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->xblueplayer(i), target);
  }

  // optional int64 serverid = 8;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->serverid(), target);
  }

  // optional int64 SceneID = 9;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->sceneid(), target);
  }

  // optional int64 groupID = 10;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nCellStatus = 1;
    if (has_ncellstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncellstatus());
    }

    // required .NFMsg.Ident RoomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomid());
    }

    // required int32 nPVPMode = 3;
    if (has_npvpmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npvpmode());
    }

    // required int32 nPVPGrade = 4;
    if (has_npvpgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npvpgrade());
    }

    // required int32 MaxPalyer = 5;
    if (has_maxpalyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpalyer());
    }

    // optional int64 serverid = 8;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 SceneID = 9;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sceneid());
    }

    // optional int64 groupID = 10;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

  }
  // repeated .NFMsg.Ident xRedPlayer = 6;
  total_size += 1 * this->xredplayer_size();
  for (int i = 0; i < this->xredplayer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xredplayer(i));
  }

  // repeated .NFMsg.Ident xBluePlayer = 7;
  total_size += 1 * this->xblueplayer_size();
  for (int i = 0; i < this->xblueplayer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xblueplayer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPRoomInfo::MergeFrom(const PVPRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  xredplayer_.MergeFrom(from.xredplayer_);
  xblueplayer_.MergeFrom(from.xblueplayer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncellstatus()) {
      set_ncellstatus(from.ncellstatus());
    }
    if (from.has_roomid()) {
      mutable_roomid()->::NFMsg::Ident::MergeFrom(from.roomid());
    }
    if (from.has_npvpmode()) {
      set_npvpmode(from.npvpmode());
    }
    if (from.has_npvpgrade()) {
      set_npvpgrade(from.npvpgrade());
    }
    if (from.has_maxpalyer()) {
      set_maxpalyer(from.maxpalyer());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPRoomInfo::CopyFrom(const PVPRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_roomid()) {
    if (!this->roomid().IsInitialized()) return false;
  }
  for (int i = 0; i < xredplayer_size(); i++) {
    if (!this->xredplayer(i).IsInitialized()) return false;
  }
  for (int i = 0; i < xblueplayer_size(); i++) {
    if (!this->xblueplayer(i).IsInitialized()) return false;
  }
  return true;
}

void PVPRoomInfo::Swap(PVPRoomInfo* other) {
  if (other != this) {
    std::swap(ncellstatus_, other->ncellstatus_);
    std::swap(roomid_, other->roomid_);
    std::swap(npvpmode_, other->npvpmode_);
    std::swap(npvpgrade_, other->npvpgrade_);
    std::swap(maxpalyer_, other->maxpalyer_);
    xredplayer_.Swap(&other->xredplayer_);
    xblueplayer_.Swap(&other->xblueplayer_);
    std::swap(serverid_, other->serverid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPRoomInfo_descriptor_;
  metadata.reflection = PVPRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqPVPApplyMatch_EApplyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPVPApplyMatch_EApplyType_descriptor_;
}
bool ReqPVPApplyMatch_EApplyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_Single;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_Team;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_MIN;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_MAX;
const int ReqPVPApplyMatch::EApplyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqPVPApplyMatch::kSelfIdFieldNumber;
const int ReqPVPApplyMatch::kNPVPModeFieldNumber;
const int ReqPVPApplyMatch::kScoreFieldNumber;
const int ReqPVPApplyMatch::kApplyTypeFieldNumber;
const int ReqPVPApplyMatch::kTeamIdFieldNumber;
#endif  // !_MSC_VER

ReqPVPApplyMatch::ReqPVPApplyMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPVPApplyMatch::InitAsDefaultInstance() {
  self_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  team_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqPVPApplyMatch::ReqPVPApplyMatch(const ReqPVPApplyMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPVPApplyMatch::SharedCtor() {
  _cached_size_ = 0;
  self_id_ = NULL;
  npvpmode_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  applytype_ = 0;
  team_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPVPApplyMatch::~ReqPVPApplyMatch() {
  SharedDtor();
}

void ReqPVPApplyMatch::SharedDtor() {
  if (this != default_instance_) {
    delete self_id_;
    delete team_id_;
  }
}

void ReqPVPApplyMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPVPApplyMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPVPApplyMatch_descriptor_;
}

const ReqPVPApplyMatch& ReqPVPApplyMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqPVPApplyMatch* ReqPVPApplyMatch::default_instance_ = NULL;

ReqPVPApplyMatch* ReqPVPApplyMatch::New() const {
  return new ReqPVPApplyMatch;
}

void ReqPVPApplyMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::NFMsg::Ident::Clear();
    }
    npvpmode_ = 0;
    score_ = GOOGLE_LONGLONG(0);
    applytype_ = 0;
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPVPApplyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident self_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nPVPMode;
        break;
      }

      // required int32 nPVPMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPVPMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpmode_)));
          set_has_npvpmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int64 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ApplyType;
        break;
      }

      // required int32 ApplyType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ApplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_team_id;
        break;
      }

      // optional .NFMsg.Ident team_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPVPApplyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident self_id = 1;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->self_id(), output);
  }

  // required int32 nPVPMode = 2;
  if (has_npvpmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npvpmode(), output);
  }

  // optional int64 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->score(), output);
  }

  // required int32 ApplyType = 4;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->applytype(), output);
  }

  // optional .NFMsg.Ident team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPVPApplyMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident self_id = 1;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->self_id(), target);
  }

  // required int32 nPVPMode = 2;
  if (has_npvpmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npvpmode(), target);
  }

  // optional int64 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->score(), target);
  }

  // required int32 ApplyType = 4;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->applytype(), target);
  }

  // optional .NFMsg.Ident team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPVPApplyMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident self_id = 1;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_id());
    }

    // required int32 nPVPMode = 2;
    if (has_npvpmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npvpmode());
    }

    // optional int64 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // required int32 ApplyType = 4;
    if (has_applytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applytype());
    }

    // optional .NFMsg.Ident team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPVPApplyMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPVPApplyMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPVPApplyMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPVPApplyMatch::MergeFrom(const ReqPVPApplyMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_id()) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_npvpmode()) {
      set_npvpmode(from.npvpmode());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
    if (from.has_team_id()) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPVPApplyMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPVPApplyMatch::CopyFrom(const ReqPVPApplyMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPVPApplyMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_self_id()) {
    if (!this->self_id().IsInitialized()) return false;
  }
  if (has_team_id()) {
    if (!this->team_id().IsInitialized()) return false;
  }
  return true;
}

void ReqPVPApplyMatch::Swap(ReqPVPApplyMatch* other) {
  if (other != this) {
    std::swap(self_id_, other->self_id_);
    std::swap(npvpmode_, other->npvpmode_);
    std::swap(score_, other->score_);
    std::swap(applytype_, other->applytype_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPVPApplyMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPVPApplyMatch_descriptor_;
  metadata.reflection = ReqPVPApplyMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPVPApplyMatch::kSelfIdFieldNumber;
const int AckPVPApplyMatch::kXRoomInfoFieldNumber;
const int AckPVPApplyMatch::kApplyTypeFieldNumber;
const int AckPVPApplyMatch::kNResultFieldNumber;
#endif  // !_MSC_VER

AckPVPApplyMatch::AckPVPApplyMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPVPApplyMatch::InitAsDefaultInstance() {
  self_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xroominfo_ = const_cast< ::NFMsg::PVPRoomInfo*>(&::NFMsg::PVPRoomInfo::default_instance());
}

AckPVPApplyMatch::AckPVPApplyMatch(const AckPVPApplyMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPVPApplyMatch::SharedCtor() {
  _cached_size_ = 0;
  self_id_ = NULL;
  xroominfo_ = NULL;
  applytype_ = 0;
  nresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPVPApplyMatch::~AckPVPApplyMatch() {
  SharedDtor();
}

void AckPVPApplyMatch::SharedDtor() {
  if (this != default_instance_) {
    delete self_id_;
    delete xroominfo_;
  }
}

void AckPVPApplyMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPVPApplyMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPVPApplyMatch_descriptor_;
}

const AckPVPApplyMatch& AckPVPApplyMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckPVPApplyMatch* AckPVPApplyMatch::default_instance_ = NULL;

AckPVPApplyMatch* AckPVPApplyMatch::New() const {
  return new AckPVPApplyMatch;
}

void AckPVPApplyMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::NFMsg::Ident::Clear();
    }
    if (has_xroominfo()) {
      if (xroominfo_ != NULL) xroominfo_->::NFMsg::PVPRoomInfo::Clear();
    }
    applytype_ = 0;
    nresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPVPApplyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident self_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xRoomInfo;
        break;
      }

      // optional .NFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xRoomInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xroominfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ApplyType;
        break;
      }

      // required int32 ApplyType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ApplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nResult;
        break;
      }

      // required int32 nResult = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPVPApplyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident self_id = 1;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->self_id(), output);
  }

  // optional .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xroominfo(), output);
  }

  // required int32 ApplyType = 3;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->applytype(), output);
  }

  // required int32 nResult = 4;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPVPApplyMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident self_id = 1;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->self_id(), target);
  }

  // optional .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xroominfo(), target);
  }

  // required int32 ApplyType = 3;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->applytype(), target);
  }

  // required int32 nResult = 4;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPVPApplyMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident self_id = 1;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_id());
    }

    // optional .NFMsg.PVPRoomInfo xRoomInfo = 2;
    if (has_xroominfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xroominfo());
    }

    // required int32 ApplyType = 3;
    if (has_applytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applytype());
    }

    // required int32 nResult = 4;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPVPApplyMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPVPApplyMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPVPApplyMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPVPApplyMatch::MergeFrom(const AckPVPApplyMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_id()) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_xroominfo()) {
      mutable_xroominfo()->::NFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
    }
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPVPApplyMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPVPApplyMatch::CopyFrom(const AckPVPApplyMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPVPApplyMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_self_id()) {
    if (!this->self_id().IsInitialized()) return false;
  }
  if (has_xroominfo()) {
    if (!this->xroominfo().IsInitialized()) return false;
  }
  return true;
}

void AckPVPApplyMatch::Swap(AckPVPApplyMatch* other) {
  if (other != this) {
    std::swap(self_id_, other->self_id_);
    std::swap(xroominfo_, other->xroominfo_);
    std::swap(applytype_, other->applytype_);
    std::swap(nresult_, other->nresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPVPApplyMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPVPApplyMatch_descriptor_;
  metadata.reflection = AckPVPApplyMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCreatePVPEctype::kSelfIdFieldNumber;
const int ReqCreatePVPEctype::kXRoomInfoFieldNumber;
#endif  // !_MSC_VER

ReqCreatePVPEctype::ReqCreatePVPEctype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCreatePVPEctype::InitAsDefaultInstance() {
  self_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xroominfo_ = const_cast< ::NFMsg::PVPRoomInfo*>(&::NFMsg::PVPRoomInfo::default_instance());
}

ReqCreatePVPEctype::ReqCreatePVPEctype(const ReqCreatePVPEctype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCreatePVPEctype::SharedCtor() {
  _cached_size_ = 0;
  self_id_ = NULL;
  xroominfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCreatePVPEctype::~ReqCreatePVPEctype() {
  SharedDtor();
}

void ReqCreatePVPEctype::SharedDtor() {
  if (this != default_instance_) {
    delete self_id_;
    delete xroominfo_;
  }
}

void ReqCreatePVPEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreatePVPEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreatePVPEctype_descriptor_;
}

const ReqCreatePVPEctype& ReqCreatePVPEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqCreatePVPEctype* ReqCreatePVPEctype::default_instance_ = NULL;

ReqCreatePVPEctype* ReqCreatePVPEctype::New() const {
  return new ReqCreatePVPEctype;
}

void ReqCreatePVPEctype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::NFMsg::Ident::Clear();
    }
    if (has_xroominfo()) {
      if (xroominfo_ != NULL) xroominfo_->::NFMsg::PVPRoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCreatePVPEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident self_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xRoomInfo;
        break;
      }

      // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xRoomInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xroominfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCreatePVPEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident self_id = 1;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->self_id(), output);
  }

  // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xroominfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCreatePVPEctype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident self_id = 1;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->self_id(), target);
  }

  // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xroominfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCreatePVPEctype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident self_id = 1;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_id());
    }

    // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
    if (has_xroominfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xroominfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreatePVPEctype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCreatePVPEctype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCreatePVPEctype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCreatePVPEctype::MergeFrom(const ReqCreatePVPEctype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_id()) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_xroominfo()) {
      mutable_xroominfo()->::NFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCreatePVPEctype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreatePVPEctype::CopyFrom(const ReqCreatePVPEctype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreatePVPEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_self_id()) {
    if (!this->self_id().IsInitialized()) return false;
  }
  if (has_xroominfo()) {
    if (!this->xroominfo().IsInitialized()) return false;
  }
  return true;
}

void ReqCreatePVPEctype::Swap(ReqCreatePVPEctype* other) {
  if (other != this) {
    std::swap(self_id_, other->self_id_);
    std::swap(xroominfo_, other->xroominfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCreatePVPEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCreatePVPEctype_descriptor_;
  metadata.reflection = ReqCreatePVPEctype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCreatePVPEctype::kSelfIdFieldNumber;
const int AckCreatePVPEctype::kXRoomInfoFieldNumber;
const int AckCreatePVPEctype::kApplyTypeFieldNumber;
#endif  // !_MSC_VER

AckCreatePVPEctype::AckCreatePVPEctype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCreatePVPEctype::InitAsDefaultInstance() {
  self_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  xroominfo_ = const_cast< ::NFMsg::PVPRoomInfo*>(&::NFMsg::PVPRoomInfo::default_instance());
}

AckCreatePVPEctype::AckCreatePVPEctype(const AckCreatePVPEctype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCreatePVPEctype::SharedCtor() {
  _cached_size_ = 0;
  self_id_ = NULL;
  xroominfo_ = NULL;
  applytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCreatePVPEctype::~AckCreatePVPEctype() {
  SharedDtor();
}

void AckCreatePVPEctype::SharedDtor() {
  if (this != default_instance_) {
    delete self_id_;
    delete xroominfo_;
  }
}

void AckCreatePVPEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCreatePVPEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCreatePVPEctype_descriptor_;
}

const AckCreatePVPEctype& AckCreatePVPEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckCreatePVPEctype* AckCreatePVPEctype::default_instance_ = NULL;

AckCreatePVPEctype* AckCreatePVPEctype::New() const {
  return new AckCreatePVPEctype;
}

void AckCreatePVPEctype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::NFMsg::Ident::Clear();
    }
    if (has_xroominfo()) {
      if (xroominfo_ != NULL) xroominfo_->::NFMsg::PVPRoomInfo::Clear();
    }
    applytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCreatePVPEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident self_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xRoomInfo;
        break;
      }

      // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xRoomInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xroominfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ApplyType;
        break;
      }

      // required int32 ApplyType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ApplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCreatePVPEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident self_id = 1;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->self_id(), output);
  }

  // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xroominfo(), output);
  }

  // required int32 ApplyType = 3;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->applytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCreatePVPEctype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident self_id = 1;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->self_id(), target);
  }

  // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->xroominfo(), target);
  }

  // required int32 ApplyType = 3;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->applytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCreatePVPEctype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident self_id = 1;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_id());
    }

    // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
    if (has_xroominfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xroominfo());
    }

    // required int32 ApplyType = 3;
    if (has_applytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCreatePVPEctype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCreatePVPEctype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCreatePVPEctype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCreatePVPEctype::MergeFrom(const AckCreatePVPEctype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_id()) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_xroominfo()) {
      mutable_xroominfo()->::NFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
    }
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCreatePVPEctype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCreatePVPEctype::CopyFrom(const AckCreatePVPEctype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCreatePVPEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_self_id()) {
    if (!this->self_id().IsInitialized()) return false;
  }
  if (has_xroominfo()) {
    if (!this->xroominfo().IsInitialized()) return false;
  }
  return true;
}

void AckCreatePVPEctype::Swap(AckCreatePVPEctype* other) {
  if (other != this) {
    std::swap(self_id_, other->self_id_);
    std::swap(xroominfo_, other->xroominfo_);
    std::swap(applytype_, other->applytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCreatePVPEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCreatePVPEctype_descriptor_;
  metadata.reflection = AckCreatePVPEctype_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
