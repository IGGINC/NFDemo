package NFMsg; 

import "NFDefine.proto";

message Ident//基础结构，不直接发送
{ 
    required int64		svrid = 1;
    required int64      index = 2;
}
message Vector2//基础结构，不直接发送
{ 
    required float		x = 1;
    required float      y = 2;
}
message Vector3//基础结构，不直接发送
{ 
    required float		x = 1;
    required float      y = 2;
	required float      z = 3;
}
////////////////////////BaseCommon/////////////////////////////
message PropertyInt//基础结构，不直接发送
{ 
    required bytes     property_name = 1;
    required int64      data = 2;
}

message PropertyFloat//基础结构，不直接发送
{ 
    required bytes     property_name = 1;
    required float      data = 2;
}

message PropertyString//基础结构，不直接发送
{ 
    required bytes     property_name = 1;
    required bytes     data = 2;
}

message PropertyObject//基础结构，不直接发送
{ 
    required bytes     property_name = 1;
    required Ident      data = 2;
}

message PropertyVector2//基础结构，不直接发送
{ 
    required bytes     property_name = 1;
    required Vector2      data = 2;
}

message PropertyVector3//基础结构，不直接发送
{ 
    required bytes     property_name = 1;
    required Vector3      data = 2;
}

///////////////////////////////////////////////

message RecordInt//基础结构，不直接发送
{
    required int32      row = 1;
	required int32      col = 2;
	required int64      data = 3;
}


message RecordFloat//基础结构，不直接发送
{
    required int32      row = 1;
	required int32      col = 2;
	required float      data = 3;
}

message RecordString//基础结构，不直接发送
{ 
    required int32      row = 1;
	required int32      col = 2;
	required bytes     data = 3;
}

message RecordObject//基础结构，不直接发送
{
    required int32      row = 1;
	required int32      col = 2;
	required Ident      data = 3;
}

message RecordVector2//基础结构，不直接发送
{
    required int32      row = 1;
	required int32      col = 2;
	required Vector2      data = 3;
}

message RecordVector3//基础结构，不直接发送
{
    required int32      row = 1;
	required int32      col = 2;
	required Vector3      data = 3;
}

message RecordAddRowStruct//表添加基础行结构，不直接发送
{
	required int32 				row = 1;
	repeated RecordInt			record_int_list = 2;
	repeated RecordFloat		record_float_list = 3;
	repeated RecordString		record_string_list = 4;
	repeated RecordObject		record_object_list = 5;
	repeated RecordVector2      record_vector2_list = 6;
	repeated RecordVector3      record_vector3_list = 7;
}
message ObjectRecordBase//基础结构，不直接发送
{ 
	required bytes  record_name = 1;
	repeated RecordAddRowStruct row_struct = 2;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
message ObjectPropertyList//个人玩家全部属性列表，可直接发送--统一发,为节约包
{
	required Ident  player_id = 1;
	repeated PropertyInt property_int_list = 2;
	repeated PropertyFloat property_float_list = 3;
	repeated PropertyString property_string_list = 4;
	repeated PropertyObject property_object_list = 5;
	repeated PropertyVector2 property_vector2_list = 6;
	repeated PropertyVector3 property_vector3_list = 7;
}
 
 message MultiObjectPropertyList//多人玩家全部属性列表，可直接发送--统一发,为节约包
 {
	repeated ObjectPropertyList multi_player_property = 1;
 }

message ObjectRecordList//个人玩家全部表数据，可直接发送--统一发,为节约包
{
	required Ident  player_id = 1;
	repeated ObjectRecordBase record_list = 2;
}

 message MultiObjectRecordList//多人玩家全部表数据，可直接发送--统一发,为节约包
 {
	repeated ObjectRecordList multi_player_record = 1;
 }

message ObjectPropertyInt//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
    repeated PropertyInt	property_list = 2;
} 

message ObjectPropertyFloat//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
    repeated PropertyFloat  	property_list = 2;
} 

message ObjectPropertyString//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
    repeated PropertyString  	property_list = 2;
} 

message ObjectPropertyObject//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
    repeated PropertyObject  	property_list = 2;
}

message ObjectPropertyVector2//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
    repeated PropertyVector2  	property_list = 2;
}

message ObjectPropertyVector3//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
    repeated PropertyVector3  	property_list = 2;
}

message ObjectRecordInt//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;
    repeated RecordInt  	property_list = 3;
} 

message ObjectRecordFloat//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;
    repeated RecordFloat  	property_list = 3;
}

message ObjectRecordString//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;
    repeated RecordString  	property_list = 3;
}

message ObjectRecordObject//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;    
    repeated RecordObject  property_list = 3;
}

message ObjectRecordVector2//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;    
    repeated RecordVector2  property_list = 3;
}

message ObjectRecordVector3//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;    
    repeated RecordVector3  property_list = 3;
}

message ObjectRecordSwap//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident  	player_id = 1;
	required bytes    	origin_record_name = 2;
	optional bytes		target_record_name = 3;
	required int32 		row_origin = 4;
	required int32 		row_target = 5;
}

//////////////////////////////



message ObjectRecordAddRow//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident     			player_id = 1;
	required bytes     			record_name = 2;
	repeated RecordAddRowStruct    row_data = 3;
}

message ObjectRecordRemove//个人玩家单类型属性数据，可直接发送---变化时
{
	required Ident     	player_id = 1;
	required bytes    	record_name = 2;  
	repeated int32 		remove_row = 3;
}

///////////////////////////////////////////////////////////////////
message PlayerPropertyBase
{
	repeated PropertyInt property_int_list = 1;
	repeated PropertyFloat property_float_list = 2;
	repeated PropertyString property_string_list = 3;
	repeated PropertyObject property_object_list = 4;
	repeated PropertyVector2 property_vector2_list = 5;
	repeated PropertyVector3 property_vector3_list = 6;
}

////////////////////////////////////////////////////////////
message PlayerRecordBase
{
	required string  record_name = 1;
	repeated RecordInt  record_int_list = 2;
	repeated RecordFloat  record_float_list = 3;
	repeated RecordString  record_string_list = 4;
	repeated RecordObject  record_object_list = 5;
	repeated RecordVector2 record_vector2_list = 6;
    repeated RecordVector3 record_vector3_list = 7;	
}

message PlayerRecordList
{
	repeated PlayerRecordBase record_list = 1;
}

///////////////////////////////////////////////////////////////////
message MsgBase
{
	required Ident  player_id = 1;//内网需要，外网视情况0(通常不需要，只有在要求别人的数据时才需要)
	required bytes  msg_data = 2;
	repeated Ident  player_Client_list = 3;
	optional Ident  hash_ident = 4;
}

message Position
{
	required float  x = 1;
	required float  y = 2;
	required float  z = 3;
}

message ReqCommand//GM命令
{
	enum EGameCommandType
	{
		EGCT_MODIY_PROPERTY		= 0;//修改属性[property_name,value]
		EGCT_MODIY_ITEM			= 1;//得到物品[item_id,count]
		EGCT_CREATE_OBJECT		= 2;//创建对象[object_index,count]
		EGCT_ADD_ROLE_EXP		= 3;//增加经验
	}
	required Ident control_id = 1;
	required EGameCommandType command_id = 2;
	optional bytes command_str_value = 3;
	optional int64 command_value_int = 4;
	optional double command_value_float = 5;
	optional bytes command_value_str = 6;
	optional Ident command_value_object = 7;
	optional int32 row = 8;
	optional int32 col = 9;
}